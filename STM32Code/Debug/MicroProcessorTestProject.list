
MicroProcessorTestProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090d4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800925c  0800925c  0001925c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092dc  080092dc  00020120  2**0
                  CONTENTS
  4 .ARM          00000008  080092dc  080092dc  000192dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092e4  080092e4  00020120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092e4  080092e4  000192e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092e8  080092e8  000192e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  20000000  080092ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020120  2**0
                  CONTENTS
 10 .bss          00001e58  20000120  20000120  00020120  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  20001f78  20001f78  00020120  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019774  00000000  00000000  00020193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000045c4  00000000  00000000  00039907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000015e8  00000000  00000000  0003ded0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001098  00000000  00000000  0003f4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025436  00000000  00000000  00040550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ccaa  00000000  00000000  00065986  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d01a7  00000000  00000000  00082630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005998  00000000  00000000  001527d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009e  00000000  00000000  00158170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000120 	.word	0x20000120
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009244 	.word	0x08009244

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000124 	.word	0x20000124
 80001c4:	08009244 	.word	0x08009244

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295
 80001f0:	f000 b970 	b.w	80004d4 <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9e08      	ldr	r6, [sp, #32]
 8000212:	460d      	mov	r5, r1
 8000214:	4604      	mov	r4, r0
 8000216:	460f      	mov	r7, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14a      	bne.n	80002b2 <__udivmoddi4+0xa6>
 800021c:	428a      	cmp	r2, r1
 800021e:	4694      	mov	ip, r2
 8000220:	d965      	bls.n	80002ee <__udivmoddi4+0xe2>
 8000222:	fab2 f382 	clz	r3, r2
 8000226:	b143      	cbz	r3, 800023a <__udivmoddi4+0x2e>
 8000228:	fa02 fc03 	lsl.w	ip, r2, r3
 800022c:	f1c3 0220 	rsb	r2, r3, #32
 8000230:	409f      	lsls	r7, r3
 8000232:	fa20 f202 	lsr.w	r2, r0, r2
 8000236:	4317      	orrs	r7, r2
 8000238:	409c      	lsls	r4, r3
 800023a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023e:	fa1f f58c 	uxth.w	r5, ip
 8000242:	fbb7 f1fe 	udiv	r1, r7, lr
 8000246:	0c22      	lsrs	r2, r4, #16
 8000248:	fb0e 7711 	mls	r7, lr, r1, r7
 800024c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000250:	fb01 f005 	mul.w	r0, r1, r5
 8000254:	4290      	cmp	r0, r2
 8000256:	d90a      	bls.n	800026e <__udivmoddi4+0x62>
 8000258:	eb1c 0202 	adds.w	r2, ip, r2
 800025c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000260:	f080 811c 	bcs.w	800049c <__udivmoddi4+0x290>
 8000264:	4290      	cmp	r0, r2
 8000266:	f240 8119 	bls.w	800049c <__udivmoddi4+0x290>
 800026a:	3902      	subs	r1, #2
 800026c:	4462      	add	r2, ip
 800026e:	1a12      	subs	r2, r2, r0
 8000270:	b2a4      	uxth	r4, r4
 8000272:	fbb2 f0fe 	udiv	r0, r2, lr
 8000276:	fb0e 2210 	mls	r2, lr, r0, r2
 800027a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027e:	fb00 f505 	mul.w	r5, r0, r5
 8000282:	42a5      	cmp	r5, r4
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x90>
 8000286:	eb1c 0404 	adds.w	r4, ip, r4
 800028a:	f100 32ff 	add.w	r2, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x294>
 8000292:	42a5      	cmp	r5, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x294>
 8000298:	4464      	add	r4, ip
 800029a:	3802      	subs	r0, #2
 800029c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a0:	1b64      	subs	r4, r4, r5
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11e      	cbz	r6, 80002ae <__udivmoddi4+0xa2>
 80002a6:	40dc      	lsrs	r4, r3
 80002a8:	2300      	movs	r3, #0
 80002aa:	e9c6 4300 	strd	r4, r3, [r6]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d908      	bls.n	80002c8 <__udivmoddi4+0xbc>
 80002b6:	2e00      	cmp	r6, #0
 80002b8:	f000 80ed 	beq.w	8000496 <__udivmoddi4+0x28a>
 80002bc:	2100      	movs	r1, #0
 80002be:	e9c6 0500 	strd	r0, r5, [r6]
 80002c2:	4608      	mov	r0, r1
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	fab3 f183 	clz	r1, r3
 80002cc:	2900      	cmp	r1, #0
 80002ce:	d149      	bne.n	8000364 <__udivmoddi4+0x158>
 80002d0:	42ab      	cmp	r3, r5
 80002d2:	d302      	bcc.n	80002da <__udivmoddi4+0xce>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	f200 80f8 	bhi.w	80004ca <__udivmoddi4+0x2be>
 80002da:	1a84      	subs	r4, r0, r2
 80002dc:	eb65 0203 	sbc.w	r2, r5, r3
 80002e0:	2001      	movs	r0, #1
 80002e2:	4617      	mov	r7, r2
 80002e4:	2e00      	cmp	r6, #0
 80002e6:	d0e2      	beq.n	80002ae <__udivmoddi4+0xa2>
 80002e8:	e9c6 4700 	strd	r4, r7, [r6]
 80002ec:	e7df      	b.n	80002ae <__udivmoddi4+0xa2>
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xe6>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f382 	clz	r3, r2
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	f040 8090 	bne.w	800041c <__udivmoddi4+0x210>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2101      	movs	r1, #1
 8000308:	fbb2 f5f7 	udiv	r5, r2, r7
 800030c:	fb07 2015 	mls	r0, r7, r5, r2
 8000310:	0c22      	lsrs	r2, r4, #16
 8000312:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000316:	fb0e f005 	mul.w	r0, lr, r5
 800031a:	4290      	cmp	r0, r2
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x124>
 800031e:	eb1c 0202 	adds.w	r2, ip, r2
 8000322:	f105 38ff 	add.w	r8, r5, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x122>
 8000328:	4290      	cmp	r0, r2
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2b8>
 800032e:	4645      	mov	r5, r8
 8000330:	1a12      	subs	r2, r2, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb2 f0f7 	udiv	r0, r2, r7
 8000338:	fb07 2210 	mls	r2, r7, r0, r2
 800033c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x14e>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x14c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2c2>
 8000358:	4610      	mov	r0, r2
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000362:	e79f      	b.n	80002a4 <__udivmoddi4+0x98>
 8000364:	f1c1 0720 	rsb	r7, r1, #32
 8000368:	408b      	lsls	r3, r1
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa05 f401 	lsl.w	r4, r5, r1
 8000376:	fa20 f307 	lsr.w	r3, r0, r7
 800037a:	40fd      	lsrs	r5, r7
 800037c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000380:	4323      	orrs	r3, r4
 8000382:	fbb5 f8f9 	udiv	r8, r5, r9
 8000386:	fa1f fe8c 	uxth.w	lr, ip
 800038a:	fb09 5518 	mls	r5, r9, r8, r5
 800038e:	0c1c      	lsrs	r4, r3, #16
 8000390:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000394:	fb08 f50e 	mul.w	r5, r8, lr
 8000398:	42a5      	cmp	r5, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	fa00 f001 	lsl.w	r0, r0, r1
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b0>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2b4>
 80003b0:	42a5      	cmp	r5, r4
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2b4>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4464      	add	r4, ip
 80003bc:	1b64      	subs	r4, r4, r5
 80003be:	b29d      	uxth	r5, r3
 80003c0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c4:	fb09 4413 	mls	r4, r9, r3, r4
 80003c8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003cc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d0:	45a6      	cmp	lr, r4
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1da>
 80003d4:	eb1c 0404 	adds.w	r4, ip, r4
 80003d8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2ac>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2ac>
 80003e2:	3b02      	subs	r3, #2
 80003e4:	4464      	add	r4, ip
 80003e6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ea:	fba3 9502 	umull	r9, r5, r3, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	42ac      	cmp	r4, r5
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46ae      	mov	lr, r5
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x29c>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x298>
 80003fc:	b156      	cbz	r6, 8000414 <__udivmoddi4+0x208>
 80003fe:	ebb0 0208 	subs.w	r2, r0, r8
 8000402:	eb64 040e 	sbc.w	r4, r4, lr
 8000406:	fa04 f707 	lsl.w	r7, r4, r7
 800040a:	40ca      	lsrs	r2, r1
 800040c:	40cc      	lsrs	r4, r1
 800040e:	4317      	orrs	r7, r2
 8000410:	e9c6 7400 	strd	r7, r4, [r6]
 8000414:	4618      	mov	r0, r3
 8000416:	2100      	movs	r1, #0
 8000418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041c:	f1c3 0120 	rsb	r1, r3, #32
 8000420:	fa02 fc03 	lsl.w	ip, r2, r3
 8000424:	fa20 f201 	lsr.w	r2, r0, r1
 8000428:	fa25 f101 	lsr.w	r1, r5, r1
 800042c:	409d      	lsls	r5, r3
 800042e:	432a      	orrs	r2, r5
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1510 	mls	r5, r7, r0, r1
 8000440:	0c11      	lsrs	r1, r2, #16
 8000442:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000446:	fb00 f50e 	mul.w	r5, r0, lr
 800044a:	428d      	cmp	r5, r1
 800044c:	fa04 f403 	lsl.w	r4, r4, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x258>
 8000452:	eb1c 0101 	adds.w	r1, ip, r1
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b0>
 800045c:	428d      	cmp	r5, r1
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b0>
 8000460:	3802      	subs	r0, #2
 8000462:	4461      	add	r1, ip
 8000464:	1b49      	subs	r1, r1, r5
 8000466:	b292      	uxth	r2, r2
 8000468:	fbb1 f5f7 	udiv	r5, r1, r7
 800046c:	fb07 1115 	mls	r1, r7, r5, r1
 8000470:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000474:	fb05 f10e 	mul.w	r1, r5, lr
 8000478:	4291      	cmp	r1, r2
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x282>
 800047c:	eb1c 0202 	adds.w	r2, ip, r2
 8000480:	f105 38ff 	add.w	r8, r5, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2a8>
 8000486:	4291      	cmp	r1, r2
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2a8>
 800048a:	3d02      	subs	r5, #2
 800048c:	4462      	add	r2, ip
 800048e:	1a52      	subs	r2, r2, r1
 8000490:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0xfc>
 8000496:	4631      	mov	r1, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e708      	b.n	80002ae <__udivmoddi4+0xa2>
 800049c:	4639      	mov	r1, r7
 800049e:	e6e6      	b.n	800026e <__udivmoddi4+0x62>
 80004a0:	4610      	mov	r0, r2
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x90>
 80004a4:	4548      	cmp	r0, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f0>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b0:	3b01      	subs	r3, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f0>
 80004b4:	4645      	mov	r5, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x282>
 80004b8:	462b      	mov	r3, r5
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1da>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x258>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b0>
 80004c4:	3d02      	subs	r5, #2
 80004c6:	4462      	add	r2, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x124>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e70a      	b.n	80002e4 <__udivmoddi4+0xd8>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x14e>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80004de:	463b      	mov	r3, r7
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80004e6:	4b14      	ldr	r3, [pc, #80]	; (8000538 <MX_DAC_Init+0x60>)
 80004e8:	4a14      	ldr	r2, [pc, #80]	; (800053c <MX_DAC_Init+0x64>)
 80004ea:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80004ec:	4812      	ldr	r0, [pc, #72]	; (8000538 <MX_DAC_Init+0x60>)
 80004ee:	f001 f9d1 	bl	8001894 <HAL_DAC_Init>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80004f8:	f000 fa60 	bl	80009bc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80004fc:	2300      	movs	r3, #0
 80004fe:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000500:	2302      	movs	r3, #2
 8000502:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000504:	463b      	mov	r3, r7
 8000506:	2200      	movs	r2, #0
 8000508:	4619      	mov	r1, r3
 800050a:	480b      	ldr	r0, [pc, #44]	; (8000538 <MX_DAC_Init+0x60>)
 800050c:	f001 fabf 	bl	8001a8e <HAL_DAC_ConfigChannel>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000516:	f000 fa51 	bl	80009bc <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800051a:	463b      	mov	r3, r7
 800051c:	2210      	movs	r2, #16
 800051e:	4619      	mov	r1, r3
 8000520:	4805      	ldr	r0, [pc, #20]	; (8000538 <MX_DAC_Init+0x60>)
 8000522:	f001 fab4 	bl	8001a8e <HAL_DAC_ConfigChannel>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 800052c:	f000 fa46 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000530:	bf00      	nop
 8000532:	3708      	adds	r7, #8
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	2000013c 	.word	0x2000013c
 800053c:	40007400 	.word	0x40007400

08000540 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b08a      	sub	sp, #40	; 0x28
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000548:	f107 0314 	add.w	r3, r7, #20
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a1b      	ldr	r2, [pc, #108]	; (80005cc <HAL_DAC_MspInit+0x8c>)
 800055e:	4293      	cmp	r3, r2
 8000560:	d12f      	bne.n	80005c2 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000562:	2300      	movs	r3, #0
 8000564:	613b      	str	r3, [r7, #16]
 8000566:	4b1a      	ldr	r3, [pc, #104]	; (80005d0 <HAL_DAC_MspInit+0x90>)
 8000568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056a:	4a19      	ldr	r2, [pc, #100]	; (80005d0 <HAL_DAC_MspInit+0x90>)
 800056c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000570:	6413      	str	r3, [r2, #64]	; 0x40
 8000572:	4b17      	ldr	r3, [pc, #92]	; (80005d0 <HAL_DAC_MspInit+0x90>)
 8000574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000576:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800057a:	613b      	str	r3, [r7, #16]
 800057c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	60fb      	str	r3, [r7, #12]
 8000582:	4b13      	ldr	r3, [pc, #76]	; (80005d0 <HAL_DAC_MspInit+0x90>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	4a12      	ldr	r2, [pc, #72]	; (80005d0 <HAL_DAC_MspInit+0x90>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	6313      	str	r3, [r2, #48]	; 0x30
 800058e:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <HAL_DAC_MspInit+0x90>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800059a:	2330      	movs	r3, #48	; 0x30
 800059c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800059e:	2303      	movs	r3, #3
 80005a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a2:	2300      	movs	r3, #0
 80005a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a6:	f107 0314 	add.w	r3, r7, #20
 80005aa:	4619      	mov	r1, r3
 80005ac:	4809      	ldr	r0, [pc, #36]	; (80005d4 <HAL_DAC_MspInit+0x94>)
 80005ae:	f001 fdb1 	bl	8002114 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2100      	movs	r1, #0
 80005b6:	2036      	movs	r0, #54	; 0x36
 80005b8:	f001 f942 	bl	8001840 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80005bc:	2036      	movs	r0, #54	; 0x36
 80005be:	f001 f95b 	bl	8001878 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80005c2:	bf00      	nop
 80005c4:	3728      	adds	r7, #40	; 0x28
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40007400 	.word	0x40007400
 80005d0:	40023800 	.word	0x40023800
 80005d4:	40020000 	.word	0x40020000

080005d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <MX_DMA_Init+0x3c>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a0b      	ldr	r2, [pc, #44]	; (8000614 <MX_DMA_Init+0x3c>)
 80005e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <MX_DMA_Init+0x3c>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2100      	movs	r1, #0
 80005fe:	2011      	movs	r0, #17
 8000600:	f001 f91e 	bl	8001840 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000604:	2011      	movs	r0, #17
 8000606:	f001 f937 	bl	8001878 <HAL_NVIC_EnableIRQ>

}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40023800 	.word	0x40023800

08000618 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b08c      	sub	sp, #48	; 0x30
 800061c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061e:	f107 031c 	add.w	r3, r7, #28
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	61bb      	str	r3, [r7, #24]
 8000632:	4b88      	ldr	r3, [pc, #544]	; (8000854 <MX_GPIO_Init+0x23c>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a87      	ldr	r2, [pc, #540]	; (8000854 <MX_GPIO_Init+0x23c>)
 8000638:	f043 0310 	orr.w	r3, r3, #16
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b85      	ldr	r3, [pc, #532]	; (8000854 <MX_GPIO_Init+0x23c>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0310 	and.w	r3, r3, #16
 8000646:	61bb      	str	r3, [r7, #24]
 8000648:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]
 800064e:	4b81      	ldr	r3, [pc, #516]	; (8000854 <MX_GPIO_Init+0x23c>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a80      	ldr	r2, [pc, #512]	; (8000854 <MX_GPIO_Init+0x23c>)
 8000654:	f043 0304 	orr.w	r3, r3, #4
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b7e      	ldr	r3, [pc, #504]	; (8000854 <MX_GPIO_Init+0x23c>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0304 	and.w	r3, r3, #4
 8000662:	617b      	str	r3, [r7, #20]
 8000664:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
 800066a:	4b7a      	ldr	r3, [pc, #488]	; (8000854 <MX_GPIO_Init+0x23c>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a79      	ldr	r2, [pc, #484]	; (8000854 <MX_GPIO_Init+0x23c>)
 8000670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b77      	ldr	r3, [pc, #476]	; (8000854 <MX_GPIO_Init+0x23c>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800067e:	613b      	str	r3, [r7, #16]
 8000680:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	4b73      	ldr	r3, [pc, #460]	; (8000854 <MX_GPIO_Init+0x23c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a72      	ldr	r2, [pc, #456]	; (8000854 <MX_GPIO_Init+0x23c>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b70      	ldr	r3, [pc, #448]	; (8000854 <MX_GPIO_Init+0x23c>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	4b6c      	ldr	r3, [pc, #432]	; (8000854 <MX_GPIO_Init+0x23c>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a6b      	ldr	r2, [pc, #428]	; (8000854 <MX_GPIO_Init+0x23c>)
 80006a8:	f043 0302 	orr.w	r3, r3, #2
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b69      	ldr	r3, [pc, #420]	; (8000854 <MX_GPIO_Init+0x23c>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0302 	and.w	r3, r3, #2
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	4b65      	ldr	r3, [pc, #404]	; (8000854 <MX_GPIO_Init+0x23c>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a64      	ldr	r2, [pc, #400]	; (8000854 <MX_GPIO_Init+0x23c>)
 80006c4:	f043 0308 	orr.w	r3, r3, #8
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b62      	ldr	r3, [pc, #392]	; (8000854 <MX_GPIO_Init+0x23c>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0308 	and.w	r3, r3, #8
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2108      	movs	r1, #8
 80006da:	485f      	ldr	r0, [pc, #380]	; (8000858 <MX_GPIO_Init+0x240>)
 80006dc:	f001 feb6 	bl	800244c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80006e0:	2201      	movs	r2, #1
 80006e2:	2101      	movs	r1, #1
 80006e4:	485d      	ldr	r0, [pc, #372]	; (800085c <MX_GPIO_Init+0x244>)
 80006e6:	f001 feb1 	bl	800244c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Yen_Pin|Xen_Pin|Xdir_Pin, GPIO_PIN_SET);
 80006ea:	2201      	movs	r2, #1
 80006ec:	21c8      	movs	r1, #200	; 0xc8
 80006ee:	485c      	ldr	r0, [pc, #368]	; (8000860 <MX_GPIO_Init+0x248>)
 80006f0:	f001 feac 	bl	800244c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD5_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 80006f4:	2200      	movs	r2, #0
 80006f6:	f24c 0110 	movw	r1, #49168	; 0xc010
 80006fa:	485a      	ldr	r0, [pc, #360]	; (8000864 <MX_GPIO_Init+0x24c>)
 80006fc:	f001 fea6 	bl	800244c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000700:	2308      	movs	r3, #8
 8000702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000704:	2301      	movs	r3, #1
 8000706:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070c:	2300      	movs	r3, #0
 800070e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000710:	f107 031c 	add.w	r3, r7, #28
 8000714:	4619      	mov	r1, r3
 8000716:	4850      	ldr	r0, [pc, #320]	; (8000858 <MX_GPIO_Init+0x240>)
 8000718:	f001 fcfc 	bl	8002114 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800071c:	2301      	movs	r3, #1
 800071e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000720:	2301      	movs	r3, #1
 8000722:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000728:	2300      	movs	r3, #0
 800072a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	4619      	mov	r1, r3
 8000732:	484a      	ldr	r0, [pc, #296]	; (800085c <MX_GPIO_Init+0x244>)
 8000734:	f001 fcee 	bl	8002114 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000738:	2301      	movs	r3, #1
 800073a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800073c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000740:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	4619      	mov	r1, r3
 800074c:	4844      	ldr	r0, [pc, #272]	; (8000860 <MX_GPIO_Init+0x248>)
 800074e:	f001 fce1 	bl	8002114 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Yen_Pin|Xen_Pin|Xdir_Pin;
 8000752:	23c8      	movs	r3, #200	; 0xc8
 8000754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000756:	2301      	movs	r3, #1
 8000758:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800075e:	2302      	movs	r3, #2
 8000760:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	4619      	mov	r1, r3
 8000768:	483d      	ldr	r0, [pc, #244]	; (8000860 <MX_GPIO_Init+0x248>)
 800076a:	f001 fcd3 	bl	8002114 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800076e:	2304      	movs	r3, #4
 8000770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000772:	2300      	movs	r3, #0
 8000774:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800077a:	f107 031c 	add.w	r3, r7, #28
 800077e:	4619      	mov	r1, r3
 8000780:	4839      	ldr	r0, [pc, #228]	; (8000868 <MX_GPIO_Init+0x250>)
 8000782:	f001 fcc7 	bl	8002114 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Yz_Pin;
 8000786:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800078a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800078c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000790:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Yz_GPIO_Port, &GPIO_InitStruct);
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	4619      	mov	r1, r3
 800079c:	4831      	ldr	r0, [pc, #196]	; (8000864 <MX_GPIO_Init+0x24c>)
 800079e:	f001 fcb9 	bl	8002114 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LD5_Pin|LD6_Pin|Audio_RST_Pin;
 80007a2:	f24c 0310 	movw	r3, #49168	; 0xc010
 80007a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a8:	2301      	movs	r3, #1
 80007aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	2300      	movs	r3, #0
 80007b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007b4:	f107 031c 	add.w	r3, r7, #28
 80007b8:	4619      	mov	r1, r3
 80007ba:	482a      	ldr	r0, [pc, #168]	; (8000864 <MX_GPIO_Init+0x24c>)
 80007bc:	f001 fcaa 	bl	8002114 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Xz_Pin;
 80007c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Xz_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 031c 	add.w	r3, r7, #28
 80007d4:	4619      	mov	r1, r3
 80007d6:	4821      	ldr	r0, [pc, #132]	; (800085c <MX_GPIO_Init+0x244>)
 80007d8:	f001 fc9c 	bl	8002114 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESTOP_Pin;
 80007dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007e2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ESTOP_GPIO_Port, &GPIO_InitStruct);
 80007ec:	f107 031c 	add.w	r3, r7, #28
 80007f0:	4619      	mov	r1, r3
 80007f2:	481a      	ldr	r0, [pc, #104]	; (800085c <MX_GPIO_Init+0x244>)
 80007f4:	f001 fc8e 	bl	8002114 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80007f8:	2320      	movs	r3, #32
 80007fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fc:	2300      	movs	r3, #0
 80007fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000804:	f107 031c 	add.w	r3, r7, #28
 8000808:	4619      	mov	r1, r3
 800080a:	4816      	ldr	r0, [pc, #88]	; (8000864 <MX_GPIO_Init+0x24c>)
 800080c:	f001 fc82 	bl	8002114 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000810:	2302      	movs	r3, #2
 8000812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000814:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	4619      	mov	r1, r3
 8000824:	480c      	ldr	r0, [pc, #48]	; (8000858 <MX_GPIO_Init+0x240>)
 8000826:	f001 fc75 	bl	8002114 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	2100      	movs	r1, #0
 800082e:	2017      	movs	r0, #23
 8000830:	f001 f806 	bl	8001840 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000834:	2017      	movs	r0, #23
 8000836:	f001 f81f 	bl	8001878 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800083a:	2200      	movs	r2, #0
 800083c:	2100      	movs	r1, #0
 800083e:	2028      	movs	r0, #40	; 0x28
 8000840:	f000 fffe 	bl	8001840 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000844:	2028      	movs	r0, #40	; 0x28
 8000846:	f001 f817 	bl	8001878 <HAL_NVIC_EnableIRQ>

}
 800084a:	bf00      	nop
 800084c:	3730      	adds	r7, #48	; 0x30
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40023800 	.word	0x40023800
 8000858:	40021000 	.word	0x40021000
 800085c:	40020800 	.word	0x40020800
 8000860:	40020000 	.word	0x40020000
 8000864:	40020c00 	.word	0x40020c00
 8000868:	40020400 	.word	0x40020400

0800086c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000870:	f000 fec8 	bl	8001604 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000874:	f000 f822 	bl	80008bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000878:	f7ff fece 	bl	8000618 <MX_GPIO_Init>
  MX_DMA_Init();
 800087c:	f7ff feac 	bl	80005d8 <MX_DMA_Init>
  MX_SPI2_Init();
 8000880:	f000 faf0 	bl	8000e64 <MX_SPI2_Init>
  MX_DAC_Init();
 8000884:	f7ff fe28 	bl	80004d8 <MX_DAC_Init>
  MX_TIM3_Init();
 8000888:	f000 fcc6 	bl	8001218 <MX_TIM3_Init>
  MX_TIM4_Init();
 800088c:	f000 fd18 	bl	80012c0 <MX_TIM4_Init>
  MX_TIM9_Init();
 8000890:	f000 fd6a 	bl	8001368 <MX_TIM9_Init>
  MX_USB_DEVICE_Init();
 8000894:	f007 ff74 	bl	8008780 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  myInit(&hdac, &htim3, &htim4, &htim9);
 8000898:	4b04      	ldr	r3, [pc, #16]	; (80008ac <main+0x40>)
 800089a:	4a05      	ldr	r2, [pc, #20]	; (80008b0 <main+0x44>)
 800089c:	4905      	ldr	r1, [pc, #20]	; (80008b4 <main+0x48>)
 800089e:	4806      	ldr	r0, [pc, #24]	; (80008b8 <main+0x4c>)
 80008a0:	f000 f982 	bl	8000ba8 <myInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  myLoopInternals();
 80008a4:	f000 f9c4 	bl	8000c30 <myLoopInternals>
 80008a8:	e7fc      	b.n	80008a4 <main+0x38>
 80008aa:	bf00      	nop
 80008ac:	200002b4 	.word	0x200002b4
 80008b0:	2000026c 	.word	0x2000026c
 80008b4:	20000224 	.word	0x20000224
 80008b8:	2000013c 	.word	0x2000013c

080008bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b094      	sub	sp, #80	; 0x50
 80008c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c2:	f107 0320 	add.w	r3, r7, #32
 80008c6:	2230      	movs	r2, #48	; 0x30
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f008 fc8e 	bl	80091ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d0:	f107 030c 	add.w	r3, r7, #12
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e0:	2300      	movs	r3, #0
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	4b28      	ldr	r3, [pc, #160]	; (8000988 <SystemClock_Config+0xcc>)
 80008e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e8:	4a27      	ldr	r2, [pc, #156]	; (8000988 <SystemClock_Config+0xcc>)
 80008ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ee:	6413      	str	r3, [r2, #64]	; 0x40
 80008f0:	4b25      	ldr	r3, [pc, #148]	; (8000988 <SystemClock_Config+0xcc>)
 80008f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008fc:	2300      	movs	r3, #0
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	4b22      	ldr	r3, [pc, #136]	; (800098c <SystemClock_Config+0xd0>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a21      	ldr	r2, [pc, #132]	; (800098c <SystemClock_Config+0xd0>)
 8000906:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800090a:	6013      	str	r3, [r2, #0]
 800090c:	4b1f      	ldr	r3, [pc, #124]	; (800098c <SystemClock_Config+0xd0>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000918:	2301      	movs	r3, #1
 800091a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800091c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000922:	2302      	movs	r3, #2
 8000924:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000926:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800092a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800092c:	2308      	movs	r3, #8
 800092e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000930:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000934:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000936:	2302      	movs	r3, #2
 8000938:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800093a:	2307      	movs	r3, #7
 800093c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093e:	f107 0320 	add.w	r3, r7, #32
 8000942:	4618      	mov	r0, r3
 8000944:	f003 f832 	bl	80039ac <HAL_RCC_OscConfig>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800094e:	f000 f835 	bl	80009bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000952:	230f      	movs	r3, #15
 8000954:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000956:	2302      	movs	r3, #2
 8000958:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095a:	2300      	movs	r3, #0
 800095c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800095e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000962:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000964:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000968:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800096a:	f107 030c 	add.w	r3, r7, #12
 800096e:	2105      	movs	r1, #5
 8000970:	4618      	mov	r0, r3
 8000972:	f003 fa93 	bl	8003e9c <HAL_RCC_ClockConfig>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800097c:	f000 f81e 	bl	80009bc <Error_Handler>
  }
}
 8000980:	bf00      	nop
 8000982:	3750      	adds	r7, #80	; 0x50
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40023800 	.word	0x40023800
 800098c:	40007000 	.word	0x40007000

08000990 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a06      	ldr	r2, [pc, #24]	; (80009b8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d102      	bne.n	80009a8 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 80009a2:	f000 fe51 	bl	8001648 <HAL_IncTick>
  else
  {
	  my_HAL_TIM_PeriodElapsedCallback(htim);
  }
  /* USER CODE END Callback 1 */
}
 80009a6:	e002      	b.n	80009ae <HAL_TIM_PeriodElapsedCallback+0x1e>
	  my_HAL_TIM_PeriodElapsedCallback(htim);
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f000 f8ab 	bl	8000b04 <my_HAL_TIM_PeriodElapsedCallback>
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40001000 	.word	0x40001000

080009bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c0:	b672      	cpsid	i
}
 80009c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <Error_Handler+0x8>
	...

080009c8 <HAL_GPIO_EXTI_Callback>:
#include "myMain.h"

uint32_t xRotCount = 0;
uint32_t yRotCount = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == Xz_Pin)
 80009d2:	88fb      	ldrh	r3, [r7, #6]
 80009d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009d8:	d105      	bne.n	80009e6 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		xRotCount++;
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <HAL_GPIO_EXTI_Callback+0x58>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	3301      	adds	r3, #1
 80009e0:	4a0f      	ldr	r2, [pc, #60]	; (8000a20 <HAL_GPIO_EXTI_Callback+0x58>)
 80009e2:	6013      	str	r3, [r2, #0]
		x_stop();
		y_stop();
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);

	}
}
 80009e4:	e017      	b.n	8000a16 <HAL_GPIO_EXTI_Callback+0x4e>
	else if (GPIO_Pin == Yz_Pin)
 80009e6:	88fb      	ldrh	r3, [r7, #6]
 80009e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80009ec:	d105      	bne.n	80009fa <HAL_GPIO_EXTI_Callback+0x32>
		yRotCount++;
 80009ee:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <HAL_GPIO_EXTI_Callback+0x5c>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	3301      	adds	r3, #1
 80009f4:	4a0b      	ldr	r2, [pc, #44]	; (8000a24 <HAL_GPIO_EXTI_Callback+0x5c>)
 80009f6:	6013      	str	r3, [r2, #0]
}
 80009f8:	e00d      	b.n	8000a16 <HAL_GPIO_EXTI_Callback+0x4e>
	else if (GPIO_Pin == ESTOP_Pin)
 80009fa:	88fb      	ldrh	r3, [r7, #6]
 80009fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a00:	d109      	bne.n	8000a16 <HAL_GPIO_EXTI_Callback+0x4e>
		x_stop();
 8000a02:	f000 f967 	bl	8000cd4 <x_stop>
		y_stop();
 8000a06:	f000 f97f 	bl	8000d08 <y_stop>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a10:	4805      	ldr	r0, [pc, #20]	; (8000a28 <HAL_GPIO_EXTI_Callback+0x60>)
 8000a12:	f001 fd1b 	bl	800244c <HAL_GPIO_WritePin>
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000150 	.word	0x20000150
 8000a24:	20000154 	.word	0x20000154
 8000a28:	40020c00 	.word	0x40020c00

08000a2c <updateEncoderData>:



// https://www.youtube.com/watch?v=yeVCuAdRnZU
void updateEncoderData(encoder_packet *out_packet, TIM_HandleTypeDef *htim)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
	static uint8_t firstUpdate;
	uint32_t currentCounterValue = __HAL_TIM_GET_COUNTER(htim);
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a3c:	60fb      	str	r3, [r7, #12]

	if (!firstUpdate)
 8000a3e:	4b30      	ldr	r3, [pc, #192]	; (8000b00 <updateEncoderData+0xd4>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d109      	bne.n	8000a5a <updateEncoderData+0x2e>
	{
		out_packet -> velocity = 0;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
		out_packet->lastEncoderValue = 0;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
		firstUpdate = 1;
 8000a52:	4b2b      	ldr	r3, [pc, #172]	; (8000b00 <updateEncoderData+0xd4>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	701a      	strb	r2, [r3, #0]
 8000a58:	e042      	b.n	8000ae0 <updateEncoderData+0xb4>
	}
	else
	{
		// no movement
		if (currentCounterValue == out_packet->lastEncoderValue)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	689b      	ldr	r3, [r3, #8]
 8000a5e:	68fa      	ldr	r2, [r7, #12]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d103      	bne.n	8000a6c <updateEncoderData+0x40>
		{
			out_packet -> velocity = 0;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	e039      	b.n	8000ae0 <updateEncoderData+0xb4>
		}
		// up movement
		else if (currentCounterValue > out_packet->lastEncoderValue)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	689b      	ldr	r3, [r3, #8]
 8000a70:	68fa      	ldr	r2, [r7, #12]
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d91a      	bls.n	8000aac <updateEncoderData+0x80>
		{
			// up movement but overflown
			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f003 0310 	and.w	r3, r3, #16
 8000a80:	2b10      	cmp	r3, #16
 8000a82:	d10b      	bne.n	8000a9c <updateEncoderData+0x70>
			{
				out_packet -> velocity = -(out_packet->lastEncoderValue) - (__HAL_TIM_GET_AUTORELOAD(htim) - currentCounterValue);
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a8a:	68fa      	ldr	r2, [r7, #12]
 8000a8c:	1ad2      	subs	r2, r2, r3
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	689b      	ldr	r3, [r3, #8]
 8000a92:	1ad3      	subs	r3, r2, r3
 8000a94:	461a      	mov	r2, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	e021      	b.n	8000ae0 <updateEncoderData+0xb4>
			}
			// up movement, no overflow
			else
			{
				out_packet -> velocity = currentCounterValue - out_packet->lastEncoderValue;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	689b      	ldr	r3, [r3, #8]
 8000aa0:	68fa      	ldr	r2, [r7, #12]
 8000aa2:	1ad3      	subs	r3, r2, r3
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	e019      	b.n	8000ae0 <updateEncoderData+0xb4>
		}
		// down movement
		else
		{
			// down movement but overflown
			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f003 0310 	and.w	r3, r3, #16
 8000ab6:	2b10      	cmp	r3, #16
 8000ab8:	d107      	bne.n	8000aca <updateEncoderData+0x9e>
			{
				out_packet -> velocity = currentCounterValue - out_packet->lastEncoderValue;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	68fa      	ldr	r2, [r7, #12]
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	e00a      	b.n	8000ae0 <updateEncoderData+0xb4>
			}
			// up movement, no overflow
			else
			{
				out_packet -> velocity = currentCounterValue + (__HAL_TIM_GET_AUTORELOAD(htim) - out_packet->lastEncoderValue);
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	1ad2      	subs	r2, r2, r3
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	4413      	add	r3, r2
 8000ada:	461a      	mov	r2, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	601a      	str	r2, [r3, #0]
			}
		}
	}
	out_packet -> position += out_packet -> velocity;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	685a      	ldr	r2, [r3, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	441a      	add	r2, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	605a      	str	r2, [r3, #4]
	out_packet->lastEncoderValue = currentCounterValue;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	68fa      	ldr	r2, [r7, #12]
 8000af2:	609a      	str	r2, [r3, #8]
}
 8000af4:	bf00      	nop
 8000af6:	3714      	adds	r7, #20
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	20000180 	.word	0x20000180

08000b04 <my_HAL_TIM_PeriodElapsedCallback>:
TIM_HandleTypeDef* p_htim9;
DAC_HandleTypeDef* p_hdac;
encoder_packet xEncoderData;
encoder_packet yEncoderData;
void my_HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM9)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a0a      	ldr	r2, [pc, #40]	; (8000b3c <my_HAL_TIM_PeriodElapsedCallback+0x38>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d10d      	bne.n	8000b32 <my_HAL_TIM_PeriodElapsedCallback+0x2e>
	{
	    updateEncoderData(&xEncoderData, p_htim3);
 8000b16:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <my_HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4809      	ldr	r0, [pc, #36]	; (8000b44 <my_HAL_TIM_PeriodElapsedCallback+0x40>)
 8000b1e:	f7ff ff85 	bl	8000a2c <updateEncoderData>
	    updateEncoderData(&yEncoderData, p_htim4);
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <my_HAL_TIM_PeriodElapsedCallback+0x44>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4619      	mov	r1, r3
 8000b28:	4808      	ldr	r0, [pc, #32]	; (8000b4c <my_HAL_TIM_PeriodElapsedCallback+0x48>)
 8000b2a:	f7ff ff7f 	bl	8000a2c <updateEncoderData>
	    detectXLimits();
 8000b2e:	f000 f80f 	bl	8000b50 <detectXLimits>
	}
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40014000 	.word	0x40014000
 8000b40:	20000158 	.word	0x20000158
 8000b44:	20000168 	.word	0x20000168
 8000b48:	2000015c 	.word	0x2000015c
 8000b4c:	20000174 	.word	0x20000174

08000b50 <detectXLimits>:

void detectXLimits(){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
	static uint8_t limitStopped = 1;
	uint8_t insideXLimits = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	71fb      	strb	r3, [r7, #7]
	if ((xEncoderData.position < 500) || (xEncoderData.position > 12000)) {
 8000b5a:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <detectXLimits+0x50>)
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000b62:	db05      	blt.n	8000b70 <detectXLimits+0x20>
 8000b64:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <detectXLimits+0x50>)
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	dd02      	ble.n	8000b76 <detectXLimits+0x26>
		insideXLimits = 1;
 8000b70:	2301      	movs	r3, #1
 8000b72:	71fb      	strb	r3, [r7, #7]
 8000b74:	e004      	b.n	8000b80 <detectXLimits+0x30>
	}
	else {
		insideXLimits = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	71fb      	strb	r3, [r7, #7]
		limitStopped = 0;
 8000b7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <detectXLimits+0x54>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	701a      	strb	r2, [r3, #0]
	}
	if ((!limitStopped) && (insideXLimits)){
 8000b80:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <detectXLimits+0x54>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d107      	bne.n	8000b98 <detectXLimits+0x48>
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d004      	beq.n	8000b98 <detectXLimits+0x48>
		x_stop();
 8000b8e:	f000 f8a1 	bl	8000cd4 <x_stop>
		limitStopped = 1;
 8000b92:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <detectXLimits+0x54>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	701a      	strb	r2, [r3, #0]
	}
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000168 	.word	0x20000168
 8000ba4:	2000001c 	.word	0x2000001c

08000ba8 <myInit>:
void myInit(
		DAC_HandleTypeDef* p_hdac_arg,
		TIM_HandleTypeDef* p_htim3_arg,
		TIM_HandleTypeDef* p_htim4_arg,
		TIM_HandleTypeDef* p_htim9_arg)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
 8000bb4:	603b      	str	r3, [r7, #0]
	p_hdac = p_hdac_arg;
 8000bb6:	4a1a      	ldr	r2, [pc, #104]	; (8000c20 <myInit+0x78>)
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	6013      	str	r3, [r2, #0]
	p_htim3 = p_htim3_arg;
 8000bbc:	4a19      	ldr	r2, [pc, #100]	; (8000c24 <myInit+0x7c>)
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	6013      	str	r3, [r2, #0]
	p_htim4 = p_htim4_arg;
 8000bc2:	4a19      	ldr	r2, [pc, #100]	; (8000c28 <myInit+0x80>)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6013      	str	r3, [r2, #0]
	p_htim9 = p_htim9_arg;
 8000bc8:	4a18      	ldr	r2, [pc, #96]	; (8000c2c <myInit+0x84>)
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	6013      	str	r3, [r2, #0]
	HAL_TIM_Encoder_Start(p_htim3, TIM_CHANNEL_ALL);
 8000bce:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <myInit+0x7c>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	213c      	movs	r1, #60	; 0x3c
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f003 fd8d 	bl	80046f4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(p_htim4, TIM_CHANNEL_ALL);
 8000bda:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <myInit+0x80>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	213c      	movs	r1, #60	; 0x3c
 8000be0:	4618      	mov	r0, r3
 8000be2:	f003 fd87 	bl	80046f4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(p_htim9);
 8000be6:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <myInit+0x84>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f003 fc6c 	bl	80044c8 <HAL_TIM_Base_Start_IT>
	HAL_DAC_Start(p_hdac, DAC_CHANNEL_1);
 8000bf0:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <myInit+0x78>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f000 fe6e 	bl	80018d8 <HAL_DAC_Start>
	// HAL_DAC_Start(p_hdac, DAC_CHANNEL_2);
	HAL_DAC_SetValue(p_hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0x00000000); // set off speeds
 8000bfc:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <myInit+0x78>)
 8000bfe:	6818      	ldr	r0, [r3, #0]
 8000c00:	2300      	movs	r3, #0
 8000c02:	2200      	movs	r2, #0
 8000c04:	2100      	movs	r1, #0
 8000c06:	f000 ff13 	bl	8001a30 <HAL_DAC_SetValue>
	// HAL_DAC_SetValue(p_hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0x000007FF);
	y_stop();
 8000c0a:	f000 f87d 	bl	8000d08 <y_stop>
	x_stop();
 8000c0e:	f000 f861 	bl	8000cd4 <x_stop>
	HAL_Delay(100);
 8000c12:	2064      	movs	r0, #100	; 0x64
 8000c14:	f000 fd38 	bl	8001688 <HAL_Delay>
}
 8000c18:	bf00      	nop
 8000c1a:	3710      	adds	r7, #16
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000164 	.word	0x20000164
 8000c24:	20000158 	.word	0x20000158
 8000c28:	2000015c 	.word	0x2000015c
 8000c2c:	20000160 	.word	0x20000160

08000c30 <myLoopInternals>:

void myLoopInternals()
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
	//x_stop();
	//HAL_Delay(2000);
	//x_goLeft();
	//HAL_Delay(2000);
	HAL_Delay(1);
 8000c34:	2001      	movs	r0, #1
 8000c36:	f000 fd27 	bl	8001688 <HAL_Delay>
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <x_goLeft>:



void x_goLeft(){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
	if (xEncoderData.position < 500) {return;}
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <x_goLeft+0x38>)
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c4c:	db12      	blt.n	8000c74 <x_goLeft+0x34>
	HAL_DAC_SetValue(p_hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, onSpeed);
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <x_goLeft+0x3c>)
 8000c50:	6818      	ldr	r0, [r3, #0]
 8000c52:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <x_goLeft+0x40>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2200      	movs	r2, #0
 8000c58:	2100      	movs	r1, #0
 8000c5a:	f000 fee9 	bl	8001a30 <HAL_DAC_SetValue>
	HAL_GPIO_WritePin(GPIOA, Xdir_Pin, GPIO_PIN_RESET); // x direction
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2180      	movs	r1, #128	; 0x80
 8000c62:	4808      	ldr	r0, [pc, #32]	; (8000c84 <x_goLeft+0x44>)
 8000c64:	f001 fbf2 	bl	800244c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Xen_Pin, GPIO_PIN_RESET); // x enable
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2140      	movs	r1, #64	; 0x40
 8000c6c:	4805      	ldr	r0, [pc, #20]	; (8000c84 <x_goLeft+0x44>)
 8000c6e:	f001 fbed 	bl	800244c <HAL_GPIO_WritePin>
	return;
 8000c72:	e000      	b.n	8000c76 <x_goLeft+0x36>
	if (xEncoderData.position < 500) {return;}
 8000c74:	bf00      	nop
}
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000168 	.word	0x20000168
 8000c7c:	20000164 	.word	0x20000164
 8000c80:	20000000 	.word	0x20000000
 8000c84:	40020000 	.word	0x40020000

08000c88 <x_goRight>:
void x_goRight(){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
	if (xEncoderData.position > 12000) {return;}
 8000c8c:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <x_goRight+0x3c>)
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8000c94:	4293      	cmp	r3, r2
 8000c96:	dc12      	bgt.n	8000cbe <x_goRight+0x36>
	HAL_DAC_SetValue(p_hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, onSpeed);
 8000c98:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <x_goRight+0x40>)
 8000c9a:	6818      	ldr	r0, [r3, #0]
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <x_goRight+0x44>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	f000 fec4 	bl	8001a30 <HAL_DAC_SetValue>
	HAL_GPIO_WritePin(GPIOA, Xdir_Pin, GPIO_PIN_SET); // x direction
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2180      	movs	r1, #128	; 0x80
 8000cac:	4808      	ldr	r0, [pc, #32]	; (8000cd0 <x_goRight+0x48>)
 8000cae:	f001 fbcd 	bl	800244c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Xen_Pin, GPIO_PIN_RESET); // x enable
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2140      	movs	r1, #64	; 0x40
 8000cb6:	4806      	ldr	r0, [pc, #24]	; (8000cd0 <x_goRight+0x48>)
 8000cb8:	f001 fbc8 	bl	800244c <HAL_GPIO_WritePin>
	return;
 8000cbc:	e000      	b.n	8000cc0 <x_goRight+0x38>
	if (xEncoderData.position > 12000) {return;}
 8000cbe:	bf00      	nop
}
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000168 	.word	0x20000168
 8000cc8:	20000164 	.word	0x20000164
 8000ccc:	20000000 	.word	0x20000000
 8000cd0:	40020000 	.word	0x40020000

08000cd4 <x_stop>:
void x_stop(){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, Xen_Pin, GPIO_PIN_SET);
 8000cd8:	2201      	movs	r2, #1
 8000cda:	2140      	movs	r1, #64	; 0x40
 8000cdc:	4802      	ldr	r0, [pc, #8]	; (8000ce8 <x_stop+0x14>)
 8000cde:	f001 fbb5 	bl	800244c <HAL_GPIO_WritePin>
	return;
 8000ce2:	bf00      	nop
}
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40020000 	.word	0x40020000

08000cec <y_goUp>:
void y_goUp(){return;}
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <y_goDown>:
void y_goDown(){return;}
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <y_stop>:
void y_stop(){
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, Yen_Pin, GPIO_PIN_RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2108      	movs	r1, #8
 8000d10:	4802      	ldr	r0, [pc, #8]	; (8000d1c <y_stop+0x14>)
 8000d12:	f001 fb9b 	bl	800244c <HAL_GPIO_WritePin>
	return;
 8000d16:	bf00      	nop
}
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40020000 	.word	0x40020000

08000d20 <commandReceived>:
const char* xStopCommand = "x.s";
const char* yUpCommand = "y.u";
const char* yDownCommand = "y.d";
const char* yStopCommand = "y.s";

void commandReceived(char* charAccumulator, uint8_t commandSize){
 8000d20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d24:	b087      	sub	sp, #28
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	70fb      	strb	r3, [r7, #3]
 8000d2e:	466b      	mov	r3, sp
 8000d30:	461e      	mov	r6, r3
	char commandInput[commandSize+1];
 8000d32:	78fb      	ldrb	r3, [r7, #3]
 8000d34:	1c59      	adds	r1, r3, #1
 8000d36:	1e4b      	subs	r3, r1, #1
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	460a      	mov	r2, r1
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	4690      	mov	r8, r2
 8000d40:	4699      	mov	r9, r3
 8000d42:	f04f 0200 	mov.w	r2, #0
 8000d46:	f04f 0300 	mov.w	r3, #0
 8000d4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000d4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000d52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000d56:	460a      	mov	r2, r1
 8000d58:	2300      	movs	r3, #0
 8000d5a:	4614      	mov	r4, r2
 8000d5c:	461d      	mov	r5, r3
 8000d5e:	f04f 0200 	mov.w	r2, #0
 8000d62:	f04f 0300 	mov.w	r3, #0
 8000d66:	00eb      	lsls	r3, r5, #3
 8000d68:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000d6c:	00e2      	lsls	r2, r4, #3
 8000d6e:	460b      	mov	r3, r1
 8000d70:	3307      	adds	r3, #7
 8000d72:	08db      	lsrs	r3, r3, #3
 8000d74:	00db      	lsls	r3, r3, #3
 8000d76:	ebad 0d03 	sub.w	sp, sp, r3
 8000d7a:	466b      	mov	r3, sp
 8000d7c:	3300      	adds	r3, #0
 8000d7e:	60fb      	str	r3, [r7, #12]
	int c;
	for (c = 0; c < commandSize; c++)
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	e00b      	b.n	8000d9e <commandReceived+0x7e>
		commandInput[c] = charAccumulator[c];
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	7819      	ldrb	r1, [r3, #0]
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	4413      	add	r3, r2
 8000d94:	460a      	mov	r2, r1
 8000d96:	701a      	strb	r2, [r3, #0]
	for (c = 0; c < commandSize; c++)
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	617b      	str	r3, [r7, #20]
 8000d9e:	78fb      	ldrb	r3, [r7, #3]
 8000da0:	697a      	ldr	r2, [r7, #20]
 8000da2:	429a      	cmp	r2, r3
 8000da4:	dbef      	blt.n	8000d86 <commandReceived+0x66>
	commandInput[c] = '\0';
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	4413      	add	r3, r2
 8000dac:	2200      	movs	r2, #0
 8000dae:	701a      	strb	r2, [r3, #0]

	if (!strcmp(xLeftCommand, commandInput)){
 8000db0:	4b26      	ldr	r3, [pc, #152]	; (8000e4c <commandReceived+0x12c>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	68f9      	ldr	r1, [r7, #12]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fa06 	bl	80001c8 <strcmp>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d102      	bne.n	8000dc8 <commandReceived+0xa8>
		x_goLeft();
 8000dc2:	f7ff ff3d 	bl	8000c40 <x_goLeft>
 8000dc6:	e03a      	b.n	8000e3e <commandReceived+0x11e>
	}
	else if (!strcmp(xRightCommand, commandInput)){
 8000dc8:	4b21      	ldr	r3, [pc, #132]	; (8000e50 <commandReceived+0x130>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	68f9      	ldr	r1, [r7, #12]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff f9fa 	bl	80001c8 <strcmp>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d102      	bne.n	8000de0 <commandReceived+0xc0>
		x_goRight();
 8000dda:	f7ff ff55 	bl	8000c88 <x_goRight>
 8000dde:	e02e      	b.n	8000e3e <commandReceived+0x11e>
	}
	else if (!strcmp(xStopCommand, commandInput)){
 8000de0:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <commandReceived+0x134>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	68f9      	ldr	r1, [r7, #12]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff f9ee 	bl	80001c8 <strcmp>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d102      	bne.n	8000df8 <commandReceived+0xd8>
		x_stop();
 8000df2:	f7ff ff6f 	bl	8000cd4 <x_stop>
 8000df6:	e022      	b.n	8000e3e <commandReceived+0x11e>
	}
	else if (!strcmp(yUpCommand, commandInput)){
 8000df8:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <commandReceived+0x138>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	68f9      	ldr	r1, [r7, #12]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff f9e2 	bl	80001c8 <strcmp>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d102      	bne.n	8000e10 <commandReceived+0xf0>
		y_goUp();
 8000e0a:	f7ff ff6f 	bl	8000cec <y_goUp>
 8000e0e:	e016      	b.n	8000e3e <commandReceived+0x11e>
	}
	else if (!strcmp(yDownCommand, commandInput)){
 8000e10:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <commandReceived+0x13c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	68f9      	ldr	r1, [r7, #12]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff f9d6 	bl	80001c8 <strcmp>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d102      	bne.n	8000e28 <commandReceived+0x108>
		y_goDown();
 8000e22:	f7ff ff6a 	bl	8000cfa <y_goDown>
 8000e26:	e00a      	b.n	8000e3e <commandReceived+0x11e>
	}
	else if (!strcmp(yStopCommand, commandInput)){
 8000e28:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <commandReceived+0x140>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	68f9      	ldr	r1, [r7, #12]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff f9ca 	bl	80001c8 <strcmp>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d101      	bne.n	8000e3e <commandReceived+0x11e>
		y_stop();
 8000e3a:	f7ff ff65 	bl	8000d08 <y_stop>
 8000e3e:	46b5      	mov	sp, r6
	}
}
 8000e40:	bf00      	nop
 8000e42:	371c      	adds	r7, #28
 8000e44:	46bd      	mov	sp, r7
 8000e46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000004 	.word	0x20000004
 8000e50:	20000008 	.word	0x20000008
 8000e54:	2000000c 	.word	0x2000000c
 8000e58:	20000010 	.word	0x20000010
 8000e5c:	20000014 	.word	0x20000014
 8000e60:	20000018 	.word	0x20000018

08000e64 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000e68:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <MX_SPI2_Init+0x64>)
 8000e6a:	4a18      	ldr	r2, [pc, #96]	; (8000ecc <MX_SPI2_Init+0x68>)
 8000e6c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e6e:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <MX_SPI2_Init+0x64>)
 8000e70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e74:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e76:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <MX_SPI2_Init+0x64>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <MX_SPI2_Init+0x64>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e82:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <MX_SPI2_Init+0x64>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e88:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <MX_SPI2_Init+0x64>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <MX_SPI2_Init+0x64>)
 8000e90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e94:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <MX_SPI2_Init+0x64>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <MX_SPI2_Init+0x64>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <MX_SPI2_Init+0x64>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ea8:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <MX_SPI2_Init+0x64>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <MX_SPI2_Init+0x64>)
 8000eb0:	220a      	movs	r2, #10
 8000eb2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000eb4:	4804      	ldr	r0, [pc, #16]	; (8000ec8 <MX_SPI2_Init+0x64>)
 8000eb6:	f003 fa2f 	bl	8004318 <HAL_SPI_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000ec0:	f7ff fd7c 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000184 	.word	0x20000184
 8000ecc:	40003800 	.word	0x40003800

08000ed0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	; 0x28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a28      	ldr	r2, [pc, #160]	; (8000f90 <HAL_SPI_MspInit+0xc0>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d14a      	bne.n	8000f88 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	4b27      	ldr	r3, [pc, #156]	; (8000f94 <HAL_SPI_MspInit+0xc4>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	4a26      	ldr	r2, [pc, #152]	; (8000f94 <HAL_SPI_MspInit+0xc4>)
 8000efc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f00:	6413      	str	r3, [r2, #64]	; 0x40
 8000f02:	4b24      	ldr	r3, [pc, #144]	; (8000f94 <HAL_SPI_MspInit+0xc4>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b20      	ldr	r3, [pc, #128]	; (8000f94 <HAL_SPI_MspInit+0xc4>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a1f      	ldr	r2, [pc, #124]	; (8000f94 <HAL_SPI_MspInit+0xc4>)
 8000f18:	f043 0304 	orr.w	r3, r3, #4
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <HAL_SPI_MspInit+0xc4>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0304 	and.w	r3, r3, #4
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <HAL_SPI_MspInit+0xc4>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a18      	ldr	r2, [pc, #96]	; (8000f94 <HAL_SPI_MspInit+0xc4>)
 8000f34:	f043 0302 	orr.w	r3, r3, #2
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <HAL_SPI_MspInit+0xc4>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f46:	230c      	movs	r3, #12
 8000f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f52:	2303      	movs	r3, #3
 8000f54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f56:	2305      	movs	r3, #5
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f5a:	f107 0314 	add.w	r3, r7, #20
 8000f5e:	4619      	mov	r1, r3
 8000f60:	480d      	ldr	r0, [pc, #52]	; (8000f98 <HAL_SPI_MspInit+0xc8>)
 8000f62:	f001 f8d7 	bl	8002114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f74:	2303      	movs	r3, #3
 8000f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f78:	2305      	movs	r3, #5
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	4619      	mov	r1, r3
 8000f82:	4806      	ldr	r0, [pc, #24]	; (8000f9c <HAL_SPI_MspInit+0xcc>)
 8000f84:	f001 f8c6 	bl	8002114 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000f88:	bf00      	nop
 8000f8a:	3728      	adds	r7, #40	; 0x28
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40003800 	.word	0x40003800
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40020800 	.word	0x40020800
 8000f9c:	40020400 	.word	0x40020400

08000fa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <HAL_MspInit+0x4c>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	4a0f      	ldr	r2, [pc, #60]	; (8000fec <HAL_MspInit+0x4c>)
 8000fb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <HAL_MspInit+0x4c>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	603b      	str	r3, [r7, #0]
 8000fc6:	4b09      	ldr	r3, [pc, #36]	; (8000fec <HAL_MspInit+0x4c>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	4a08      	ldr	r2, [pc, #32]	; (8000fec <HAL_MspInit+0x4c>)
 8000fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_MspInit+0x4c>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fde:	2007      	movs	r0, #7
 8000fe0:	f000 fc23 	bl	800182a <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40023800 	.word	0x40023800

08000ff0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08e      	sub	sp, #56	; 0x38
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	4b33      	ldr	r3, [pc, #204]	; (80010d4 <HAL_InitTick+0xe4>)
 8001006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001008:	4a32      	ldr	r2, [pc, #200]	; (80010d4 <HAL_InitTick+0xe4>)
 800100a:	f043 0310 	orr.w	r3, r3, #16
 800100e:	6413      	str	r3, [r2, #64]	; 0x40
 8001010:	4b30      	ldr	r3, [pc, #192]	; (80010d4 <HAL_InitTick+0xe4>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	f003 0310 	and.w	r3, r3, #16
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800101c:	f107 0210 	add.w	r2, r7, #16
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	4611      	mov	r1, r2
 8001026:	4618      	mov	r0, r3
 8001028:	f003 f944 	bl	80042b4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800102c:	6a3b      	ldr	r3, [r7, #32]
 800102e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001032:	2b00      	cmp	r3, #0
 8001034:	d103      	bne.n	800103e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001036:	f003 f929 	bl	800428c <HAL_RCC_GetPCLK1Freq>
 800103a:	6378      	str	r0, [r7, #52]	; 0x34
 800103c:	e004      	b.n	8001048 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800103e:	f003 f925 	bl	800428c <HAL_RCC_GetPCLK1Freq>
 8001042:	4603      	mov	r3, r0
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800104a:	4a23      	ldr	r2, [pc, #140]	; (80010d8 <HAL_InitTick+0xe8>)
 800104c:	fba2 2303 	umull	r2, r3, r2, r3
 8001050:	0c9b      	lsrs	r3, r3, #18
 8001052:	3b01      	subs	r3, #1
 8001054:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001056:	4b21      	ldr	r3, [pc, #132]	; (80010dc <HAL_InitTick+0xec>)
 8001058:	4a21      	ldr	r2, [pc, #132]	; (80010e0 <HAL_InitTick+0xf0>)
 800105a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800105c:	4b1f      	ldr	r3, [pc, #124]	; (80010dc <HAL_InitTick+0xec>)
 800105e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001062:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001064:	4a1d      	ldr	r2, [pc, #116]	; (80010dc <HAL_InitTick+0xec>)
 8001066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001068:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800106a:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <HAL_InitTick+0xec>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001070:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <HAL_InitTick+0xec>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001076:	4b19      	ldr	r3, [pc, #100]	; (80010dc <HAL_InitTick+0xec>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800107c:	4817      	ldr	r0, [pc, #92]	; (80010dc <HAL_InitTick+0xec>)
 800107e:	f003 f9d4 	bl	800442a <HAL_TIM_Base_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001088:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800108c:	2b00      	cmp	r3, #0
 800108e:	d11b      	bne.n	80010c8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001090:	4812      	ldr	r0, [pc, #72]	; (80010dc <HAL_InitTick+0xec>)
 8001092:	f003 fa19 	bl	80044c8 <HAL_TIM_Base_Start_IT>
 8001096:	4603      	mov	r3, r0
 8001098:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800109c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d111      	bne.n	80010c8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010a4:	2036      	movs	r0, #54	; 0x36
 80010a6:	f000 fbe7 	bl	8001878 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b0f      	cmp	r3, #15
 80010ae:	d808      	bhi.n	80010c2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80010b0:	2200      	movs	r2, #0
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	2036      	movs	r0, #54	; 0x36
 80010b6:	f000 fbc3 	bl	8001840 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010ba:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <HAL_InitTick+0xf4>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6013      	str	r3, [r2, #0]
 80010c0:	e002      	b.n	80010c8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80010c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3738      	adds	r7, #56	; 0x38
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40023800 	.word	0x40023800
 80010d8:	431bde83 	.word	0x431bde83
 80010dc:	200001dc 	.word	0x200001dc
 80010e0:	40001000 	.word	0x40001000
 80010e4:	20000024 	.word	0x20000024

080010e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010ec:	e7fe      	b.n	80010ec <NMI_Handler+0x4>

080010ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f2:	e7fe      	b.n	80010f2 <HardFault_Handler+0x4>

080010f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <MemManage_Handler+0x4>

080010fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fe:	e7fe      	b.n	80010fe <BusFault_Handler+0x4>

08001100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001104:	e7fe      	b.n	8001104 <UsageFault_Handler+0x4>

08001106 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
	...

08001140 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_up);
 8001144:	4802      	ldr	r0, [pc, #8]	; (8001150 <DMA1_Stream6_IRQHandler+0x10>)
 8001146:	f000 fda9 	bl	8001c9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	200002fc 	.word	0x200002fc

08001154 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Xz_Pin);
 8001158:	f44f 7080 	mov.w	r0, #256	; 0x100
 800115c:	f001 f990 	bl	8002480 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ESTOP_Pin);
 8001160:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001164:	f001 f98c 	bl	8002480 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}

0800116c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001170:	4802      	ldr	r0, [pc, #8]	; (800117c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001172:	f003 fb4d 	bl	8004810 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200002b4 	.word	0x200002b4

08001180 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001184:	4802      	ldr	r0, [pc, #8]	; (8001190 <TIM3_IRQHandler+0x10>)
 8001186:	f003 fb43 	bl	8004810 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000224 	.word	0x20000224

08001194 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001198:	4802      	ldr	r0, [pc, #8]	; (80011a4 <TIM4_IRQHandler+0x10>)
 800119a:	f003 fb39 	bl	8004810 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	2000026c 	.word	0x2000026c

080011a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Yz_Pin);
 80011ac:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80011b0:	f001 f966 	bl	8002480 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <TIM6_DAC_IRQHandler+0x20>)
 80011be:	791b      	ldrb	r3, [r3, #4]
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d002      	beq.n	80011cc <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 80011c6:	4804      	ldr	r0, [pc, #16]	; (80011d8 <TIM6_DAC_IRQHandler+0x20>)
 80011c8:	f000 fbd8 	bl	800197c <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80011cc:	4803      	ldr	r0, [pc, #12]	; (80011dc <TIM6_DAC_IRQHandler+0x24>)
 80011ce:	f003 fb1f 	bl	8004810 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	2000013c 	.word	0x2000013c
 80011dc:	200001dc 	.word	0x200001dc

080011e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80011e4:	4802      	ldr	r0, [pc, #8]	; (80011f0 <OTG_FS_IRQHandler+0x10>)
 80011e6:	f001 fab3 	bl	8002750 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	2000184c 	.word	0x2000184c

080011f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <SystemInit+0x20>)
 80011fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011fe:	4a05      	ldr	r2, [pc, #20]	; (8001214 <SystemInit+0x20>)
 8001200:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001204:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <MX_TIM3_Init>:
TIM_HandleTypeDef htim9;
DMA_HandleTypeDef hdma_tim4_up;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08c      	sub	sp, #48	; 0x30
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800121e:	f107 030c 	add.w	r3, r7, #12
 8001222:	2224      	movs	r2, #36	; 0x24
 8001224:	2100      	movs	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f007 ffe0 	bl	80091ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001234:	4b20      	ldr	r3, [pc, #128]	; (80012b8 <MX_TIM3_Init+0xa0>)
 8001236:	4a21      	ldr	r2, [pc, #132]	; (80012bc <MX_TIM3_Init+0xa4>)
 8001238:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800123a:	4b1f      	ldr	r3, [pc, #124]	; (80012b8 <MX_TIM3_Init+0xa0>)
 800123c:	2200      	movs	r2, #0
 800123e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001240:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <MX_TIM3_Init+0xa0>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001246:	4b1c      	ldr	r3, [pc, #112]	; (80012b8 <MX_TIM3_Init+0xa0>)
 8001248:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800124c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124e:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <MX_TIM3_Init+0xa0>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001254:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <MX_TIM3_Init+0xa0>)
 8001256:	2200      	movs	r2, #0
 8001258:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800125a:	2303      	movs	r3, #3
 800125c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001262:	2301      	movs	r3, #1
 8001264:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001266:	2300      	movs	r3, #0
 8001268:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800126e:	2300      	movs	r3, #0
 8001270:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001272:	2301      	movs	r3, #1
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001276:	2300      	movs	r3, #0
 8001278:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800127e:	f107 030c 	add.w	r3, r7, #12
 8001282:	4619      	mov	r1, r3
 8001284:	480c      	ldr	r0, [pc, #48]	; (80012b8 <MX_TIM3_Init+0xa0>)
 8001286:	f003 f98f 	bl	80045a8 <HAL_TIM_Encoder_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001290:	f7ff fb94 	bl	80009bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001294:	2300      	movs	r3, #0
 8001296:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001298:	2300      	movs	r3, #0
 800129a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800129c:	1d3b      	adds	r3, r7, #4
 800129e:	4619      	mov	r1, r3
 80012a0:	4805      	ldr	r0, [pc, #20]	; (80012b8 <MX_TIM3_Init+0xa0>)
 80012a2:	f003 fe0d 	bl	8004ec0 <HAL_TIMEx_MasterConfigSynchronization>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80012ac:	f7ff fb86 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012b0:	bf00      	nop
 80012b2:	3730      	adds	r7, #48	; 0x30
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000224 	.word	0x20000224
 80012bc:	40000400 	.word	0x40000400

080012c0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08c      	sub	sp, #48	; 0x30
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012c6:	f107 030c 	add.w	r3, r7, #12
 80012ca:	2224      	movs	r2, #36	; 0x24
 80012cc:	2100      	movs	r1, #0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f007 ff8c 	bl	80091ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012dc:	4b20      	ldr	r3, [pc, #128]	; (8001360 <MX_TIM4_Init+0xa0>)
 80012de:	4a21      	ldr	r2, [pc, #132]	; (8001364 <MX_TIM4_Init+0xa4>)
 80012e0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80012e2:	4b1f      	ldr	r3, [pc, #124]	; (8001360 <MX_TIM4_Init+0xa0>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e8:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <MX_TIM4_Init+0xa0>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80012ee:	4b1c      	ldr	r3, [pc, #112]	; (8001360 <MX_TIM4_Init+0xa0>)
 80012f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012f4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f6:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <MX_TIM4_Init+0xa0>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012fc:	4b18      	ldr	r3, [pc, #96]	; (8001360 <MX_TIM4_Init+0xa0>)
 80012fe:	2200      	movs	r2, #0
 8001300:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001302:	2303      	movs	r3, #3
 8001304:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800130a:	2301      	movs	r3, #1
 800130c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800130e:	2300      	movs	r3, #0
 8001310:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001316:	2300      	movs	r3, #0
 8001318:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800131a:	2301      	movs	r3, #1
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800131e:	2300      	movs	r3, #0
 8001320:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001326:	f107 030c 	add.w	r3, r7, #12
 800132a:	4619      	mov	r1, r3
 800132c:	480c      	ldr	r0, [pc, #48]	; (8001360 <MX_TIM4_Init+0xa0>)
 800132e:	f003 f93b 	bl	80045a8 <HAL_TIM_Encoder_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001338:	f7ff fb40 	bl	80009bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800133c:	2300      	movs	r3, #0
 800133e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001340:	2300      	movs	r3, #0
 8001342:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	4619      	mov	r1, r3
 8001348:	4805      	ldr	r0, [pc, #20]	; (8001360 <MX_TIM4_Init+0xa0>)
 800134a:	f003 fdb9 	bl	8004ec0 <HAL_TIMEx_MasterConfigSynchronization>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001354:	f7ff fb32 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001358:	bf00      	nop
 800135a:	3730      	adds	r7, #48	; 0x30
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	2000026c 	.word	0x2000026c
 8001364:	40000800 	.word	0x40000800

08001368 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800136e:	463b      	mov	r3, r7
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800137a:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <MX_TIM9_Init+0x6c>)
 800137c:	4a16      	ldr	r2, [pc, #88]	; (80013d8 <MX_TIM9_Init+0x70>)
 800137e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 168-1;
 8001380:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <MX_TIM9_Init+0x6c>)
 8001382:	22a7      	movs	r2, #167	; 0xa7
 8001384:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001386:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <MX_TIM9_Init+0x6c>)
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 5000;
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <MX_TIM9_Init+0x6c>)
 800138e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001392:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001394:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <MX_TIM9_Init+0x6c>)
 8001396:	2200      	movs	r2, #0
 8001398:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800139a:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <MX_TIM9_Init+0x6c>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80013a0:	480c      	ldr	r0, [pc, #48]	; (80013d4 <MX_TIM9_Init+0x6c>)
 80013a2:	f003 f842 	bl	800442a <HAL_TIM_Base_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 80013ac:	f7ff fb06 	bl	80009bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b4:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80013b6:	463b      	mov	r3, r7
 80013b8:	4619      	mov	r1, r3
 80013ba:	4806      	ldr	r0, [pc, #24]	; (80013d4 <MX_TIM9_Init+0x6c>)
 80013bc:	f003 fb30 	bl	8004a20 <HAL_TIM_ConfigClockSource>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 80013c6:	f7ff faf9 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80013ca:	bf00      	nop
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200002b4 	.word	0x200002b4
 80013d8:	40014000 	.word	0x40014000

080013dc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08c      	sub	sp, #48	; 0x30
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 031c 	add.w	r3, r7, #28
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a52      	ldr	r2, [pc, #328]	; (8001544 <HAL_TIM_Encoder_MspInit+0x168>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d134      	bne.n	8001468 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	61bb      	str	r3, [r7, #24]
 8001402:	4b51      	ldr	r3, [pc, #324]	; (8001548 <HAL_TIM_Encoder_MspInit+0x16c>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	4a50      	ldr	r2, [pc, #320]	; (8001548 <HAL_TIM_Encoder_MspInit+0x16c>)
 8001408:	f043 0302 	orr.w	r3, r3, #2
 800140c:	6413      	str	r3, [r2, #64]	; 0x40
 800140e:	4b4e      	ldr	r3, [pc, #312]	; (8001548 <HAL_TIM_Encoder_MspInit+0x16c>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	61bb      	str	r3, [r7, #24]
 8001418:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	4b4a      	ldr	r3, [pc, #296]	; (8001548 <HAL_TIM_Encoder_MspInit+0x16c>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a49      	ldr	r2, [pc, #292]	; (8001548 <HAL_TIM_Encoder_MspInit+0x16c>)
 8001424:	f043 0304 	orr.w	r3, r3, #4
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b47      	ldr	r3, [pc, #284]	; (8001548 <HAL_TIM_Encoder_MspInit+0x16c>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0304 	and.w	r3, r3, #4
 8001432:	617b      	str	r3, [r7, #20]
 8001434:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001436:	23c0      	movs	r3, #192	; 0xc0
 8001438:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143a:	2302      	movs	r3, #2
 800143c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	2300      	movs	r3, #0
 8001444:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001446:	2302      	movs	r3, #2
 8001448:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800144a:	f107 031c 	add.w	r3, r7, #28
 800144e:	4619      	mov	r1, r3
 8001450:	483e      	ldr	r0, [pc, #248]	; (800154c <HAL_TIM_Encoder_MspInit+0x170>)
 8001452:	f000 fe5f 	bl	8002114 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	2100      	movs	r1, #0
 800145a:	201d      	movs	r0, #29
 800145c:	f000 f9f0 	bl	8001840 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001460:	201d      	movs	r0, #29
 8001462:	f000 fa09 	bl	8001878 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001466:	e069      	b.n	800153c <HAL_TIM_Encoder_MspInit+0x160>
  else if(tim_encoderHandle->Instance==TIM4)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a38      	ldr	r2, [pc, #224]	; (8001550 <HAL_TIM_Encoder_MspInit+0x174>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d164      	bne.n	800153c <HAL_TIM_Encoder_MspInit+0x160>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	4b34      	ldr	r3, [pc, #208]	; (8001548 <HAL_TIM_Encoder_MspInit+0x16c>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	4a33      	ldr	r2, [pc, #204]	; (8001548 <HAL_TIM_Encoder_MspInit+0x16c>)
 800147c:	f043 0304 	orr.w	r3, r3, #4
 8001480:	6413      	str	r3, [r2, #64]	; 0x40
 8001482:	4b31      	ldr	r3, [pc, #196]	; (8001548 <HAL_TIM_Encoder_MspInit+0x16c>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	f003 0304 	and.w	r3, r3, #4
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	4b2d      	ldr	r3, [pc, #180]	; (8001548 <HAL_TIM_Encoder_MspInit+0x16c>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a2c      	ldr	r2, [pc, #176]	; (8001548 <HAL_TIM_Encoder_MspInit+0x16c>)
 8001498:	f043 0308 	orr.w	r3, r3, #8
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b2a      	ldr	r3, [pc, #168]	; (8001548 <HAL_TIM_Encoder_MspInit+0x16c>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0308 	and.w	r3, r3, #8
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80014aa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80014ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b0:	2302      	movs	r3, #2
 80014b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b8:	2300      	movs	r3, #0
 80014ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80014bc:	2302      	movs	r3, #2
 80014be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014c0:	f107 031c 	add.w	r3, r7, #28
 80014c4:	4619      	mov	r1, r3
 80014c6:	4823      	ldr	r0, [pc, #140]	; (8001554 <HAL_TIM_Encoder_MspInit+0x178>)
 80014c8:	f000 fe24 	bl	8002114 <HAL_GPIO_Init>
    hdma_tim4_up.Instance = DMA1_Stream6;
 80014cc:	4b22      	ldr	r3, [pc, #136]	; (8001558 <HAL_TIM_Encoder_MspInit+0x17c>)
 80014ce:	4a23      	ldr	r2, [pc, #140]	; (800155c <HAL_TIM_Encoder_MspInit+0x180>)
 80014d0:	601a      	str	r2, [r3, #0]
    hdma_tim4_up.Init.Channel = DMA_CHANNEL_2;
 80014d2:	4b21      	ldr	r3, [pc, #132]	; (8001558 <HAL_TIM_Encoder_MspInit+0x17c>)
 80014d4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80014d8:	605a      	str	r2, [r3, #4]
    hdma_tim4_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014da:	4b1f      	ldr	r3, [pc, #124]	; (8001558 <HAL_TIM_Encoder_MspInit+0x17c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
    hdma_tim4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80014e0:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <HAL_TIM_Encoder_MspInit+0x17c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	60da      	str	r2, [r3, #12]
    hdma_tim4_up.Init.MemInc = DMA_MINC_ENABLE;
 80014e6:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <HAL_TIM_Encoder_MspInit+0x17c>)
 80014e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014ec:	611a      	str	r2, [r3, #16]
    hdma_tim4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014ee:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <HAL_TIM_Encoder_MspInit+0x17c>)
 80014f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014f4:	615a      	str	r2, [r3, #20]
    hdma_tim4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014f6:	4b18      	ldr	r3, [pc, #96]	; (8001558 <HAL_TIM_Encoder_MspInit+0x17c>)
 80014f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014fc:	619a      	str	r2, [r3, #24]
    hdma_tim4_up.Init.Mode = DMA_NORMAL;
 80014fe:	4b16      	ldr	r3, [pc, #88]	; (8001558 <HAL_TIM_Encoder_MspInit+0x17c>)
 8001500:	2200      	movs	r2, #0
 8001502:	61da      	str	r2, [r3, #28]
    hdma_tim4_up.Init.Priority = DMA_PRIORITY_LOW;
 8001504:	4b14      	ldr	r3, [pc, #80]	; (8001558 <HAL_TIM_Encoder_MspInit+0x17c>)
 8001506:	2200      	movs	r2, #0
 8001508:	621a      	str	r2, [r3, #32]
    hdma_tim4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800150a:	4b13      	ldr	r3, [pc, #76]	; (8001558 <HAL_TIM_Encoder_MspInit+0x17c>)
 800150c:	2200      	movs	r2, #0
 800150e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_up) != HAL_OK)
 8001510:	4811      	ldr	r0, [pc, #68]	; (8001558 <HAL_TIM_Encoder_MspInit+0x17c>)
 8001512:	f000 fb15 	bl	8001b40 <HAL_DMA_Init>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <HAL_TIM_Encoder_MspInit+0x144>
      Error_Handler();
 800151c:	f7ff fa4e 	bl	80009bc <Error_Handler>
    __HAL_LINKDMA(tim_encoderHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim4_up);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a0d      	ldr	r2, [pc, #52]	; (8001558 <HAL_TIM_Encoder_MspInit+0x17c>)
 8001524:	621a      	str	r2, [r3, #32]
 8001526:	4a0c      	ldr	r2, [pc, #48]	; (8001558 <HAL_TIM_Encoder_MspInit+0x17c>)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800152c:	2200      	movs	r2, #0
 800152e:	2100      	movs	r1, #0
 8001530:	201e      	movs	r0, #30
 8001532:	f000 f985 	bl	8001840 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001536:	201e      	movs	r0, #30
 8001538:	f000 f99e 	bl	8001878 <HAL_NVIC_EnableIRQ>
}
 800153c:	bf00      	nop
 800153e:	3730      	adds	r7, #48	; 0x30
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40000400 	.word	0x40000400
 8001548:	40023800 	.word	0x40023800
 800154c:	40020800 	.word	0x40020800
 8001550:	40000800 	.word	0x40000800
 8001554:	40020c00 	.word	0x40020c00
 8001558:	200002fc 	.word	0x200002fc
 800155c:	400260a0 	.word	0x400260a0

08001560 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM9)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a0e      	ldr	r2, [pc, #56]	; (80015a8 <HAL_TIM_Base_MspInit+0x48>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d115      	bne.n	800159e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <HAL_TIM_Base_MspInit+0x4c>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	4a0c      	ldr	r2, [pc, #48]	; (80015ac <HAL_TIM_Base_MspInit+0x4c>)
 800157c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001580:	6453      	str	r3, [r2, #68]	; 0x44
 8001582:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <HAL_TIM_Base_MspInit+0x4c>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]

    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	2100      	movs	r1, #0
 8001592:	2018      	movs	r0, #24
 8001594:	f000 f954 	bl	8001840 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001598:	2018      	movs	r0, #24
 800159a:	f000 f96d 	bl	8001878 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 800159e:	bf00      	nop
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40014000 	.word	0x40014000
 80015ac:	40023800 	.word	0x40023800

080015b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015b4:	480d      	ldr	r0, [pc, #52]	; (80015ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015b6:	490e      	ldr	r1, [pc, #56]	; (80015f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015b8:	4a0e      	ldr	r2, [pc, #56]	; (80015f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015bc:	e002      	b.n	80015c4 <LoopCopyDataInit>

080015be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015c2:	3304      	adds	r3, #4

080015c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c8:	d3f9      	bcc.n	80015be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ca:	4a0b      	ldr	r2, [pc, #44]	; (80015f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015cc:	4c0b      	ldr	r4, [pc, #44]	; (80015fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80015ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d0:	e001      	b.n	80015d6 <LoopFillZerobss>

080015d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d4:	3204      	adds	r2, #4

080015d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d8:	d3fb      	bcc.n	80015d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015da:	f7ff fe0b 	bl	80011f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015de:	f007 fe0d 	bl	80091fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015e2:	f7ff f943 	bl	800086c <main>
  bx  lr    
 80015e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f0:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 80015f4:	080092ec 	.word	0x080092ec
  ldr r2, =_sbss
 80015f8:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 80015fc:	20001f78 	.word	0x20001f78

08001600 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001600:	e7fe      	b.n	8001600 <ADC_IRQHandler>
	...

08001604 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001608:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <HAL_Init+0x40>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a0d      	ldr	r2, [pc, #52]	; (8001644 <HAL_Init+0x40>)
 800160e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001612:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001614:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <HAL_Init+0x40>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a0a      	ldr	r2, [pc, #40]	; (8001644 <HAL_Init+0x40>)
 800161a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800161e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001620:	4b08      	ldr	r3, [pc, #32]	; (8001644 <HAL_Init+0x40>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a07      	ldr	r2, [pc, #28]	; (8001644 <HAL_Init+0x40>)
 8001626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800162a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800162c:	2003      	movs	r0, #3
 800162e:	f000 f8fc 	bl	800182a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001632:	2000      	movs	r0, #0
 8001634:	f7ff fcdc 	bl	8000ff0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001638:	f7ff fcb2 	bl	8000fa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40023c00 	.word	0x40023c00

08001648 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <HAL_IncTick+0x20>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	461a      	mov	r2, r3
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_IncTick+0x24>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4413      	add	r3, r2
 8001658:	4a04      	ldr	r2, [pc, #16]	; (800166c <HAL_IncTick+0x24>)
 800165a:	6013      	str	r3, [r2, #0]
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	20000028 	.word	0x20000028
 800166c:	2000035c 	.word	0x2000035c

08001670 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  return uwTick;
 8001674:	4b03      	ldr	r3, [pc, #12]	; (8001684 <HAL_GetTick+0x14>)
 8001676:	681b      	ldr	r3, [r3, #0]
}
 8001678:	4618      	mov	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	2000035c 	.word	0x2000035c

08001688 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001690:	f7ff ffee 	bl	8001670 <HAL_GetTick>
 8001694:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016a0:	d005      	beq.n	80016ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016a2:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <HAL_Delay+0x44>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	461a      	mov	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4413      	add	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016ae:	bf00      	nop
 80016b0:	f7ff ffde 	bl	8001670 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d8f7      	bhi.n	80016b0 <HAL_Delay+0x28>
  {
  }
}
 80016c0:	bf00      	nop
 80016c2:	bf00      	nop
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000028 	.word	0x20000028

080016d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e0:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <__NVIC_SetPriorityGrouping+0x44>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016e6:	68ba      	ldr	r2, [r7, #8]
 80016e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016ec:	4013      	ands	r3, r2
 80016ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001702:	4a04      	ldr	r2, [pc, #16]	; (8001714 <__NVIC_SetPriorityGrouping+0x44>)
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	60d3      	str	r3, [r2, #12]
}
 8001708:	bf00      	nop
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800171c:	4b04      	ldr	r3, [pc, #16]	; (8001730 <__NVIC_GetPriorityGrouping+0x18>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	0a1b      	lsrs	r3, r3, #8
 8001722:	f003 0307 	and.w	r3, r3, #7
}
 8001726:	4618      	mov	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	2b00      	cmp	r3, #0
 8001744:	db0b      	blt.n	800175e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	f003 021f 	and.w	r2, r3, #31
 800174c:	4907      	ldr	r1, [pc, #28]	; (800176c <__NVIC_EnableIRQ+0x38>)
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001752:	095b      	lsrs	r3, r3, #5
 8001754:	2001      	movs	r0, #1
 8001756:	fa00 f202 	lsl.w	r2, r0, r2
 800175a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000e100 	.word	0xe000e100

08001770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	6039      	str	r1, [r7, #0]
 800177a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800177c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001780:	2b00      	cmp	r3, #0
 8001782:	db0a      	blt.n	800179a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	b2da      	uxtb	r2, r3
 8001788:	490c      	ldr	r1, [pc, #48]	; (80017bc <__NVIC_SetPriority+0x4c>)
 800178a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178e:	0112      	lsls	r2, r2, #4
 8001790:	b2d2      	uxtb	r2, r2
 8001792:	440b      	add	r3, r1
 8001794:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001798:	e00a      	b.n	80017b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	b2da      	uxtb	r2, r3
 800179e:	4908      	ldr	r1, [pc, #32]	; (80017c0 <__NVIC_SetPriority+0x50>)
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	3b04      	subs	r3, #4
 80017a8:	0112      	lsls	r2, r2, #4
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	440b      	add	r3, r1
 80017ae:	761a      	strb	r2, [r3, #24]
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000e100 	.word	0xe000e100
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b089      	sub	sp, #36	; 0x24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f1c3 0307 	rsb	r3, r3, #7
 80017de:	2b04      	cmp	r3, #4
 80017e0:	bf28      	it	cs
 80017e2:	2304      	movcs	r3, #4
 80017e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3304      	adds	r3, #4
 80017ea:	2b06      	cmp	r3, #6
 80017ec:	d902      	bls.n	80017f4 <NVIC_EncodePriority+0x30>
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	3b03      	subs	r3, #3
 80017f2:	e000      	b.n	80017f6 <NVIC_EncodePriority+0x32>
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f8:	f04f 32ff 	mov.w	r2, #4294967295
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43da      	mvns	r2, r3
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	401a      	ands	r2, r3
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800180c:	f04f 31ff 	mov.w	r1, #4294967295
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	fa01 f303 	lsl.w	r3, r1, r3
 8001816:	43d9      	mvns	r1, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800181c:	4313      	orrs	r3, r2
         );
}
 800181e:	4618      	mov	r0, r3
 8001820:	3724      	adds	r7, #36	; 0x24
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff ff4c 	bl	80016d0 <__NVIC_SetPriorityGrouping>
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
 800184c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001852:	f7ff ff61 	bl	8001718 <__NVIC_GetPriorityGrouping>
 8001856:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	68b9      	ldr	r1, [r7, #8]
 800185c:	6978      	ldr	r0, [r7, #20]
 800185e:	f7ff ffb1 	bl	80017c4 <NVIC_EncodePriority>
 8001862:	4602      	mov	r2, r0
 8001864:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001868:	4611      	mov	r1, r2
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff ff80 	bl	8001770 <__NVIC_SetPriority>
}
 8001870:	bf00      	nop
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff ff54 	bl	8001734 <__NVIC_EnableIRQ>
}
 800188c:	bf00      	nop
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e014      	b.n	80018d0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	791b      	ldrb	r3, [r3, #4]
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d105      	bne.n	80018bc <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7fe fe42 	bl	8000540 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2202      	movs	r2, #2
 80018c0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	795b      	ldrb	r3, [r3, #5]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d101      	bne.n	80018ee <HAL_DAC_Start+0x16>
 80018ea:	2302      	movs	r3, #2
 80018ec:	e040      	b.n	8001970 <HAL_DAC_Start+0x98>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2201      	movs	r2, #1
 80018f2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2202      	movs	r2, #2
 80018f8:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6819      	ldr	r1, [r3, #0]
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	f003 0310 	and.w	r3, r3, #16
 8001906:	2201      	movs	r2, #1
 8001908:	409a      	lsls	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	430a      	orrs	r2, r1
 8001910:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d10f      	bne.n	8001938 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001922:	2b3c      	cmp	r3, #60	; 0x3c
 8001924:	d11d      	bne.n	8001962 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f042 0201 	orr.w	r2, r2, #1
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	e014      	b.n	8001962 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	f003 0310 	and.w	r3, r3, #16
 8001948:	213c      	movs	r1, #60	; 0x3c
 800194a:	fa01 f303 	lsl.w	r3, r1, r3
 800194e:	429a      	cmp	r2, r3
 8001950:	d107      	bne.n	8001962 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f042 0202 	orr.w	r2, r2, #2
 8001960:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2201      	movs	r2, #1
 8001966:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800198e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001992:	d120      	bne.n	80019d6 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800199a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800199e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019a2:	d118      	bne.n	80019d6 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2204      	movs	r2, #4
 80019a8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	f043 0201 	orr.w	r2, r3, #1
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80019ce:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 f852 	bl	8001a7a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019e4:	d120      	bne.n	8001a28 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019f4:	d118      	bne.n	8001a28 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2204      	movs	r2, #4
 80019fa:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	f043 0202 	orr.w	r2, r3, #2
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a10:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001a20:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 f882 	bl	8001b2c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8001a28:	bf00      	nop
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b087      	sub	sp, #28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
 8001a3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d105      	bne.n	8001a5a <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4413      	add	r3, r2
 8001a54:	3308      	adds	r3, #8
 8001a56:	617b      	str	r3, [r7, #20]
 8001a58:	e004      	b.n	8001a64 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4413      	add	r3, r2
 8001a60:	3314      	adds	r3, #20
 8001a62:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	461a      	mov	r2, r3
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	371c      	adds	r7, #28
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b087      	sub	sp, #28
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	60f8      	str	r0, [r7, #12]
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	795b      	ldrb	r3, [r3, #5]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d101      	bne.n	8001aa6 <HAL_DAC_ConfigChannel+0x18>
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	e03c      	b.n	8001b20 <HAL_DAC_ConfigChannel+0x92>
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2202      	movs	r2, #2
 8001ab0:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f003 0310 	and.w	r3, r3, #16
 8001ac0:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	4013      	ands	r3, r2
 8001ace:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f003 0310 	and.w	r3, r3, #16
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6819      	ldr	r1, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f003 0310 	and.w	r3, r3, #16
 8001b02:	22c0      	movs	r2, #192	; 0xc0
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43da      	mvns	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	400a      	ands	r2, r1
 8001b10:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2201      	movs	r2, #1
 8001b16:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	371c      	adds	r7, #28
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b4c:	f7ff fd90 	bl	8001670 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d101      	bne.n	8001b5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e099      	b.n	8001c90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2202      	movs	r2, #2
 8001b60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 0201 	bic.w	r2, r2, #1
 8001b7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b7c:	e00f      	b.n	8001b9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b7e:	f7ff fd77 	bl	8001670 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b05      	cmp	r3, #5
 8001b8a:	d908      	bls.n	8001b9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2220      	movs	r2, #32
 8001b90:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2203      	movs	r2, #3
 8001b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e078      	b.n	8001c90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1e8      	bne.n	8001b7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	4b38      	ldr	r3, [pc, #224]	; (8001c98 <HAL_DMA_Init+0x158>)
 8001bb8:	4013      	ands	r3, r2
 8001bba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001be2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	2b04      	cmp	r3, #4
 8001bf6:	d107      	bne.n	8001c08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c00:	4313      	orrs	r3, r2
 8001c02:	697a      	ldr	r2, [r7, #20]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	f023 0307 	bic.w	r3, r3, #7
 8001c1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	d117      	bne.n	8001c62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d00e      	beq.n	8001c62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 f9e9 	bl	800201c <DMA_CheckFifoParam>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d008      	beq.n	8001c62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2240      	movs	r2, #64	; 0x40
 8001c54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e016      	b.n	8001c90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f9a0 	bl	8001fb0 <DMA_CalcBaseAndBitshift>
 8001c70:	4603      	mov	r3, r0
 8001c72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c78:	223f      	movs	r2, #63	; 0x3f
 8001c7a:	409a      	lsls	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	f010803f 	.word	0xf010803f

08001c9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ca8:	4b8e      	ldr	r3, [pc, #568]	; (8001ee4 <HAL_DMA_IRQHandler+0x248>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a8e      	ldr	r2, [pc, #568]	; (8001ee8 <HAL_DMA_IRQHandler+0x24c>)
 8001cae:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb2:	0a9b      	lsrs	r3, r3, #10
 8001cb4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc6:	2208      	movs	r2, #8
 8001cc8:	409a      	lsls	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d01a      	beq.n	8001d08 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d013      	beq.n	8001d08 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 0204 	bic.w	r2, r2, #4
 8001cee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf4:	2208      	movs	r2, #8
 8001cf6:	409a      	lsls	r2, r3
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d00:	f043 0201 	orr.w	r2, r3, #1
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	409a      	lsls	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4013      	ands	r3, r2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d012      	beq.n	8001d3e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00b      	beq.n	8001d3e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	409a      	lsls	r2, r3
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d36:	f043 0202 	orr.w	r2, r3, #2
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d42:	2204      	movs	r2, #4
 8001d44:	409a      	lsls	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d012      	beq.n	8001d74 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d00b      	beq.n	8001d74 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d60:	2204      	movs	r2, #4
 8001d62:	409a      	lsls	r2, r3
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6c:	f043 0204 	orr.w	r2, r3, #4
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d78:	2210      	movs	r2, #16
 8001d7a:	409a      	lsls	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d043      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0308 	and.w	r3, r3, #8
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d03c      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d96:	2210      	movs	r2, #16
 8001d98:	409a      	lsls	r2, r3
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d018      	beq.n	8001dde <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d108      	bne.n	8001dcc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d024      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	4798      	blx	r3
 8001dca:	e01f      	b.n	8001e0c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d01b      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	4798      	blx	r3
 8001ddc:	e016      	b.n	8001e0c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d107      	bne.n	8001dfc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 0208 	bic.w	r2, r2, #8
 8001dfa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e10:	2220      	movs	r2, #32
 8001e12:	409a      	lsls	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4013      	ands	r3, r2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f000 808f 	beq.w	8001f3c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0310 	and.w	r3, r3, #16
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 8087 	beq.w	8001f3c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e32:	2220      	movs	r2, #32
 8001e34:	409a      	lsls	r2, r3
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b05      	cmp	r3, #5
 8001e44:	d136      	bne.n	8001eb4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 0216 	bic.w	r2, r2, #22
 8001e54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	695a      	ldr	r2, [r3, #20]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e64:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d103      	bne.n	8001e76 <HAL_DMA_IRQHandler+0x1da>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d007      	beq.n	8001e86 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 0208 	bic.w	r2, r2, #8
 8001e84:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8a:	223f      	movs	r2, #63	; 0x3f
 8001e8c:	409a      	lsls	r2, r3
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d07e      	beq.n	8001fa8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	4798      	blx	r3
        }
        return;
 8001eb2:	e079      	b.n	8001fa8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d01d      	beq.n	8001efe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d10d      	bne.n	8001eec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d031      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	4798      	blx	r3
 8001ee0:	e02c      	b.n	8001f3c <HAL_DMA_IRQHandler+0x2a0>
 8001ee2:	bf00      	nop
 8001ee4:	20000020 	.word	0x20000020
 8001ee8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d023      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	4798      	blx	r3
 8001efc:	e01e      	b.n	8001f3c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d10f      	bne.n	8001f2c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f022 0210 	bic.w	r2, r2, #16
 8001f1a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d032      	beq.n	8001faa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d022      	beq.n	8001f96 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2205      	movs	r2, #5
 8001f54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 0201 	bic.w	r2, r2, #1
 8001f66:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d307      	bcc.n	8001f84 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1f2      	bne.n	8001f68 <HAL_DMA_IRQHandler+0x2cc>
 8001f82:	e000      	b.n	8001f86 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f84:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d005      	beq.n	8001faa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	4798      	blx	r3
 8001fa6:	e000      	b.n	8001faa <HAL_DMA_IRQHandler+0x30e>
        return;
 8001fa8:	bf00      	nop
    }
  }
}
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	3b10      	subs	r3, #16
 8001fc0:	4a14      	ldr	r2, [pc, #80]	; (8002014 <DMA_CalcBaseAndBitshift+0x64>)
 8001fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc6:	091b      	lsrs	r3, r3, #4
 8001fc8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001fca:	4a13      	ldr	r2, [pc, #76]	; (8002018 <DMA_CalcBaseAndBitshift+0x68>)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4413      	add	r3, r2
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2b03      	cmp	r3, #3
 8001fdc:	d909      	bls.n	8001ff2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fe6:	f023 0303 	bic.w	r3, r3, #3
 8001fea:	1d1a      	adds	r2, r3, #4
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	659a      	str	r2, [r3, #88]	; 0x58
 8001ff0:	e007      	b.n	8002002 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ffa:	f023 0303 	bic.w	r3, r3, #3
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002006:	4618      	mov	r0, r3
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	aaaaaaab 	.word	0xaaaaaaab
 8002018:	080092d4 	.word	0x080092d4

0800201c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002024:	2300      	movs	r3, #0
 8002026:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d11f      	bne.n	8002076 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	2b03      	cmp	r3, #3
 800203a:	d856      	bhi.n	80020ea <DMA_CheckFifoParam+0xce>
 800203c:	a201      	add	r2, pc, #4	; (adr r2, 8002044 <DMA_CheckFifoParam+0x28>)
 800203e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002042:	bf00      	nop
 8002044:	08002055 	.word	0x08002055
 8002048:	08002067 	.word	0x08002067
 800204c:	08002055 	.word	0x08002055
 8002050:	080020eb 	.word	0x080020eb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002058:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d046      	beq.n	80020ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002064:	e043      	b.n	80020ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800206e:	d140      	bne.n	80020f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002074:	e03d      	b.n	80020f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800207e:	d121      	bne.n	80020c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	2b03      	cmp	r3, #3
 8002084:	d837      	bhi.n	80020f6 <DMA_CheckFifoParam+0xda>
 8002086:	a201      	add	r2, pc, #4	; (adr r2, 800208c <DMA_CheckFifoParam+0x70>)
 8002088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800208c:	0800209d 	.word	0x0800209d
 8002090:	080020a3 	.word	0x080020a3
 8002094:	0800209d 	.word	0x0800209d
 8002098:	080020b5 	.word	0x080020b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	73fb      	strb	r3, [r7, #15]
      break;
 80020a0:	e030      	b.n	8002104 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d025      	beq.n	80020fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020b2:	e022      	b.n	80020fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020bc:	d11f      	bne.n	80020fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020c2:	e01c      	b.n	80020fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d903      	bls.n	80020d2 <DMA_CheckFifoParam+0xb6>
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	2b03      	cmp	r3, #3
 80020ce:	d003      	beq.n	80020d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80020d0:	e018      	b.n	8002104 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	73fb      	strb	r3, [r7, #15]
      break;
 80020d6:	e015      	b.n	8002104 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00e      	beq.n	8002102 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	73fb      	strb	r3, [r7, #15]
      break;
 80020e8:	e00b      	b.n	8002102 <DMA_CheckFifoParam+0xe6>
      break;
 80020ea:	bf00      	nop
 80020ec:	e00a      	b.n	8002104 <DMA_CheckFifoParam+0xe8>
      break;
 80020ee:	bf00      	nop
 80020f0:	e008      	b.n	8002104 <DMA_CheckFifoParam+0xe8>
      break;
 80020f2:	bf00      	nop
 80020f4:	e006      	b.n	8002104 <DMA_CheckFifoParam+0xe8>
      break;
 80020f6:	bf00      	nop
 80020f8:	e004      	b.n	8002104 <DMA_CheckFifoParam+0xe8>
      break;
 80020fa:	bf00      	nop
 80020fc:	e002      	b.n	8002104 <DMA_CheckFifoParam+0xe8>
      break;   
 80020fe:	bf00      	nop
 8002100:	e000      	b.n	8002104 <DMA_CheckFifoParam+0xe8>
      break;
 8002102:	bf00      	nop
    }
  } 
  
  return status; 
 8002104:	7bfb      	ldrb	r3, [r7, #15]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop

08002114 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002114:	b480      	push	{r7}
 8002116:	b089      	sub	sp, #36	; 0x24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002122:	2300      	movs	r3, #0
 8002124:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002126:	2300      	movs	r3, #0
 8002128:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800212a:	2300      	movs	r3, #0
 800212c:	61fb      	str	r3, [r7, #28]
 800212e:	e16b      	b.n	8002408 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002130:	2201      	movs	r2, #1
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	4013      	ands	r3, r2
 8002142:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	429a      	cmp	r2, r3
 800214a:	f040 815a 	bne.w	8002402 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	2b01      	cmp	r3, #1
 8002158:	d005      	beq.n	8002166 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002162:	2b02      	cmp	r3, #2
 8002164:	d130      	bne.n	80021c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	2203      	movs	r2, #3
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43db      	mvns	r3, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4013      	ands	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4313      	orrs	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800219c:	2201      	movs	r2, #1
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f003 0201 	and.w	r2, r3, #1
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4313      	orrs	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	2b03      	cmp	r3, #3
 80021d2:	d017      	beq.n	8002204 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	2203      	movs	r2, #3
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4013      	ands	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d123      	bne.n	8002258 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	08da      	lsrs	r2, r3, #3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3208      	adds	r2, #8
 8002218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800221c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	220f      	movs	r2, #15
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4013      	ands	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	691a      	ldr	r2, [r3, #16]
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	08da      	lsrs	r2, r3, #3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	3208      	adds	r2, #8
 8002252:	69b9      	ldr	r1, [r7, #24]
 8002254:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	2203      	movs	r2, #3
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 0203 	and.w	r2, r3, #3
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 80b4 	beq.w	8002402 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	4b60      	ldr	r3, [pc, #384]	; (8002420 <HAL_GPIO_Init+0x30c>)
 80022a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a2:	4a5f      	ldr	r2, [pc, #380]	; (8002420 <HAL_GPIO_Init+0x30c>)
 80022a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022a8:	6453      	str	r3, [r2, #68]	; 0x44
 80022aa:	4b5d      	ldr	r3, [pc, #372]	; (8002420 <HAL_GPIO_Init+0x30c>)
 80022ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022b6:	4a5b      	ldr	r2, [pc, #364]	; (8002424 <HAL_GPIO_Init+0x310>)
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	089b      	lsrs	r3, r3, #2
 80022bc:	3302      	adds	r3, #2
 80022be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	220f      	movs	r2, #15
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43db      	mvns	r3, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4013      	ands	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a52      	ldr	r2, [pc, #328]	; (8002428 <HAL_GPIO_Init+0x314>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d02b      	beq.n	800233a <HAL_GPIO_Init+0x226>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a51      	ldr	r2, [pc, #324]	; (800242c <HAL_GPIO_Init+0x318>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d025      	beq.n	8002336 <HAL_GPIO_Init+0x222>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a50      	ldr	r2, [pc, #320]	; (8002430 <HAL_GPIO_Init+0x31c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d01f      	beq.n	8002332 <HAL_GPIO_Init+0x21e>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a4f      	ldr	r2, [pc, #316]	; (8002434 <HAL_GPIO_Init+0x320>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d019      	beq.n	800232e <HAL_GPIO_Init+0x21a>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a4e      	ldr	r2, [pc, #312]	; (8002438 <HAL_GPIO_Init+0x324>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d013      	beq.n	800232a <HAL_GPIO_Init+0x216>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a4d      	ldr	r2, [pc, #308]	; (800243c <HAL_GPIO_Init+0x328>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d00d      	beq.n	8002326 <HAL_GPIO_Init+0x212>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a4c      	ldr	r2, [pc, #304]	; (8002440 <HAL_GPIO_Init+0x32c>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d007      	beq.n	8002322 <HAL_GPIO_Init+0x20e>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a4b      	ldr	r2, [pc, #300]	; (8002444 <HAL_GPIO_Init+0x330>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d101      	bne.n	800231e <HAL_GPIO_Init+0x20a>
 800231a:	2307      	movs	r3, #7
 800231c:	e00e      	b.n	800233c <HAL_GPIO_Init+0x228>
 800231e:	2308      	movs	r3, #8
 8002320:	e00c      	b.n	800233c <HAL_GPIO_Init+0x228>
 8002322:	2306      	movs	r3, #6
 8002324:	e00a      	b.n	800233c <HAL_GPIO_Init+0x228>
 8002326:	2305      	movs	r3, #5
 8002328:	e008      	b.n	800233c <HAL_GPIO_Init+0x228>
 800232a:	2304      	movs	r3, #4
 800232c:	e006      	b.n	800233c <HAL_GPIO_Init+0x228>
 800232e:	2303      	movs	r3, #3
 8002330:	e004      	b.n	800233c <HAL_GPIO_Init+0x228>
 8002332:	2302      	movs	r3, #2
 8002334:	e002      	b.n	800233c <HAL_GPIO_Init+0x228>
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <HAL_GPIO_Init+0x228>
 800233a:	2300      	movs	r3, #0
 800233c:	69fa      	ldr	r2, [r7, #28]
 800233e:	f002 0203 	and.w	r2, r2, #3
 8002342:	0092      	lsls	r2, r2, #2
 8002344:	4093      	lsls	r3, r2
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4313      	orrs	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800234c:	4935      	ldr	r1, [pc, #212]	; (8002424 <HAL_GPIO_Init+0x310>)
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	089b      	lsrs	r3, r3, #2
 8002352:	3302      	adds	r3, #2
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800235a:	4b3b      	ldr	r3, [pc, #236]	; (8002448 <HAL_GPIO_Init+0x334>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	43db      	mvns	r3, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4013      	ands	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	4313      	orrs	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800237e:	4a32      	ldr	r2, [pc, #200]	; (8002448 <HAL_GPIO_Init+0x334>)
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002384:	4b30      	ldr	r3, [pc, #192]	; (8002448 <HAL_GPIO_Init+0x334>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	43db      	mvns	r3, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d003      	beq.n	80023a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023a8:	4a27      	ldr	r2, [pc, #156]	; (8002448 <HAL_GPIO_Init+0x334>)
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023ae:	4b26      	ldr	r3, [pc, #152]	; (8002448 <HAL_GPIO_Init+0x334>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	43db      	mvns	r3, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4013      	ands	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023d2:	4a1d      	ldr	r2, [pc, #116]	; (8002448 <HAL_GPIO_Init+0x334>)
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023d8:	4b1b      	ldr	r3, [pc, #108]	; (8002448 <HAL_GPIO_Init+0x334>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d003      	beq.n	80023fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023fc:	4a12      	ldr	r2, [pc, #72]	; (8002448 <HAL_GPIO_Init+0x334>)
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	3301      	adds	r3, #1
 8002406:	61fb      	str	r3, [r7, #28]
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	2b0f      	cmp	r3, #15
 800240c:	f67f ae90 	bls.w	8002130 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002410:	bf00      	nop
 8002412:	bf00      	nop
 8002414:	3724      	adds	r7, #36	; 0x24
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	40023800 	.word	0x40023800
 8002424:	40013800 	.word	0x40013800
 8002428:	40020000 	.word	0x40020000
 800242c:	40020400 	.word	0x40020400
 8002430:	40020800 	.word	0x40020800
 8002434:	40020c00 	.word	0x40020c00
 8002438:	40021000 	.word	0x40021000
 800243c:	40021400 	.word	0x40021400
 8002440:	40021800 	.word	0x40021800
 8002444:	40021c00 	.word	0x40021c00
 8002448:	40013c00 	.word	0x40013c00

0800244c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	460b      	mov	r3, r1
 8002456:	807b      	strh	r3, [r7, #2]
 8002458:	4613      	mov	r3, r2
 800245a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800245c:	787b      	ldrb	r3, [r7, #1]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002462:	887a      	ldrh	r2, [r7, #2]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002468:	e003      	b.n	8002472 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800246a:	887b      	ldrh	r3, [r7, #2]
 800246c:	041a      	lsls	r2, r3, #16
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	619a      	str	r2, [r3, #24]
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
	...

08002480 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800248a:	4b08      	ldr	r3, [pc, #32]	; (80024ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800248c:	695a      	ldr	r2, [r3, #20]
 800248e:	88fb      	ldrh	r3, [r7, #6]
 8002490:	4013      	ands	r3, r2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d006      	beq.n	80024a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002496:	4a05      	ldr	r2, [pc, #20]	; (80024ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002498:	88fb      	ldrh	r3, [r7, #6]
 800249a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800249c:	88fb      	ldrh	r3, [r7, #6]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7fe fa92 	bl	80009c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80024a4:	bf00      	nop
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40013c00 	.word	0x40013c00

080024b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024b2:	b08f      	sub	sp, #60	; 0x3c
 80024b4:	af0a      	add	r7, sp, #40	; 0x28
 80024b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e10f      	b.n	80026e2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d106      	bne.n	80024e2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f006 fb63 	bl	8008ba8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2203      	movs	r2, #3
 80024e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d102      	bne.n	80024fc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f002 fe82 	bl	800520a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	603b      	str	r3, [r7, #0]
 800250c:	687e      	ldr	r6, [r7, #4]
 800250e:	466d      	mov	r5, sp
 8002510:	f106 0410 	add.w	r4, r6, #16
 8002514:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002516:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002518:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800251a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800251c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002520:	e885 0003 	stmia.w	r5, {r0, r1}
 8002524:	1d33      	adds	r3, r6, #4
 8002526:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002528:	6838      	ldr	r0, [r7, #0]
 800252a:	f002 fd59 	bl	8004fe0 <USB_CoreInit>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d005      	beq.n	8002540 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2202      	movs	r2, #2
 8002538:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e0d0      	b.n	80026e2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2100      	movs	r1, #0
 8002546:	4618      	mov	r0, r3
 8002548:	f002 fe70 	bl	800522c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800254c:	2300      	movs	r3, #0
 800254e:	73fb      	strb	r3, [r7, #15]
 8002550:	e04a      	b.n	80025e8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002552:	7bfa      	ldrb	r2, [r7, #15]
 8002554:	6879      	ldr	r1, [r7, #4]
 8002556:	4613      	mov	r3, r2
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	4413      	add	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	440b      	add	r3, r1
 8002560:	333d      	adds	r3, #61	; 0x3d
 8002562:	2201      	movs	r2, #1
 8002564:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002566:	7bfa      	ldrb	r2, [r7, #15]
 8002568:	6879      	ldr	r1, [r7, #4]
 800256a:	4613      	mov	r3, r2
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	4413      	add	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	440b      	add	r3, r1
 8002574:	333c      	adds	r3, #60	; 0x3c
 8002576:	7bfa      	ldrb	r2, [r7, #15]
 8002578:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800257a:	7bfa      	ldrb	r2, [r7, #15]
 800257c:	7bfb      	ldrb	r3, [r7, #15]
 800257e:	b298      	uxth	r0, r3
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	4613      	mov	r3, r2
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	4413      	add	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	440b      	add	r3, r1
 800258c:	3344      	adds	r3, #68	; 0x44
 800258e:	4602      	mov	r2, r0
 8002590:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002592:	7bfa      	ldrb	r2, [r7, #15]
 8002594:	6879      	ldr	r1, [r7, #4]
 8002596:	4613      	mov	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	4413      	add	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	440b      	add	r3, r1
 80025a0:	3340      	adds	r3, #64	; 0x40
 80025a2:	2200      	movs	r2, #0
 80025a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025a6:	7bfa      	ldrb	r2, [r7, #15]
 80025a8:	6879      	ldr	r1, [r7, #4]
 80025aa:	4613      	mov	r3, r2
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	4413      	add	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	440b      	add	r3, r1
 80025b4:	3348      	adds	r3, #72	; 0x48
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025ba:	7bfa      	ldrb	r2, [r7, #15]
 80025bc:	6879      	ldr	r1, [r7, #4]
 80025be:	4613      	mov	r3, r2
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	4413      	add	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	440b      	add	r3, r1
 80025c8:	334c      	adds	r3, #76	; 0x4c
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025ce:	7bfa      	ldrb	r2, [r7, #15]
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	4413      	add	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	440b      	add	r3, r1
 80025dc:	3354      	adds	r3, #84	; 0x54
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025e2:	7bfb      	ldrb	r3, [r7, #15]
 80025e4:	3301      	adds	r3, #1
 80025e6:	73fb      	strb	r3, [r7, #15]
 80025e8:	7bfa      	ldrb	r2, [r7, #15]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d3af      	bcc.n	8002552 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025f2:	2300      	movs	r3, #0
 80025f4:	73fb      	strb	r3, [r7, #15]
 80025f6:	e044      	b.n	8002682 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025f8:	7bfa      	ldrb	r2, [r7, #15]
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	4413      	add	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800260a:	2200      	movs	r2, #0
 800260c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800260e:	7bfa      	ldrb	r2, [r7, #15]
 8002610:	6879      	ldr	r1, [r7, #4]
 8002612:	4613      	mov	r3, r2
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	4413      	add	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	440b      	add	r3, r1
 800261c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002620:	7bfa      	ldrb	r2, [r7, #15]
 8002622:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002624:	7bfa      	ldrb	r2, [r7, #15]
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	4613      	mov	r3, r2
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	4413      	add	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	440b      	add	r3, r1
 8002632:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002636:	2200      	movs	r2, #0
 8002638:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800263a:	7bfa      	ldrb	r2, [r7, #15]
 800263c:	6879      	ldr	r1, [r7, #4]
 800263e:	4613      	mov	r3, r2
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	4413      	add	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	440b      	add	r3, r1
 8002648:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002650:	7bfa      	ldrb	r2, [r7, #15]
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	4613      	mov	r3, r2
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	4413      	add	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002666:	7bfa      	ldrb	r2, [r7, #15]
 8002668:	6879      	ldr	r1, [r7, #4]
 800266a:	4613      	mov	r3, r2
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	4413      	add	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	440b      	add	r3, r1
 8002674:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800267c:	7bfb      	ldrb	r3, [r7, #15]
 800267e:	3301      	adds	r3, #1
 8002680:	73fb      	strb	r3, [r7, #15]
 8002682:	7bfa      	ldrb	r2, [r7, #15]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	429a      	cmp	r2, r3
 800268a:	d3b5      	bcc.n	80025f8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	603b      	str	r3, [r7, #0]
 8002692:	687e      	ldr	r6, [r7, #4]
 8002694:	466d      	mov	r5, sp
 8002696:	f106 0410 	add.w	r4, r6, #16
 800269a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800269c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800269e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80026aa:	1d33      	adds	r3, r6, #4
 80026ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026ae:	6838      	ldr	r0, [r7, #0]
 80026b0:	f002 fe08 	bl	80052c4 <USB_DevInit>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d005      	beq.n	80026c6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2202      	movs	r2, #2
 80026be:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e00d      	b.n	80026e2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f003 ff57 	bl	800658e <USB_DevDisconnect>

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026ea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b084      	sub	sp, #16
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d101      	bne.n	8002706 <HAL_PCD_Start+0x1c>
 8002702:	2302      	movs	r3, #2
 8002704:	e020      	b.n	8002748 <HAL_PCD_Start+0x5e>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002712:	2b01      	cmp	r3, #1
 8002714:	d109      	bne.n	800272a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800271a:	2b01      	cmp	r3, #1
 800271c:	d005      	beq.n	800272a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002722:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f002 fd5a 	bl	80051e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4618      	mov	r0, r3
 800273a:	f003 ff07 	bl	800654c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002750:	b590      	push	{r4, r7, lr}
 8002752:	b08d      	sub	sp, #52	; 0x34
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800275e:	6a3b      	ldr	r3, [r7, #32]
 8002760:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f003 ffc5 	bl	80066f6 <USB_GetMode>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	f040 848a 	bne.w	8003088 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4618      	mov	r0, r3
 800277a:	f003 ff29 	bl	80065d0 <USB_ReadInterrupts>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 8480 	beq.w	8003086 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	0a1b      	lsrs	r3, r3, #8
 8002790:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f003 ff16 	bl	80065d0 <USB_ReadInterrupts>
 80027a4:	4603      	mov	r3, r0
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d107      	bne.n	80027be <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	695a      	ldr	r2, [r3, #20]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f002 0202 	and.w	r2, r2, #2
 80027bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f003 ff04 	bl	80065d0 <USB_ReadInterrupts>
 80027c8:	4603      	mov	r3, r0
 80027ca:	f003 0310 	and.w	r3, r3, #16
 80027ce:	2b10      	cmp	r3, #16
 80027d0:	d161      	bne.n	8002896 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	699a      	ldr	r2, [r3, #24]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 0210 	bic.w	r2, r2, #16
 80027e0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80027e2:	6a3b      	ldr	r3, [r7, #32]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	f003 020f 	and.w	r2, r3, #15
 80027ee:	4613      	mov	r3, r2
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	4413      	add	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	4413      	add	r3, r2
 80027fe:	3304      	adds	r3, #4
 8002800:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	0c5b      	lsrs	r3, r3, #17
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	2b02      	cmp	r3, #2
 800280c:	d124      	bne.n	8002858 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002814:	4013      	ands	r3, r2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d035      	beq.n	8002886 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	091b      	lsrs	r3, r3, #4
 8002822:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002824:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002828:	b29b      	uxth	r3, r3
 800282a:	461a      	mov	r2, r3
 800282c:	6a38      	ldr	r0, [r7, #32]
 800282e:	f003 fd3b 	bl	80062a8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	691a      	ldr	r2, [r3, #16]
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	091b      	lsrs	r3, r3, #4
 800283a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800283e:	441a      	add	r2, r3
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	6a1a      	ldr	r2, [r3, #32]
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	091b      	lsrs	r3, r3, #4
 800284c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002850:	441a      	add	r2, r3
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	621a      	str	r2, [r3, #32]
 8002856:	e016      	b.n	8002886 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	0c5b      	lsrs	r3, r3, #17
 800285c:	f003 030f 	and.w	r3, r3, #15
 8002860:	2b06      	cmp	r3, #6
 8002862:	d110      	bne.n	8002886 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800286a:	2208      	movs	r2, #8
 800286c:	4619      	mov	r1, r3
 800286e:	6a38      	ldr	r0, [r7, #32]
 8002870:	f003 fd1a 	bl	80062a8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	6a1a      	ldr	r2, [r3, #32]
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	091b      	lsrs	r3, r3, #4
 800287c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002880:	441a      	add	r2, r3
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	699a      	ldr	r2, [r3, #24]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f042 0210 	orr.w	r2, r2, #16
 8002894:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f003 fe98 	bl	80065d0 <USB_ReadInterrupts>
 80028a0:	4603      	mov	r3, r0
 80028a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028a6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80028aa:	f040 80a7 	bne.w	80029fc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f003 fe9d 	bl	80065f6 <USB_ReadDevAllOutEpInterrupt>
 80028bc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80028be:	e099      	b.n	80029f4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80028c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 808e 	beq.w	80029e8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	4611      	mov	r1, r2
 80028d6:	4618      	mov	r0, r3
 80028d8:	f003 fec1 	bl	800665e <USB_ReadDevOutEPInterrupt>
 80028dc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00c      	beq.n	8002902 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	015a      	lsls	r2, r3, #5
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	4413      	add	r3, r2
 80028f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028f4:	461a      	mov	r2, r3
 80028f6:	2301      	movs	r3, #1
 80028f8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80028fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 fec3 	bl	8003688 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	f003 0308 	and.w	r3, r3, #8
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00c      	beq.n	8002926 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	015a      	lsls	r2, r3, #5
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	4413      	add	r3, r2
 8002914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002918:	461a      	mov	r2, r3
 800291a:	2308      	movs	r3, #8
 800291c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800291e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 ff99 	bl	8003858 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	f003 0310 	and.w	r3, r3, #16
 800292c:	2b00      	cmp	r3, #0
 800292e:	d008      	beq.n	8002942 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002932:	015a      	lsls	r2, r3, #5
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	4413      	add	r3, r2
 8002938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800293c:	461a      	mov	r2, r3
 800293e:	2310      	movs	r3, #16
 8002940:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d030      	beq.n	80029ae <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800294c:	6a3b      	ldr	r3, [r7, #32]
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002954:	2b80      	cmp	r3, #128	; 0x80
 8002956:	d109      	bne.n	800296c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	69fa      	ldr	r2, [r7, #28]
 8002962:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002966:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800296a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800296c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800296e:	4613      	mov	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	4413      	add	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	4413      	add	r3, r2
 800297e:	3304      	adds	r3, #4
 8002980:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	78db      	ldrb	r3, [r3, #3]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d108      	bne.n	800299c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	2200      	movs	r2, #0
 800298e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	b2db      	uxtb	r3, r3
 8002994:	4619      	mov	r1, r3
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f006 fa1a 	bl	8008dd0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	015a      	lsls	r2, r3, #5
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	4413      	add	r3, r2
 80029a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029a8:	461a      	mov	r2, r3
 80029aa:	2302      	movs	r3, #2
 80029ac:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	f003 0320 	and.w	r3, r3, #32
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d008      	beq.n	80029ca <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	015a      	lsls	r2, r3, #5
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	4413      	add	r3, r2
 80029c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029c4:	461a      	mov	r2, r3
 80029c6:	2320      	movs	r3, #32
 80029c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d009      	beq.n	80029e8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80029d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d6:	015a      	lsls	r2, r3, #5
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	4413      	add	r3, r2
 80029dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029e0:	461a      	mov	r2, r3
 80029e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029e6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	3301      	adds	r3, #1
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80029ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f0:	085b      	lsrs	r3, r3, #1
 80029f2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80029f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f47f af62 	bne.w	80028c0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f003 fde5 	bl	80065d0 <USB_ReadInterrupts>
 8002a06:	4603      	mov	r3, r0
 8002a08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a10:	f040 80db 	bne.w	8002bca <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f003 fe06 	bl	800662a <USB_ReadDevAllInEpInterrupt>
 8002a1e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002a20:	2300      	movs	r3, #0
 8002a22:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002a24:	e0cd      	b.n	8002bc2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 80c2 	beq.w	8002bb6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	4611      	mov	r1, r2
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f003 fe2c 	bl	800669a <USB_ReadDevInEPInterrupt>
 8002a42:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d057      	beq.n	8002afe <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	f003 030f 	and.w	r3, r3, #15
 8002a54:	2201      	movs	r2, #1
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	43db      	mvns	r3, r3
 8002a68:	69f9      	ldr	r1, [r7, #28]
 8002a6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002a6e:	4013      	ands	r3, r2
 8002a70:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	015a      	lsls	r2, r3, #5
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	4413      	add	r3, r2
 8002a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a7e:	461a      	mov	r2, r3
 8002a80:	2301      	movs	r3, #1
 8002a82:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d132      	bne.n	8002af2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a90:	4613      	mov	r3, r2
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	4413      	add	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	440b      	add	r3, r1
 8002a9a:	334c      	adds	r3, #76	; 0x4c
 8002a9c:	6819      	ldr	r1, [r3, #0]
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	4413      	add	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4403      	add	r3, r0
 8002aac:	3348      	adds	r3, #72	; 0x48
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4419      	add	r1, r3
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	4413      	add	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	4403      	add	r3, r0
 8002ac0:	334c      	adds	r3, #76	; 0x4c
 8002ac2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d113      	bne.n	8002af2 <HAL_PCD_IRQHandler+0x3a2>
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ace:	4613      	mov	r3, r2
 8002ad0:	00db      	lsls	r3, r3, #3
 8002ad2:	4413      	add	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	440b      	add	r3, r1
 8002ad8:	3354      	adds	r3, #84	; 0x54
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d108      	bne.n	8002af2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6818      	ldr	r0, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002aea:	461a      	mov	r2, r3
 8002aec:	2101      	movs	r1, #1
 8002aee:	f003 fe33 	bl	8006758 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	4619      	mov	r1, r3
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f006 f8e4 	bl	8008cc6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	f003 0308 	and.w	r3, r3, #8
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d008      	beq.n	8002b1a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0a:	015a      	lsls	r2, r3, #5
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	4413      	add	r3, r2
 8002b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b14:	461a      	mov	r2, r3
 8002b16:	2308      	movs	r3, #8
 8002b18:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	f003 0310 	and.w	r3, r3, #16
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d008      	beq.n	8002b36 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	015a      	lsls	r2, r3, #5
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b30:	461a      	mov	r2, r3
 8002b32:	2310      	movs	r3, #16
 8002b34:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d008      	beq.n	8002b52 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b42:	015a      	lsls	r2, r3, #5
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	4413      	add	r3, r2
 8002b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	2340      	movs	r3, #64	; 0x40
 8002b50:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d023      	beq.n	8002ba4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002b5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b5e:	6a38      	ldr	r0, [r7, #32]
 8002b60:	f002 fd14 	bl	800558c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b66:	4613      	mov	r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	4413      	add	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	3338      	adds	r3, #56	; 0x38
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	4413      	add	r3, r2
 8002b74:	3304      	adds	r3, #4
 8002b76:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	78db      	ldrb	r3, [r3, #3]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d108      	bne.n	8002b92 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	2200      	movs	r2, #0
 8002b84:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f006 f931 	bl	8008df4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	015a      	lsls	r2, r3, #5
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	4413      	add	r3, r2
 8002b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002bae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 fcdb 	bl	800356c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb8:	3301      	adds	r3, #1
 8002bba:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbe:	085b      	lsrs	r3, r3, #1
 8002bc0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f47f af2e 	bne.w	8002a26 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f003 fcfe 	bl	80065d0 <USB_ReadInterrupts>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002bda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bde:	d122      	bne.n	8002c26 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	69fa      	ldr	r2, [r7, #28]
 8002bea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bee:	f023 0301 	bic.w	r3, r3, #1
 8002bf2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d108      	bne.n	8002c10 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002c06:	2100      	movs	r1, #0
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 fec3 	bl	8003994 <HAL_PCDEx_LPM_Callback>
 8002c0e:	e002      	b.n	8002c16 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f006 f8cf 	bl	8008db4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	695a      	ldr	r2, [r3, #20]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002c24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f003 fcd0 	bl	80065d0 <USB_ReadInterrupts>
 8002c30:	4603      	mov	r3, r0
 8002c32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c3a:	d112      	bne.n	8002c62 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d102      	bne.n	8002c52 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f006 f88b 	bl	8008d68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	695a      	ldr	r2, [r3, #20]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002c60:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f003 fcb2 	bl	80065d0 <USB_ReadInterrupts>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c76:	f040 80b7 	bne.w	8002de8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	69fa      	ldr	r2, [r7, #28]
 8002c84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c88:	f023 0301 	bic.w	r3, r3, #1
 8002c8c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2110      	movs	r1, #16
 8002c94:	4618      	mov	r0, r3
 8002c96:	f002 fc79 	bl	800558c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c9e:	e046      	b.n	8002d2e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca2:	015a      	lsls	r2, r3, #5
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cac:	461a      	mov	r2, r3
 8002cae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002cb2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb6:	015a      	lsls	r2, r3, #5
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	4413      	add	r3, r2
 8002cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cc4:	0151      	lsls	r1, r2, #5
 8002cc6:	69fa      	ldr	r2, [r7, #28]
 8002cc8:	440a      	add	r2, r1
 8002cca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002cce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002cd2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd6:	015a      	lsls	r2, r3, #5
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	4413      	add	r3, r2
 8002cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002ce6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cea:	015a      	lsls	r2, r3, #5
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	4413      	add	r3, r2
 8002cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cf8:	0151      	lsls	r1, r2, #5
 8002cfa:	69fa      	ldr	r2, [r7, #28]
 8002cfc:	440a      	add	r2, r1
 8002cfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002d02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d06:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0a:	015a      	lsls	r2, r3, #5
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	4413      	add	r3, r2
 8002d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d18:	0151      	lsls	r1, r2, #5
 8002d1a:	69fa      	ldr	r2, [r7, #28]
 8002d1c:	440a      	add	r2, r1
 8002d1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002d22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002d26:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d3b3      	bcc.n	8002ca0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d3e:	69db      	ldr	r3, [r3, #28]
 8002d40:	69fa      	ldr	r2, [r7, #28]
 8002d42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d46:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002d4a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d016      	beq.n	8002d82 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d5e:	69fa      	ldr	r2, [r7, #28]
 8002d60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d64:	f043 030b 	orr.w	r3, r3, #11
 8002d68:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d74:	69fa      	ldr	r2, [r7, #28]
 8002d76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d7a:	f043 030b 	orr.w	r3, r3, #11
 8002d7e:	6453      	str	r3, [r2, #68]	; 0x44
 8002d80:	e015      	b.n	8002dae <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	69fa      	ldr	r2, [r7, #28]
 8002d8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d94:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002d98:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	69fa      	ldr	r2, [r7, #28]
 8002da4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002da8:	f043 030b 	orr.w	r3, r3, #11
 8002dac:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	69fa      	ldr	r2, [r7, #28]
 8002db8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dbc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002dc0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6818      	ldr	r0, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	f003 fcc0 	bl	8006758 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	695a      	ldr	r2, [r3, #20]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002de6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f003 fbef 	bl	80065d0 <USB_ReadInterrupts>
 8002df2:	4603      	mov	r3, r0
 8002df4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002df8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dfc:	d124      	bne.n	8002e48 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f003 fc85 	bl	8006712 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f002 fc3a 	bl	8005686 <USB_GetDevSpeed>
 8002e12:	4603      	mov	r3, r0
 8002e14:	461a      	mov	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681c      	ldr	r4, [r3, #0]
 8002e1e:	f001 fa29 	bl	8004274 <HAL_RCC_GetHCLKFreq>
 8002e22:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	4620      	mov	r0, r4
 8002e2e:	f002 f939 	bl	80050a4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f005 ff6f 	bl	8008d16 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	695a      	ldr	r2, [r3, #20]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002e46:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f003 fbbf 	bl	80065d0 <USB_ReadInterrupts>
 8002e52:	4603      	mov	r3, r0
 8002e54:	f003 0308 	and.w	r3, r3, #8
 8002e58:	2b08      	cmp	r3, #8
 8002e5a:	d10a      	bne.n	8002e72 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f005 ff4c 	bl	8008cfa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	695a      	ldr	r2, [r3, #20]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f002 0208 	and.w	r2, r2, #8
 8002e70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f003 fbaa 	bl	80065d0 <USB_ReadInterrupts>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e82:	2b80      	cmp	r3, #128	; 0x80
 8002e84:	d122      	bne.n	8002ecc <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002e86:	6a3b      	ldr	r3, [r7, #32]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
 8002e90:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e92:	2301      	movs	r3, #1
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24
 8002e96:	e014      	b.n	8002ec2 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	4413      	add	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d105      	bne.n	8002ebc <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 fb27 	bl	800350a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d3e5      	bcc.n	8002e98 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f003 fb7d 	bl	80065d0 <USB_ReadInterrupts>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002edc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ee0:	d13b      	bne.n	8002f5a <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ee6:	e02b      	b.n	8002f40 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eea:	015a      	lsls	r2, r3, #5
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	4413      	add	r3, r2
 8002ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ef8:	6879      	ldr	r1, [r7, #4]
 8002efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002efc:	4613      	mov	r3, r2
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	4413      	add	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	3340      	adds	r3, #64	; 0x40
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d115      	bne.n	8002f3a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002f0e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	da12      	bge.n	8002f3a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f18:	4613      	mov	r3, r2
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	4413      	add	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	333f      	adds	r3, #63	; 0x3f
 8002f24:	2201      	movs	r2, #1
 8002f26:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	4619      	mov	r1, r3
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 fae8 	bl	800350a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d3ce      	bcc.n	8002ee8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	695a      	ldr	r2, [r3, #20]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002f58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f003 fb36 	bl	80065d0 <USB_ReadInterrupts>
 8002f64:	4603      	mov	r3, r0
 8002f66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f6e:	d155      	bne.n	800301c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f70:	2301      	movs	r3, #1
 8002f72:	627b      	str	r3, [r7, #36]	; 0x24
 8002f74:	e045      	b.n	8003002 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	015a      	lsls	r2, r3, #5
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	00db      	lsls	r3, r3, #3
 8002f8e:	4413      	add	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	440b      	add	r3, r1
 8002f94:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d12e      	bne.n	8002ffc <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f9e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	da2b      	bge.n	8002ffc <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002fb0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d121      	bne.n	8002ffc <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	4413      	add	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002fca:	2201      	movs	r2, #1
 8002fcc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002fd6:	6a3b      	ldr	r3, [r7, #32]
 8002fd8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002fda:	6a3b      	ldr	r3, [r7, #32]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10a      	bne.n	8002ffc <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	69fa      	ldr	r2, [r7, #28]
 8002ff0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ff4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ff8:	6053      	str	r3, [r2, #4]
            break;
 8002ffa:	e007      	b.n	800300c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffe:	3301      	adds	r3, #1
 8003000:	627b      	str	r3, [r7, #36]	; 0x24
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003008:	429a      	cmp	r2, r3
 800300a:	d3b4      	bcc.n	8002f76 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	695a      	ldr	r2, [r3, #20]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800301a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4618      	mov	r0, r3
 8003022:	f003 fad5 	bl	80065d0 <USB_ReadInterrupts>
 8003026:	4603      	mov	r3, r0
 8003028:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800302c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003030:	d10a      	bne.n	8003048 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f005 fef0 	bl	8008e18 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	695a      	ldr	r2, [r3, #20]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003046:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f003 fabf 	bl	80065d0 <USB_ReadInterrupts>
 8003052:	4603      	mov	r3, r0
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b04      	cmp	r3, #4
 800305a:	d115      	bne.n	8003088 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	f003 0304 	and.w	r3, r3, #4
 800306a:	2b00      	cmp	r3, #0
 800306c:	d002      	beq.n	8003074 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f005 fee0 	bl	8008e34 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6859      	ldr	r1, [r3, #4]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	430a      	orrs	r2, r1
 8003082:	605a      	str	r2, [r3, #4]
 8003084:	e000      	b.n	8003088 <HAL_PCD_IRQHandler+0x938>
      return;
 8003086:	bf00      	nop
    }
  }
}
 8003088:	3734      	adds	r7, #52	; 0x34
 800308a:	46bd      	mov	sp, r7
 800308c:	bd90      	pop	{r4, r7, pc}

0800308e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b082      	sub	sp, #8
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
 8003096:	460b      	mov	r3, r1
 8003098:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d101      	bne.n	80030a8 <HAL_PCD_SetAddress+0x1a>
 80030a4:	2302      	movs	r3, #2
 80030a6:	e013      	b.n	80030d0 <HAL_PCD_SetAddress+0x42>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	78fa      	ldrb	r2, [r7, #3]
 80030b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	78fa      	ldrb	r2, [r7, #3]
 80030be:	4611      	mov	r1, r2
 80030c0:	4618      	mov	r0, r3
 80030c2:	f003 fa1d 	bl	8006500 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	4608      	mov	r0, r1
 80030e2:	4611      	mov	r1, r2
 80030e4:	461a      	mov	r2, r3
 80030e6:	4603      	mov	r3, r0
 80030e8:	70fb      	strb	r3, [r7, #3]
 80030ea:	460b      	mov	r3, r1
 80030ec:	803b      	strh	r3, [r7, #0]
 80030ee:	4613      	mov	r3, r2
 80030f0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80030f2:	2300      	movs	r3, #0
 80030f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	da0f      	bge.n	800311e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030fe:	78fb      	ldrb	r3, [r7, #3]
 8003100:	f003 020f 	and.w	r2, r3, #15
 8003104:	4613      	mov	r3, r2
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	4413      	add	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	3338      	adds	r3, #56	; 0x38
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	4413      	add	r3, r2
 8003112:	3304      	adds	r3, #4
 8003114:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2201      	movs	r2, #1
 800311a:	705a      	strb	r2, [r3, #1]
 800311c:	e00f      	b.n	800313e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800311e:	78fb      	ldrb	r3, [r7, #3]
 8003120:	f003 020f 	and.w	r2, r3, #15
 8003124:	4613      	mov	r3, r2
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	4413      	add	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	4413      	add	r3, r2
 8003134:	3304      	adds	r3, #4
 8003136:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800313e:	78fb      	ldrb	r3, [r7, #3]
 8003140:	f003 030f 	and.w	r3, r3, #15
 8003144:	b2da      	uxtb	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800314a:	883a      	ldrh	r2, [r7, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	78ba      	ldrb	r2, [r7, #2]
 8003154:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	785b      	ldrb	r3, [r3, #1]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d004      	beq.n	8003168 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	b29a      	uxth	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003168:	78bb      	ldrb	r3, [r7, #2]
 800316a:	2b02      	cmp	r3, #2
 800316c:	d102      	bne.n	8003174 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800317a:	2b01      	cmp	r3, #1
 800317c:	d101      	bne.n	8003182 <HAL_PCD_EP_Open+0xaa>
 800317e:	2302      	movs	r3, #2
 8003180:	e00e      	b.n	80031a0 <HAL_PCD_EP_Open+0xc8>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68f9      	ldr	r1, [r7, #12]
 8003190:	4618      	mov	r0, r3
 8003192:	f002 fa9d 	bl	80056d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800319e:	7afb      	ldrb	r3, [r7, #11]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	460b      	mov	r3, r1
 80031b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	da0f      	bge.n	80031dc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031bc:	78fb      	ldrb	r3, [r7, #3]
 80031be:	f003 020f 	and.w	r2, r3, #15
 80031c2:	4613      	mov	r3, r2
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	4413      	add	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	3338      	adds	r3, #56	; 0x38
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	4413      	add	r3, r2
 80031d0:	3304      	adds	r3, #4
 80031d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2201      	movs	r2, #1
 80031d8:	705a      	strb	r2, [r3, #1]
 80031da:	e00f      	b.n	80031fc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031dc:	78fb      	ldrb	r3, [r7, #3]
 80031de:	f003 020f 	and.w	r2, r3, #15
 80031e2:	4613      	mov	r3, r2
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	4413      	add	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	4413      	add	r3, r2
 80031f2:	3304      	adds	r3, #4
 80031f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80031fc:	78fb      	ldrb	r3, [r7, #3]
 80031fe:	f003 030f 	and.w	r3, r3, #15
 8003202:	b2da      	uxtb	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800320e:	2b01      	cmp	r3, #1
 8003210:	d101      	bne.n	8003216 <HAL_PCD_EP_Close+0x6e>
 8003212:	2302      	movs	r3, #2
 8003214:	e00e      	b.n	8003234 <HAL_PCD_EP_Close+0x8c>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68f9      	ldr	r1, [r7, #12]
 8003224:	4618      	mov	r0, r3
 8003226:	f002 fadb 	bl	80057e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	607a      	str	r2, [r7, #4]
 8003246:	603b      	str	r3, [r7, #0]
 8003248:	460b      	mov	r3, r1
 800324a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800324c:	7afb      	ldrb	r3, [r7, #11]
 800324e:	f003 020f 	and.w	r2, r3, #15
 8003252:	4613      	mov	r3, r2
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	4413      	add	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	4413      	add	r3, r2
 8003262:	3304      	adds	r3, #4
 8003264:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2200      	movs	r2, #0
 8003276:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	2200      	movs	r2, #0
 800327c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800327e:	7afb      	ldrb	r3, [r7, #11]
 8003280:	f003 030f 	and.w	r3, r3, #15
 8003284:	b2da      	uxtb	r2, r3
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d102      	bne.n	8003298 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003298:	7afb      	ldrb	r3, [r7, #11]
 800329a:	f003 030f 	and.w	r3, r3, #15
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d109      	bne.n	80032b6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6818      	ldr	r0, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	461a      	mov	r2, r3
 80032ae:	6979      	ldr	r1, [r7, #20]
 80032b0:	f002 fdba 	bl	8005e28 <USB_EP0StartXfer>
 80032b4:	e008      	b.n	80032c8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6818      	ldr	r0, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	461a      	mov	r2, r3
 80032c2:	6979      	ldr	r1, [r7, #20]
 80032c4:	f002 fb68 	bl	8005998 <USB_EPStartXfer>
  }

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3718      	adds	r7, #24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
 80032da:	460b      	mov	r3, r1
 80032dc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80032de:	78fb      	ldrb	r3, [r7, #3]
 80032e0:	f003 020f 	and.w	r2, r3, #15
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	4613      	mov	r3, r2
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	4413      	add	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	440b      	add	r3, r1
 80032f0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80032f4:	681b      	ldr	r3, [r3, #0]
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b086      	sub	sp, #24
 8003306:	af00      	add	r7, sp, #0
 8003308:	60f8      	str	r0, [r7, #12]
 800330a:	607a      	str	r2, [r7, #4]
 800330c:	603b      	str	r3, [r7, #0]
 800330e:	460b      	mov	r3, r1
 8003310:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003312:	7afb      	ldrb	r3, [r7, #11]
 8003314:	f003 020f 	and.w	r2, r3, #15
 8003318:	4613      	mov	r3, r2
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	4413      	add	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	3338      	adds	r3, #56	; 0x38
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	4413      	add	r3, r2
 8003326:	3304      	adds	r3, #4
 8003328:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	2200      	movs	r2, #0
 800333a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	2201      	movs	r2, #1
 8003340:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003342:	7afb      	ldrb	r3, [r7, #11]
 8003344:	f003 030f 	and.w	r3, r3, #15
 8003348:	b2da      	uxtb	r2, r3
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d102      	bne.n	800335c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800335c:	7afb      	ldrb	r3, [r7, #11]
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	2b00      	cmp	r3, #0
 8003364:	d109      	bne.n	800337a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6818      	ldr	r0, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	b2db      	uxtb	r3, r3
 8003370:	461a      	mov	r2, r3
 8003372:	6979      	ldr	r1, [r7, #20]
 8003374:	f002 fd58 	bl	8005e28 <USB_EP0StartXfer>
 8003378:	e008      	b.n	800338c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6818      	ldr	r0, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	b2db      	uxtb	r3, r3
 8003384:	461a      	mov	r2, r3
 8003386:	6979      	ldr	r1, [r7, #20]
 8003388:	f002 fb06 	bl	8005998 <USB_EPStartXfer>
  }

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3718      	adds	r7, #24
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b084      	sub	sp, #16
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
 800339e:	460b      	mov	r3, r1
 80033a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80033a2:	78fb      	ldrb	r3, [r7, #3]
 80033a4:	f003 020f 	and.w	r2, r3, #15
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d901      	bls.n	80033b4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e050      	b.n	8003456 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	da0f      	bge.n	80033dc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033bc:	78fb      	ldrb	r3, [r7, #3]
 80033be:	f003 020f 	and.w	r2, r3, #15
 80033c2:	4613      	mov	r3, r2
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	4413      	add	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	3338      	adds	r3, #56	; 0x38
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	4413      	add	r3, r2
 80033d0:	3304      	adds	r3, #4
 80033d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2201      	movs	r2, #1
 80033d8:	705a      	strb	r2, [r3, #1]
 80033da:	e00d      	b.n	80033f8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80033dc:	78fa      	ldrb	r2, [r7, #3]
 80033de:	4613      	mov	r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	4413      	add	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	4413      	add	r3, r2
 80033ee:	3304      	adds	r3, #4
 80033f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2201      	movs	r2, #1
 80033fc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033fe:	78fb      	ldrb	r3, [r7, #3]
 8003400:	f003 030f 	and.w	r3, r3, #15
 8003404:	b2da      	uxtb	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003410:	2b01      	cmp	r3, #1
 8003412:	d101      	bne.n	8003418 <HAL_PCD_EP_SetStall+0x82>
 8003414:	2302      	movs	r3, #2
 8003416:	e01e      	b.n	8003456 <HAL_PCD_EP_SetStall+0xc0>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68f9      	ldr	r1, [r7, #12]
 8003426:	4618      	mov	r0, r3
 8003428:	f002 ff96 	bl	8006358 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800342c:	78fb      	ldrb	r3, [r7, #3]
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10a      	bne.n	800344c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6818      	ldr	r0, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	b2d9      	uxtb	r1, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003446:	461a      	mov	r2, r3
 8003448:	f003 f986 	bl	8006758 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b084      	sub	sp, #16
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
 8003466:	460b      	mov	r3, r1
 8003468:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800346a:	78fb      	ldrb	r3, [r7, #3]
 800346c:	f003 020f 	and.w	r2, r3, #15
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	429a      	cmp	r2, r3
 8003476:	d901      	bls.n	800347c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e042      	b.n	8003502 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800347c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003480:	2b00      	cmp	r3, #0
 8003482:	da0f      	bge.n	80034a4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003484:	78fb      	ldrb	r3, [r7, #3]
 8003486:	f003 020f 	and.w	r2, r3, #15
 800348a:	4613      	mov	r3, r2
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	4413      	add	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	3338      	adds	r3, #56	; 0x38
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	4413      	add	r3, r2
 8003498:	3304      	adds	r3, #4
 800349a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2201      	movs	r2, #1
 80034a0:	705a      	strb	r2, [r3, #1]
 80034a2:	e00f      	b.n	80034c4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034a4:	78fb      	ldrb	r3, [r7, #3]
 80034a6:	f003 020f 	and.w	r2, r3, #15
 80034aa:	4613      	mov	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	4413      	add	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	4413      	add	r3, r2
 80034ba:	3304      	adds	r3, #4
 80034bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034ca:	78fb      	ldrb	r3, [r7, #3]
 80034cc:	f003 030f 	and.w	r3, r3, #15
 80034d0:	b2da      	uxtb	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d101      	bne.n	80034e4 <HAL_PCD_EP_ClrStall+0x86>
 80034e0:	2302      	movs	r3, #2
 80034e2:	e00e      	b.n	8003502 <HAL_PCD_EP_ClrStall+0xa4>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68f9      	ldr	r1, [r7, #12]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f002 ff9e 	bl	8006434 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b084      	sub	sp, #16
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
 8003512:	460b      	mov	r3, r1
 8003514:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003516:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800351a:	2b00      	cmp	r3, #0
 800351c:	da0c      	bge.n	8003538 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800351e:	78fb      	ldrb	r3, [r7, #3]
 8003520:	f003 020f 	and.w	r2, r3, #15
 8003524:	4613      	mov	r3, r2
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	4413      	add	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	3338      	adds	r3, #56	; 0x38
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	4413      	add	r3, r2
 8003532:	3304      	adds	r3, #4
 8003534:	60fb      	str	r3, [r7, #12]
 8003536:	e00c      	b.n	8003552 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003538:	78fb      	ldrb	r3, [r7, #3]
 800353a:	f003 020f 	and.w	r2, r3, #15
 800353e:	4613      	mov	r3, r2
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	4413      	add	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	4413      	add	r3, r2
 800354e:	3304      	adds	r3, #4
 8003550:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68f9      	ldr	r1, [r7, #12]
 8003558:	4618      	mov	r0, r3
 800355a:	f002 fdbd 	bl	80060d8 <USB_EPStopXfer>
 800355e:	4603      	mov	r3, r0
 8003560:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003562:	7afb      	ldrb	r3, [r7, #11]
}
 8003564:	4618      	mov	r0, r3
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b08a      	sub	sp, #40	; 0x28
 8003570:	af02      	add	r7, sp, #8
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	4613      	mov	r3, r2
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	4413      	add	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	3338      	adds	r3, #56	; 0x38
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	4413      	add	r3, r2
 8003590:	3304      	adds	r3, #4
 8003592:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6a1a      	ldr	r2, [r3, #32]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	429a      	cmp	r2, r3
 800359e:	d901      	bls.n	80035a4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e06c      	b.n	800367e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	699a      	ldr	r2, [r3, #24]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	69fa      	ldr	r2, [r7, #28]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d902      	bls.n	80035c0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	3303      	adds	r3, #3
 80035c4:	089b      	lsrs	r3, r3, #2
 80035c6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035c8:	e02b      	b.n	8003622 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	699a      	ldr	r2, [r3, #24]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	69fa      	ldr	r2, [r7, #28]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d902      	bls.n	80035e6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	3303      	adds	r3, #3
 80035ea:	089b      	lsrs	r3, r3, #2
 80035ec:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6919      	ldr	r1, [r3, #16]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	9300      	str	r3, [sp, #0]
 8003602:	4603      	mov	r3, r0
 8003604:	6978      	ldr	r0, [r7, #20]
 8003606:	f002 fe11 	bl	800622c <USB_WritePacket>

    ep->xfer_buff  += len;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	691a      	ldr	r2, [r3, #16]
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	441a      	add	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6a1a      	ldr	r2, [r3, #32]
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	441a      	add	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	015a      	lsls	r2, r3, #5
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	4413      	add	r3, r2
 800362a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	429a      	cmp	r2, r3
 8003636:	d809      	bhi.n	800364c <PCD_WriteEmptyTxFifo+0xe0>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6a1a      	ldr	r2, [r3, #32]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003640:	429a      	cmp	r2, r3
 8003642:	d203      	bcs.n	800364c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1be      	bne.n	80035ca <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	699a      	ldr	r2, [r3, #24]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	429a      	cmp	r2, r3
 8003656:	d811      	bhi.n	800367c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	f003 030f 	and.w	r3, r3, #15
 800365e:	2201      	movs	r2, #1
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800366c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	43db      	mvns	r3, r3
 8003672:	6939      	ldr	r1, [r7, #16]
 8003674:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003678:	4013      	ands	r3, r2
 800367a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3720      	adds	r7, #32
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
	...

08003688 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b088      	sub	sp, #32
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	333c      	adds	r3, #60	; 0x3c
 80036a0:	3304      	adds	r3, #4
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	015a      	lsls	r2, r3, #5
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	4413      	add	r3, r2
 80036ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d17b      	bne.n	80037b6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	f003 0308 	and.w	r3, r3, #8
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d015      	beq.n	80036f4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	4a61      	ldr	r2, [pc, #388]	; (8003850 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	f240 80b9 	bls.w	8003844 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f000 80b3 	beq.w	8003844 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	015a      	lsls	r2, r3, #5
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	4413      	add	r3, r2
 80036e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ea:	461a      	mov	r2, r3
 80036ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036f0:	6093      	str	r3, [r2, #8]
 80036f2:	e0a7      	b.n	8003844 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	f003 0320 	and.w	r3, r3, #32
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d009      	beq.n	8003712 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	015a      	lsls	r2, r3, #5
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	4413      	add	r3, r2
 8003706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800370a:	461a      	mov	r2, r3
 800370c:	2320      	movs	r3, #32
 800370e:	6093      	str	r3, [r2, #8]
 8003710:	e098      	b.n	8003844 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003718:	2b00      	cmp	r3, #0
 800371a:	f040 8093 	bne.w	8003844 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	4a4b      	ldr	r2, [pc, #300]	; (8003850 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d90f      	bls.n	8003746 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00a      	beq.n	8003746 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	015a      	lsls	r2, r3, #5
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	4413      	add	r3, r2
 8003738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800373c:	461a      	mov	r2, r3
 800373e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003742:	6093      	str	r3, [r2, #8]
 8003744:	e07e      	b.n	8003844 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	4613      	mov	r3, r2
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	4413      	add	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	4413      	add	r3, r2
 8003758:	3304      	adds	r3, #4
 800375a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	69da      	ldr	r2, [r3, #28]
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	0159      	lsls	r1, r3, #5
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	440b      	add	r3, r1
 8003768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003772:	1ad2      	subs	r2, r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d114      	bne.n	80037a8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d109      	bne.n	800379a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6818      	ldr	r0, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003790:	461a      	mov	r2, r3
 8003792:	2101      	movs	r1, #1
 8003794:	f002 ffe0 	bl	8006758 <USB_EP0_OutStart>
 8003798:	e006      	b.n	80037a8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	691a      	ldr	r2, [r3, #16]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	441a      	add	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	4619      	mov	r1, r3
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f005 fa6e 	bl	8008c90 <HAL_PCD_DataOutStageCallback>
 80037b4:	e046      	b.n	8003844 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	4a26      	ldr	r2, [pc, #152]	; (8003854 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d124      	bne.n	8003808 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00a      	beq.n	80037de <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	015a      	lsls	r2, r3, #5
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	4413      	add	r3, r2
 80037d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d4:	461a      	mov	r2, r3
 80037d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037da:	6093      	str	r3, [r2, #8]
 80037dc:	e032      	b.n	8003844 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	f003 0320 	and.w	r3, r3, #32
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d008      	beq.n	80037fa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	015a      	lsls	r2, r3, #5
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	4413      	add	r3, r2
 80037f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037f4:	461a      	mov	r2, r3
 80037f6:	2320      	movs	r3, #32
 80037f8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	4619      	mov	r1, r3
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f005 fa45 	bl	8008c90 <HAL_PCD_DataOutStageCallback>
 8003806:	e01d      	b.n	8003844 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d114      	bne.n	8003838 <PCD_EP_OutXfrComplete_int+0x1b0>
 800380e:	6879      	ldr	r1, [r7, #4]
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	4613      	mov	r3, r2
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	4413      	add	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	440b      	add	r3, r1
 800381c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d108      	bne.n	8003838 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6818      	ldr	r0, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003830:	461a      	mov	r2, r3
 8003832:	2100      	movs	r1, #0
 8003834:	f002 ff90 	bl	8006758 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	b2db      	uxtb	r3, r3
 800383c:	4619      	mov	r1, r3
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f005 fa26 	bl	8008c90 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3720      	adds	r7, #32
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	4f54300a 	.word	0x4f54300a
 8003854:	4f54310a 	.word	0x4f54310a

08003858 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	333c      	adds	r3, #60	; 0x3c
 8003870:	3304      	adds	r3, #4
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	015a      	lsls	r2, r3, #5
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	4413      	add	r3, r2
 800387e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	4a15      	ldr	r2, [pc, #84]	; (80038e0 <PCD_EP_OutSetupPacket_int+0x88>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d90e      	bls.n	80038ac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003894:	2b00      	cmp	r3, #0
 8003896:	d009      	beq.n	80038ac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	015a      	lsls	r2, r3, #5
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	4413      	add	r3, r2
 80038a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038a4:	461a      	mov	r2, r3
 80038a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038aa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f005 f9dd 	bl	8008c6c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	4a0a      	ldr	r2, [pc, #40]	; (80038e0 <PCD_EP_OutSetupPacket_int+0x88>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d90c      	bls.n	80038d4 <PCD_EP_OutSetupPacket_int+0x7c>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d108      	bne.n	80038d4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6818      	ldr	r0, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80038cc:	461a      	mov	r2, r3
 80038ce:	2101      	movs	r1, #1
 80038d0:	f002 ff42 	bl	8006758 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	4f54300a 	.word	0x4f54300a

080038e4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	460b      	mov	r3, r1
 80038ee:	70fb      	strb	r3, [r7, #3]
 80038f0:	4613      	mov	r3, r2
 80038f2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80038fc:	78fb      	ldrb	r3, [r7, #3]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d107      	bne.n	8003912 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003902:	883b      	ldrh	r3, [r7, #0]
 8003904:	0419      	lsls	r1, r3, #16
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68ba      	ldr	r2, [r7, #8]
 800390c:	430a      	orrs	r2, r1
 800390e:	629a      	str	r2, [r3, #40]	; 0x28
 8003910:	e028      	b.n	8003964 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003918:	0c1b      	lsrs	r3, r3, #16
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	4413      	add	r3, r2
 800391e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003920:	2300      	movs	r3, #0
 8003922:	73fb      	strb	r3, [r7, #15]
 8003924:	e00d      	b.n	8003942 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	7bfb      	ldrb	r3, [r7, #15]
 800392c:	3340      	adds	r3, #64	; 0x40
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4413      	add	r3, r2
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	0c1b      	lsrs	r3, r3, #16
 8003936:	68ba      	ldr	r2, [r7, #8]
 8003938:	4413      	add	r3, r2
 800393a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800393c:	7bfb      	ldrb	r3, [r7, #15]
 800393e:	3301      	adds	r3, #1
 8003940:	73fb      	strb	r3, [r7, #15]
 8003942:	7bfa      	ldrb	r2, [r7, #15]
 8003944:	78fb      	ldrb	r3, [r7, #3]
 8003946:	3b01      	subs	r3, #1
 8003948:	429a      	cmp	r2, r3
 800394a:	d3ec      	bcc.n	8003926 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800394c:	883b      	ldrh	r3, [r7, #0]
 800394e:	0418      	lsls	r0, r3, #16
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6819      	ldr	r1, [r3, #0]
 8003954:	78fb      	ldrb	r3, [r7, #3]
 8003956:	3b01      	subs	r3, #1
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	4302      	orrs	r2, r0
 800395c:	3340      	adds	r3, #64	; 0x40
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	440b      	add	r3, r1
 8003962:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3714      	adds	r7, #20
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003972:	b480      	push	{r7}
 8003974:	b083      	sub	sp, #12
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
 800397a:	460b      	mov	r3, r1
 800397c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	887a      	ldrh	r2, [r7, #2]
 8003984:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	460b      	mov	r3, r1
 800399e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e267      	b.n	8003e8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d075      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039ca:	4b88      	ldr	r3, [pc, #544]	; (8003bec <HAL_RCC_OscConfig+0x240>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 030c 	and.w	r3, r3, #12
 80039d2:	2b04      	cmp	r3, #4
 80039d4:	d00c      	beq.n	80039f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039d6:	4b85      	ldr	r3, [pc, #532]	; (8003bec <HAL_RCC_OscConfig+0x240>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039de:	2b08      	cmp	r3, #8
 80039e0:	d112      	bne.n	8003a08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039e2:	4b82      	ldr	r3, [pc, #520]	; (8003bec <HAL_RCC_OscConfig+0x240>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039ee:	d10b      	bne.n	8003a08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039f0:	4b7e      	ldr	r3, [pc, #504]	; (8003bec <HAL_RCC_OscConfig+0x240>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d05b      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x108>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d157      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e242      	b.n	8003e8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a10:	d106      	bne.n	8003a20 <HAL_RCC_OscConfig+0x74>
 8003a12:	4b76      	ldr	r3, [pc, #472]	; (8003bec <HAL_RCC_OscConfig+0x240>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a75      	ldr	r2, [pc, #468]	; (8003bec <HAL_RCC_OscConfig+0x240>)
 8003a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a1c:	6013      	str	r3, [r2, #0]
 8003a1e:	e01d      	b.n	8003a5c <HAL_RCC_OscConfig+0xb0>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a28:	d10c      	bne.n	8003a44 <HAL_RCC_OscConfig+0x98>
 8003a2a:	4b70      	ldr	r3, [pc, #448]	; (8003bec <HAL_RCC_OscConfig+0x240>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a6f      	ldr	r2, [pc, #444]	; (8003bec <HAL_RCC_OscConfig+0x240>)
 8003a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a34:	6013      	str	r3, [r2, #0]
 8003a36:	4b6d      	ldr	r3, [pc, #436]	; (8003bec <HAL_RCC_OscConfig+0x240>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a6c      	ldr	r2, [pc, #432]	; (8003bec <HAL_RCC_OscConfig+0x240>)
 8003a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a40:	6013      	str	r3, [r2, #0]
 8003a42:	e00b      	b.n	8003a5c <HAL_RCC_OscConfig+0xb0>
 8003a44:	4b69      	ldr	r3, [pc, #420]	; (8003bec <HAL_RCC_OscConfig+0x240>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a68      	ldr	r2, [pc, #416]	; (8003bec <HAL_RCC_OscConfig+0x240>)
 8003a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a4e:	6013      	str	r3, [r2, #0]
 8003a50:	4b66      	ldr	r3, [pc, #408]	; (8003bec <HAL_RCC_OscConfig+0x240>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a65      	ldr	r2, [pc, #404]	; (8003bec <HAL_RCC_OscConfig+0x240>)
 8003a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d013      	beq.n	8003a8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a64:	f7fd fe04 	bl	8001670 <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a6a:	e008      	b.n	8003a7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a6c:	f7fd fe00 	bl	8001670 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b64      	cmp	r3, #100	; 0x64
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e207      	b.n	8003e8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a7e:	4b5b      	ldr	r3, [pc, #364]	; (8003bec <HAL_RCC_OscConfig+0x240>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d0f0      	beq.n	8003a6c <HAL_RCC_OscConfig+0xc0>
 8003a8a:	e014      	b.n	8003ab6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a8c:	f7fd fdf0 	bl	8001670 <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a92:	e008      	b.n	8003aa6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a94:	f7fd fdec 	bl	8001670 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b64      	cmp	r3, #100	; 0x64
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e1f3      	b.n	8003e8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aa6:	4b51      	ldr	r3, [pc, #324]	; (8003bec <HAL_RCC_OscConfig+0x240>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1f0      	bne.n	8003a94 <HAL_RCC_OscConfig+0xe8>
 8003ab2:	e000      	b.n	8003ab6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ab4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d063      	beq.n	8003b8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ac2:	4b4a      	ldr	r3, [pc, #296]	; (8003bec <HAL_RCC_OscConfig+0x240>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f003 030c 	and.w	r3, r3, #12
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00b      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ace:	4b47      	ldr	r3, [pc, #284]	; (8003bec <HAL_RCC_OscConfig+0x240>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ad6:	2b08      	cmp	r3, #8
 8003ad8:	d11c      	bne.n	8003b14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ada:	4b44      	ldr	r3, [pc, #272]	; (8003bec <HAL_RCC_OscConfig+0x240>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d116      	bne.n	8003b14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ae6:	4b41      	ldr	r3, [pc, #260]	; (8003bec <HAL_RCC_OscConfig+0x240>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d005      	beq.n	8003afe <HAL_RCC_OscConfig+0x152>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d001      	beq.n	8003afe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e1c7      	b.n	8003e8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003afe:	4b3b      	ldr	r3, [pc, #236]	; (8003bec <HAL_RCC_OscConfig+0x240>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	4937      	ldr	r1, [pc, #220]	; (8003bec <HAL_RCC_OscConfig+0x240>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b12:	e03a      	b.n	8003b8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d020      	beq.n	8003b5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b1c:	4b34      	ldr	r3, [pc, #208]	; (8003bf0 <HAL_RCC_OscConfig+0x244>)
 8003b1e:	2201      	movs	r2, #1
 8003b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b22:	f7fd fda5 	bl	8001670 <HAL_GetTick>
 8003b26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b28:	e008      	b.n	8003b3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b2a:	f7fd fda1 	bl	8001670 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d901      	bls.n	8003b3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e1a8      	b.n	8003e8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b3c:	4b2b      	ldr	r3, [pc, #172]	; (8003bec <HAL_RCC_OscConfig+0x240>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d0f0      	beq.n	8003b2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b48:	4b28      	ldr	r3, [pc, #160]	; (8003bec <HAL_RCC_OscConfig+0x240>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	00db      	lsls	r3, r3, #3
 8003b56:	4925      	ldr	r1, [pc, #148]	; (8003bec <HAL_RCC_OscConfig+0x240>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	600b      	str	r3, [r1, #0]
 8003b5c:	e015      	b.n	8003b8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b5e:	4b24      	ldr	r3, [pc, #144]	; (8003bf0 <HAL_RCC_OscConfig+0x244>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b64:	f7fd fd84 	bl	8001670 <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b6c:	f7fd fd80 	bl	8001670 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e187      	b.n	8003e8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b7e:	4b1b      	ldr	r3, [pc, #108]	; (8003bec <HAL_RCC_OscConfig+0x240>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1f0      	bne.n	8003b6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0308 	and.w	r3, r3, #8
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d036      	beq.n	8003c04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d016      	beq.n	8003bcc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b9e:	4b15      	ldr	r3, [pc, #84]	; (8003bf4 <HAL_RCC_OscConfig+0x248>)
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba4:	f7fd fd64 	bl	8001670 <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bac:	f7fd fd60 	bl	8001670 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e167      	b.n	8003e8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bbe:	4b0b      	ldr	r3, [pc, #44]	; (8003bec <HAL_RCC_OscConfig+0x240>)
 8003bc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d0f0      	beq.n	8003bac <HAL_RCC_OscConfig+0x200>
 8003bca:	e01b      	b.n	8003c04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bcc:	4b09      	ldr	r3, [pc, #36]	; (8003bf4 <HAL_RCC_OscConfig+0x248>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bd2:	f7fd fd4d 	bl	8001670 <HAL_GetTick>
 8003bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bd8:	e00e      	b.n	8003bf8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bda:	f7fd fd49 	bl	8001670 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d907      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e150      	b.n	8003e8e <HAL_RCC_OscConfig+0x4e2>
 8003bec:	40023800 	.word	0x40023800
 8003bf0:	42470000 	.word	0x42470000
 8003bf4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bf8:	4b88      	ldr	r3, [pc, #544]	; (8003e1c <HAL_RCC_OscConfig+0x470>)
 8003bfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1ea      	bne.n	8003bda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 8097 	beq.w	8003d40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c12:	2300      	movs	r3, #0
 8003c14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c16:	4b81      	ldr	r3, [pc, #516]	; (8003e1c <HAL_RCC_OscConfig+0x470>)
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10f      	bne.n	8003c42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c22:	2300      	movs	r3, #0
 8003c24:	60bb      	str	r3, [r7, #8]
 8003c26:	4b7d      	ldr	r3, [pc, #500]	; (8003e1c <HAL_RCC_OscConfig+0x470>)
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	4a7c      	ldr	r2, [pc, #496]	; (8003e1c <HAL_RCC_OscConfig+0x470>)
 8003c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c30:	6413      	str	r3, [r2, #64]	; 0x40
 8003c32:	4b7a      	ldr	r3, [pc, #488]	; (8003e1c <HAL_RCC_OscConfig+0x470>)
 8003c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c3a:	60bb      	str	r3, [r7, #8]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c42:	4b77      	ldr	r3, [pc, #476]	; (8003e20 <HAL_RCC_OscConfig+0x474>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d118      	bne.n	8003c80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c4e:	4b74      	ldr	r3, [pc, #464]	; (8003e20 <HAL_RCC_OscConfig+0x474>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a73      	ldr	r2, [pc, #460]	; (8003e20 <HAL_RCC_OscConfig+0x474>)
 8003c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c5a:	f7fd fd09 	bl	8001670 <HAL_GetTick>
 8003c5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c60:	e008      	b.n	8003c74 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c62:	f7fd fd05 	bl	8001670 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e10c      	b.n	8003e8e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c74:	4b6a      	ldr	r3, [pc, #424]	; (8003e20 <HAL_RCC_OscConfig+0x474>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d0f0      	beq.n	8003c62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d106      	bne.n	8003c96 <HAL_RCC_OscConfig+0x2ea>
 8003c88:	4b64      	ldr	r3, [pc, #400]	; (8003e1c <HAL_RCC_OscConfig+0x470>)
 8003c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8c:	4a63      	ldr	r2, [pc, #396]	; (8003e1c <HAL_RCC_OscConfig+0x470>)
 8003c8e:	f043 0301 	orr.w	r3, r3, #1
 8003c92:	6713      	str	r3, [r2, #112]	; 0x70
 8003c94:	e01c      	b.n	8003cd0 <HAL_RCC_OscConfig+0x324>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	2b05      	cmp	r3, #5
 8003c9c:	d10c      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x30c>
 8003c9e:	4b5f      	ldr	r3, [pc, #380]	; (8003e1c <HAL_RCC_OscConfig+0x470>)
 8003ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca2:	4a5e      	ldr	r2, [pc, #376]	; (8003e1c <HAL_RCC_OscConfig+0x470>)
 8003ca4:	f043 0304 	orr.w	r3, r3, #4
 8003ca8:	6713      	str	r3, [r2, #112]	; 0x70
 8003caa:	4b5c      	ldr	r3, [pc, #368]	; (8003e1c <HAL_RCC_OscConfig+0x470>)
 8003cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cae:	4a5b      	ldr	r2, [pc, #364]	; (8003e1c <HAL_RCC_OscConfig+0x470>)
 8003cb0:	f043 0301 	orr.w	r3, r3, #1
 8003cb4:	6713      	str	r3, [r2, #112]	; 0x70
 8003cb6:	e00b      	b.n	8003cd0 <HAL_RCC_OscConfig+0x324>
 8003cb8:	4b58      	ldr	r3, [pc, #352]	; (8003e1c <HAL_RCC_OscConfig+0x470>)
 8003cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cbc:	4a57      	ldr	r2, [pc, #348]	; (8003e1c <HAL_RCC_OscConfig+0x470>)
 8003cbe:	f023 0301 	bic.w	r3, r3, #1
 8003cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8003cc4:	4b55      	ldr	r3, [pc, #340]	; (8003e1c <HAL_RCC_OscConfig+0x470>)
 8003cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc8:	4a54      	ldr	r2, [pc, #336]	; (8003e1c <HAL_RCC_OscConfig+0x470>)
 8003cca:	f023 0304 	bic.w	r3, r3, #4
 8003cce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d015      	beq.n	8003d04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd8:	f7fd fcca 	bl	8001670 <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cde:	e00a      	b.n	8003cf6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ce0:	f7fd fcc6 	bl	8001670 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e0cb      	b.n	8003e8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cf6:	4b49      	ldr	r3, [pc, #292]	; (8003e1c <HAL_RCC_OscConfig+0x470>)
 8003cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d0ee      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x334>
 8003d02:	e014      	b.n	8003d2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d04:	f7fd fcb4 	bl	8001670 <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d0a:	e00a      	b.n	8003d22 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d0c:	f7fd fcb0 	bl	8001670 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e0b5      	b.n	8003e8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d22:	4b3e      	ldr	r3, [pc, #248]	; (8003e1c <HAL_RCC_OscConfig+0x470>)
 8003d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1ee      	bne.n	8003d0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d2e:	7dfb      	ldrb	r3, [r7, #23]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d105      	bne.n	8003d40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d34:	4b39      	ldr	r3, [pc, #228]	; (8003e1c <HAL_RCC_OscConfig+0x470>)
 8003d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d38:	4a38      	ldr	r2, [pc, #224]	; (8003e1c <HAL_RCC_OscConfig+0x470>)
 8003d3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f000 80a1 	beq.w	8003e8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d4a:	4b34      	ldr	r3, [pc, #208]	; (8003e1c <HAL_RCC_OscConfig+0x470>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f003 030c 	and.w	r3, r3, #12
 8003d52:	2b08      	cmp	r3, #8
 8003d54:	d05c      	beq.n	8003e10 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d141      	bne.n	8003de2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d5e:	4b31      	ldr	r3, [pc, #196]	; (8003e24 <HAL_RCC_OscConfig+0x478>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d64:	f7fd fc84 	bl	8001670 <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d6c:	f7fd fc80 	bl	8001670 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e087      	b.n	8003e8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d7e:	4b27      	ldr	r3, [pc, #156]	; (8003e1c <HAL_RCC_OscConfig+0x470>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1f0      	bne.n	8003d6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	69da      	ldr	r2, [r3, #28]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	431a      	orrs	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d98:	019b      	lsls	r3, r3, #6
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da0:	085b      	lsrs	r3, r3, #1
 8003da2:	3b01      	subs	r3, #1
 8003da4:	041b      	lsls	r3, r3, #16
 8003da6:	431a      	orrs	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dac:	061b      	lsls	r3, r3, #24
 8003dae:	491b      	ldr	r1, [pc, #108]	; (8003e1c <HAL_RCC_OscConfig+0x470>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003db4:	4b1b      	ldr	r3, [pc, #108]	; (8003e24 <HAL_RCC_OscConfig+0x478>)
 8003db6:	2201      	movs	r2, #1
 8003db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dba:	f7fd fc59 	bl	8001670 <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dc0:	e008      	b.n	8003dd4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dc2:	f7fd fc55 	bl	8001670 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e05c      	b.n	8003e8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dd4:	4b11      	ldr	r3, [pc, #68]	; (8003e1c <HAL_RCC_OscConfig+0x470>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d0f0      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x416>
 8003de0:	e054      	b.n	8003e8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003de2:	4b10      	ldr	r3, [pc, #64]	; (8003e24 <HAL_RCC_OscConfig+0x478>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de8:	f7fd fc42 	bl	8001670 <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003df0:	f7fd fc3e 	bl	8001670 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e045      	b.n	8003e8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e02:	4b06      	ldr	r3, [pc, #24]	; (8003e1c <HAL_RCC_OscConfig+0x470>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1f0      	bne.n	8003df0 <HAL_RCC_OscConfig+0x444>
 8003e0e:	e03d      	b.n	8003e8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d107      	bne.n	8003e28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e038      	b.n	8003e8e <HAL_RCC_OscConfig+0x4e2>
 8003e1c:	40023800 	.word	0x40023800
 8003e20:	40007000 	.word	0x40007000
 8003e24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e28:	4b1b      	ldr	r3, [pc, #108]	; (8003e98 <HAL_RCC_OscConfig+0x4ec>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d028      	beq.n	8003e88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d121      	bne.n	8003e88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d11a      	bne.n	8003e88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e58:	4013      	ands	r3, r2
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d111      	bne.n	8003e88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6e:	085b      	lsrs	r3, r3, #1
 8003e70:	3b01      	subs	r3, #1
 8003e72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d107      	bne.n	8003e88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d001      	beq.n	8003e8c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e000      	b.n	8003e8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3718      	adds	r7, #24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	40023800 	.word	0x40023800

08003e9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d101      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e0cc      	b.n	800404a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003eb0:	4b68      	ldr	r3, [pc, #416]	; (8004054 <HAL_RCC_ClockConfig+0x1b8>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d90c      	bls.n	8003ed8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ebe:	4b65      	ldr	r3, [pc, #404]	; (8004054 <HAL_RCC_ClockConfig+0x1b8>)
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	b2d2      	uxtb	r2, r2
 8003ec4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ec6:	4b63      	ldr	r3, [pc, #396]	; (8004054 <HAL_RCC_ClockConfig+0x1b8>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0307 	and.w	r3, r3, #7
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d001      	beq.n	8003ed8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e0b8      	b.n	800404a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d020      	beq.n	8003f26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0304 	and.w	r3, r3, #4
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d005      	beq.n	8003efc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ef0:	4b59      	ldr	r3, [pc, #356]	; (8004058 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	4a58      	ldr	r2, [pc, #352]	; (8004058 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003efa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0308 	and.w	r3, r3, #8
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d005      	beq.n	8003f14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f08:	4b53      	ldr	r3, [pc, #332]	; (8004058 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	4a52      	ldr	r2, [pc, #328]	; (8004058 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f14:	4b50      	ldr	r3, [pc, #320]	; (8004058 <HAL_RCC_ClockConfig+0x1bc>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	494d      	ldr	r1, [pc, #308]	; (8004058 <HAL_RCC_ClockConfig+0x1bc>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d044      	beq.n	8003fbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d107      	bne.n	8003f4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f3a:	4b47      	ldr	r3, [pc, #284]	; (8004058 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d119      	bne.n	8003f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e07f      	b.n	800404a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d003      	beq.n	8003f5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f56:	2b03      	cmp	r3, #3
 8003f58:	d107      	bne.n	8003f6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f5a:	4b3f      	ldr	r3, [pc, #252]	; (8004058 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d109      	bne.n	8003f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e06f      	b.n	800404a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f6a:	4b3b      	ldr	r3, [pc, #236]	; (8004058 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e067      	b.n	800404a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f7a:	4b37      	ldr	r3, [pc, #220]	; (8004058 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f023 0203 	bic.w	r2, r3, #3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	4934      	ldr	r1, [pc, #208]	; (8004058 <HAL_RCC_ClockConfig+0x1bc>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f8c:	f7fd fb70 	bl	8001670 <HAL_GetTick>
 8003f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f92:	e00a      	b.n	8003faa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f94:	f7fd fb6c 	bl	8001670 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e04f      	b.n	800404a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003faa:	4b2b      	ldr	r3, [pc, #172]	; (8004058 <HAL_RCC_ClockConfig+0x1bc>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f003 020c 	and.w	r2, r3, #12
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d1eb      	bne.n	8003f94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fbc:	4b25      	ldr	r3, [pc, #148]	; (8004054 <HAL_RCC_ClockConfig+0x1b8>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0307 	and.w	r3, r3, #7
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d20c      	bcs.n	8003fe4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fca:	4b22      	ldr	r3, [pc, #136]	; (8004054 <HAL_RCC_ClockConfig+0x1b8>)
 8003fcc:	683a      	ldr	r2, [r7, #0]
 8003fce:	b2d2      	uxtb	r2, r2
 8003fd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fd2:	4b20      	ldr	r3, [pc, #128]	; (8004054 <HAL_RCC_ClockConfig+0x1b8>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0307 	and.w	r3, r3, #7
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d001      	beq.n	8003fe4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e032      	b.n	800404a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0304 	and.w	r3, r3, #4
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d008      	beq.n	8004002 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ff0:	4b19      	ldr	r3, [pc, #100]	; (8004058 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	4916      	ldr	r1, [pc, #88]	; (8004058 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0308 	and.w	r3, r3, #8
 800400a:	2b00      	cmp	r3, #0
 800400c:	d009      	beq.n	8004022 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800400e:	4b12      	ldr	r3, [pc, #72]	; (8004058 <HAL_RCC_ClockConfig+0x1bc>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	490e      	ldr	r1, [pc, #56]	; (8004058 <HAL_RCC_ClockConfig+0x1bc>)
 800401e:	4313      	orrs	r3, r2
 8004020:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004022:	f000 f821 	bl	8004068 <HAL_RCC_GetSysClockFreq>
 8004026:	4602      	mov	r2, r0
 8004028:	4b0b      	ldr	r3, [pc, #44]	; (8004058 <HAL_RCC_ClockConfig+0x1bc>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	091b      	lsrs	r3, r3, #4
 800402e:	f003 030f 	and.w	r3, r3, #15
 8004032:	490a      	ldr	r1, [pc, #40]	; (800405c <HAL_RCC_ClockConfig+0x1c0>)
 8004034:	5ccb      	ldrb	r3, [r1, r3]
 8004036:	fa22 f303 	lsr.w	r3, r2, r3
 800403a:	4a09      	ldr	r2, [pc, #36]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 800403c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800403e:	4b09      	ldr	r3, [pc, #36]	; (8004064 <HAL_RCC_ClockConfig+0x1c8>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4618      	mov	r0, r3
 8004044:	f7fc ffd4 	bl	8000ff0 <HAL_InitTick>

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	40023c00 	.word	0x40023c00
 8004058:	40023800 	.word	0x40023800
 800405c:	080092bc 	.word	0x080092bc
 8004060:	20000020 	.word	0x20000020
 8004064:	20000024 	.word	0x20000024

08004068 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800406c:	b094      	sub	sp, #80	; 0x50
 800406e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004070:	2300      	movs	r3, #0
 8004072:	647b      	str	r3, [r7, #68]	; 0x44
 8004074:	2300      	movs	r3, #0
 8004076:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004078:	2300      	movs	r3, #0
 800407a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800407c:	2300      	movs	r3, #0
 800407e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004080:	4b79      	ldr	r3, [pc, #484]	; (8004268 <HAL_RCC_GetSysClockFreq+0x200>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f003 030c 	and.w	r3, r3, #12
 8004088:	2b08      	cmp	r3, #8
 800408a:	d00d      	beq.n	80040a8 <HAL_RCC_GetSysClockFreq+0x40>
 800408c:	2b08      	cmp	r3, #8
 800408e:	f200 80e1 	bhi.w	8004254 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004092:	2b00      	cmp	r3, #0
 8004094:	d002      	beq.n	800409c <HAL_RCC_GetSysClockFreq+0x34>
 8004096:	2b04      	cmp	r3, #4
 8004098:	d003      	beq.n	80040a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800409a:	e0db      	b.n	8004254 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800409c:	4b73      	ldr	r3, [pc, #460]	; (800426c <HAL_RCC_GetSysClockFreq+0x204>)
 800409e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80040a0:	e0db      	b.n	800425a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040a2:	4b73      	ldr	r3, [pc, #460]	; (8004270 <HAL_RCC_GetSysClockFreq+0x208>)
 80040a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040a6:	e0d8      	b.n	800425a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040a8:	4b6f      	ldr	r3, [pc, #444]	; (8004268 <HAL_RCC_GetSysClockFreq+0x200>)
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040b2:	4b6d      	ldr	r3, [pc, #436]	; (8004268 <HAL_RCC_GetSysClockFreq+0x200>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d063      	beq.n	8004186 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040be:	4b6a      	ldr	r3, [pc, #424]	; (8004268 <HAL_RCC_GetSysClockFreq+0x200>)
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	099b      	lsrs	r3, r3, #6
 80040c4:	2200      	movs	r2, #0
 80040c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80040c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80040ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040d0:	633b      	str	r3, [r7, #48]	; 0x30
 80040d2:	2300      	movs	r3, #0
 80040d4:	637b      	str	r3, [r7, #52]	; 0x34
 80040d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80040da:	4622      	mov	r2, r4
 80040dc:	462b      	mov	r3, r5
 80040de:	f04f 0000 	mov.w	r0, #0
 80040e2:	f04f 0100 	mov.w	r1, #0
 80040e6:	0159      	lsls	r1, r3, #5
 80040e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040ec:	0150      	lsls	r0, r2, #5
 80040ee:	4602      	mov	r2, r0
 80040f0:	460b      	mov	r3, r1
 80040f2:	4621      	mov	r1, r4
 80040f4:	1a51      	subs	r1, r2, r1
 80040f6:	6139      	str	r1, [r7, #16]
 80040f8:	4629      	mov	r1, r5
 80040fa:	eb63 0301 	sbc.w	r3, r3, r1
 80040fe:	617b      	str	r3, [r7, #20]
 8004100:	f04f 0200 	mov.w	r2, #0
 8004104:	f04f 0300 	mov.w	r3, #0
 8004108:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800410c:	4659      	mov	r1, fp
 800410e:	018b      	lsls	r3, r1, #6
 8004110:	4651      	mov	r1, sl
 8004112:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004116:	4651      	mov	r1, sl
 8004118:	018a      	lsls	r2, r1, #6
 800411a:	4651      	mov	r1, sl
 800411c:	ebb2 0801 	subs.w	r8, r2, r1
 8004120:	4659      	mov	r1, fp
 8004122:	eb63 0901 	sbc.w	r9, r3, r1
 8004126:	f04f 0200 	mov.w	r2, #0
 800412a:	f04f 0300 	mov.w	r3, #0
 800412e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004132:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004136:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800413a:	4690      	mov	r8, r2
 800413c:	4699      	mov	r9, r3
 800413e:	4623      	mov	r3, r4
 8004140:	eb18 0303 	adds.w	r3, r8, r3
 8004144:	60bb      	str	r3, [r7, #8]
 8004146:	462b      	mov	r3, r5
 8004148:	eb49 0303 	adc.w	r3, r9, r3
 800414c:	60fb      	str	r3, [r7, #12]
 800414e:	f04f 0200 	mov.w	r2, #0
 8004152:	f04f 0300 	mov.w	r3, #0
 8004156:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800415a:	4629      	mov	r1, r5
 800415c:	024b      	lsls	r3, r1, #9
 800415e:	4621      	mov	r1, r4
 8004160:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004164:	4621      	mov	r1, r4
 8004166:	024a      	lsls	r2, r1, #9
 8004168:	4610      	mov	r0, r2
 800416a:	4619      	mov	r1, r3
 800416c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800416e:	2200      	movs	r2, #0
 8004170:	62bb      	str	r3, [r7, #40]	; 0x28
 8004172:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004174:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004178:	f7fc f830 	bl	80001dc <__aeabi_uldivmod>
 800417c:	4602      	mov	r2, r0
 800417e:	460b      	mov	r3, r1
 8004180:	4613      	mov	r3, r2
 8004182:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004184:	e058      	b.n	8004238 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004186:	4b38      	ldr	r3, [pc, #224]	; (8004268 <HAL_RCC_GetSysClockFreq+0x200>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	099b      	lsrs	r3, r3, #6
 800418c:	2200      	movs	r2, #0
 800418e:	4618      	mov	r0, r3
 8004190:	4611      	mov	r1, r2
 8004192:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004196:	623b      	str	r3, [r7, #32]
 8004198:	2300      	movs	r3, #0
 800419a:	627b      	str	r3, [r7, #36]	; 0x24
 800419c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80041a0:	4642      	mov	r2, r8
 80041a2:	464b      	mov	r3, r9
 80041a4:	f04f 0000 	mov.w	r0, #0
 80041a8:	f04f 0100 	mov.w	r1, #0
 80041ac:	0159      	lsls	r1, r3, #5
 80041ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041b2:	0150      	lsls	r0, r2, #5
 80041b4:	4602      	mov	r2, r0
 80041b6:	460b      	mov	r3, r1
 80041b8:	4641      	mov	r1, r8
 80041ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80041be:	4649      	mov	r1, r9
 80041c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80041c4:	f04f 0200 	mov.w	r2, #0
 80041c8:	f04f 0300 	mov.w	r3, #0
 80041cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80041d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80041d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80041d8:	ebb2 040a 	subs.w	r4, r2, sl
 80041dc:	eb63 050b 	sbc.w	r5, r3, fp
 80041e0:	f04f 0200 	mov.w	r2, #0
 80041e4:	f04f 0300 	mov.w	r3, #0
 80041e8:	00eb      	lsls	r3, r5, #3
 80041ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041ee:	00e2      	lsls	r2, r4, #3
 80041f0:	4614      	mov	r4, r2
 80041f2:	461d      	mov	r5, r3
 80041f4:	4643      	mov	r3, r8
 80041f6:	18e3      	adds	r3, r4, r3
 80041f8:	603b      	str	r3, [r7, #0]
 80041fa:	464b      	mov	r3, r9
 80041fc:	eb45 0303 	adc.w	r3, r5, r3
 8004200:	607b      	str	r3, [r7, #4]
 8004202:	f04f 0200 	mov.w	r2, #0
 8004206:	f04f 0300 	mov.w	r3, #0
 800420a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800420e:	4629      	mov	r1, r5
 8004210:	028b      	lsls	r3, r1, #10
 8004212:	4621      	mov	r1, r4
 8004214:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004218:	4621      	mov	r1, r4
 800421a:	028a      	lsls	r2, r1, #10
 800421c:	4610      	mov	r0, r2
 800421e:	4619      	mov	r1, r3
 8004220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004222:	2200      	movs	r2, #0
 8004224:	61bb      	str	r3, [r7, #24]
 8004226:	61fa      	str	r2, [r7, #28]
 8004228:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800422c:	f7fb ffd6 	bl	80001dc <__aeabi_uldivmod>
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	4613      	mov	r3, r2
 8004236:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004238:	4b0b      	ldr	r3, [pc, #44]	; (8004268 <HAL_RCC_GetSysClockFreq+0x200>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	0c1b      	lsrs	r3, r3, #16
 800423e:	f003 0303 	and.w	r3, r3, #3
 8004242:	3301      	adds	r3, #1
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004248:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800424a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800424c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004250:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004252:	e002      	b.n	800425a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004254:	4b05      	ldr	r3, [pc, #20]	; (800426c <HAL_RCC_GetSysClockFreq+0x204>)
 8004256:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004258:	bf00      	nop
    }
  }
  return sysclockfreq;
 800425a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800425c:	4618      	mov	r0, r3
 800425e:	3750      	adds	r7, #80	; 0x50
 8004260:	46bd      	mov	sp, r7
 8004262:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004266:	bf00      	nop
 8004268:	40023800 	.word	0x40023800
 800426c:	00f42400 	.word	0x00f42400
 8004270:	007a1200 	.word	0x007a1200

08004274 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004274:	b480      	push	{r7}
 8004276:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004278:	4b03      	ldr	r3, [pc, #12]	; (8004288 <HAL_RCC_GetHCLKFreq+0x14>)
 800427a:	681b      	ldr	r3, [r3, #0]
}
 800427c:	4618      	mov	r0, r3
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	20000020 	.word	0x20000020

0800428c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004290:	f7ff fff0 	bl	8004274 <HAL_RCC_GetHCLKFreq>
 8004294:	4602      	mov	r2, r0
 8004296:	4b05      	ldr	r3, [pc, #20]	; (80042ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	0a9b      	lsrs	r3, r3, #10
 800429c:	f003 0307 	and.w	r3, r3, #7
 80042a0:	4903      	ldr	r1, [pc, #12]	; (80042b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042a2:	5ccb      	ldrb	r3, [r1, r3]
 80042a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	40023800 	.word	0x40023800
 80042b0:	080092cc 	.word	0x080092cc

080042b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	220f      	movs	r2, #15
 80042c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80042c4:	4b12      	ldr	r3, [pc, #72]	; (8004310 <HAL_RCC_GetClockConfig+0x5c>)
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f003 0203 	and.w	r2, r3, #3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80042d0:	4b0f      	ldr	r3, [pc, #60]	; (8004310 <HAL_RCC_GetClockConfig+0x5c>)
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80042dc:	4b0c      	ldr	r3, [pc, #48]	; (8004310 <HAL_RCC_GetClockConfig+0x5c>)
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80042e8:	4b09      	ldr	r3, [pc, #36]	; (8004310 <HAL_RCC_GetClockConfig+0x5c>)
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	08db      	lsrs	r3, r3, #3
 80042ee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80042f6:	4b07      	ldr	r3, [pc, #28]	; (8004314 <HAL_RCC_GetClockConfig+0x60>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0207 	and.w	r2, r3, #7
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	601a      	str	r2, [r3, #0]
}
 8004302:	bf00      	nop
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	40023800 	.word	0x40023800
 8004314:	40023c00 	.word	0x40023c00

08004318 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e07b      	b.n	8004422 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432e:	2b00      	cmp	r3, #0
 8004330:	d108      	bne.n	8004344 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800433a:	d009      	beq.n	8004350 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	61da      	str	r2, [r3, #28]
 8004342:	e005      	b.n	8004350 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d106      	bne.n	8004370 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7fc fdb0 	bl	8000ed0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2202      	movs	r2, #2
 8004374:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004386:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004398:	431a      	orrs	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043a2:	431a      	orrs	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	431a      	orrs	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	431a      	orrs	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043c0:	431a      	orrs	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043ca:	431a      	orrs	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a1b      	ldr	r3, [r3, #32]
 80043d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d4:	ea42 0103 	orr.w	r1, r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043dc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	430a      	orrs	r2, r1
 80043e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	0c1b      	lsrs	r3, r3, #16
 80043ee:	f003 0104 	and.w	r1, r3, #4
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f6:	f003 0210 	and.w	r2, r3, #16
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	430a      	orrs	r2, r1
 8004400:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	69da      	ldr	r2, [r3, #28]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004410:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b082      	sub	sp, #8
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e041      	b.n	80044c0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	d106      	bne.n	8004456 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f7fd f885 	bl	8001560 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2202      	movs	r2, #2
 800445a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	3304      	adds	r3, #4
 8004466:	4619      	mov	r1, r3
 8004468:	4610      	mov	r0, r2
 800446a:	f000 fbc9 	bl	8004c00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d001      	beq.n	80044e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e04e      	b.n	800457e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2202      	movs	r2, #2
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68da      	ldr	r2, [r3, #12]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0201 	orr.w	r2, r2, #1
 80044f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a23      	ldr	r2, [pc, #140]	; (800458c <HAL_TIM_Base_Start_IT+0xc4>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d022      	beq.n	8004548 <HAL_TIM_Base_Start_IT+0x80>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800450a:	d01d      	beq.n	8004548 <HAL_TIM_Base_Start_IT+0x80>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a1f      	ldr	r2, [pc, #124]	; (8004590 <HAL_TIM_Base_Start_IT+0xc8>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d018      	beq.n	8004548 <HAL_TIM_Base_Start_IT+0x80>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a1e      	ldr	r2, [pc, #120]	; (8004594 <HAL_TIM_Base_Start_IT+0xcc>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d013      	beq.n	8004548 <HAL_TIM_Base_Start_IT+0x80>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a1c      	ldr	r2, [pc, #112]	; (8004598 <HAL_TIM_Base_Start_IT+0xd0>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d00e      	beq.n	8004548 <HAL_TIM_Base_Start_IT+0x80>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a1b      	ldr	r2, [pc, #108]	; (800459c <HAL_TIM_Base_Start_IT+0xd4>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d009      	beq.n	8004548 <HAL_TIM_Base_Start_IT+0x80>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a19      	ldr	r2, [pc, #100]	; (80045a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d004      	beq.n	8004548 <HAL_TIM_Base_Start_IT+0x80>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a18      	ldr	r2, [pc, #96]	; (80045a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d111      	bne.n	800456c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f003 0307 	and.w	r3, r3, #7
 8004552:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2b06      	cmp	r3, #6
 8004558:	d010      	beq.n	800457c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f042 0201 	orr.w	r2, r2, #1
 8004568:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800456a:	e007      	b.n	800457c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 0201 	orr.w	r2, r2, #1
 800457a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3714      	adds	r7, #20
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	40010000 	.word	0x40010000
 8004590:	40000400 	.word	0x40000400
 8004594:	40000800 	.word	0x40000800
 8004598:	40000c00 	.word	0x40000c00
 800459c:	40010400 	.word	0x40010400
 80045a0:	40014000 	.word	0x40014000
 80045a4:	40001800 	.word	0x40001800

080045a8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d101      	bne.n	80045bc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e097      	b.n	80046ec <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d106      	bne.n	80045d6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f7fc ff03 	bl	80013dc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2202      	movs	r2, #2
 80045da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	6812      	ldr	r2, [r2, #0]
 80045e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045ec:	f023 0307 	bic.w	r3, r3, #7
 80045f0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	3304      	adds	r3, #4
 80045fa:	4619      	mov	r1, r3
 80045fc:	4610      	mov	r0, r2
 80045fe:	f000 faff 	bl	8004c00 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	4313      	orrs	r3, r2
 8004622:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800462a:	f023 0303 	bic.w	r3, r3, #3
 800462e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	689a      	ldr	r2, [r3, #8]
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	021b      	lsls	r3, r3, #8
 800463a:	4313      	orrs	r3, r2
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	4313      	orrs	r3, r2
 8004640:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004648:	f023 030c 	bic.w	r3, r3, #12
 800464c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004654:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004658:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	68da      	ldr	r2, [r3, #12]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	021b      	lsls	r3, r3, #8
 8004664:	4313      	orrs	r3, r2
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	4313      	orrs	r3, r2
 800466a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	011a      	lsls	r2, r3, #4
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	031b      	lsls	r3, r3, #12
 8004678:	4313      	orrs	r3, r2
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	4313      	orrs	r3, r2
 800467e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004686:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800468e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	011b      	lsls	r3, r3, #4
 800469a:	4313      	orrs	r3, r2
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	4313      	orrs	r3, r2
 80046a0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3718      	adds	r7, #24
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004704:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800470c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004714:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800471c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d110      	bne.n	8004746 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004724:	7bfb      	ldrb	r3, [r7, #15]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d102      	bne.n	8004730 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800472a:	7b7b      	ldrb	r3, [r7, #13]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d001      	beq.n	8004734 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e069      	b.n	8004808 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2202      	movs	r2, #2
 8004738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2202      	movs	r2, #2
 8004740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004744:	e031      	b.n	80047aa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2b04      	cmp	r3, #4
 800474a:	d110      	bne.n	800476e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800474c:	7bbb      	ldrb	r3, [r7, #14]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d102      	bne.n	8004758 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004752:	7b3b      	ldrb	r3, [r7, #12]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d001      	beq.n	800475c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e055      	b.n	8004808 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2202      	movs	r2, #2
 8004768:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800476c:	e01d      	b.n	80047aa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800476e:	7bfb      	ldrb	r3, [r7, #15]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d108      	bne.n	8004786 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004774:	7bbb      	ldrb	r3, [r7, #14]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d105      	bne.n	8004786 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800477a:	7b7b      	ldrb	r3, [r7, #13]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d102      	bne.n	8004786 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004780:	7b3b      	ldrb	r3, [r7, #12]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d001      	beq.n	800478a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e03e      	b.n	8004808 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2202      	movs	r2, #2
 800478e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2202      	movs	r2, #2
 8004796:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2202      	movs	r2, #2
 800479e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2202      	movs	r2, #2
 80047a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <HAL_TIM_Encoder_Start+0xc4>
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	2b04      	cmp	r3, #4
 80047b4:	d008      	beq.n	80047c8 <HAL_TIM_Encoder_Start+0xd4>
 80047b6:	e00f      	b.n	80047d8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2201      	movs	r2, #1
 80047be:	2100      	movs	r1, #0
 80047c0:	4618      	mov	r0, r3
 80047c2:	f000 fb57 	bl	8004e74 <TIM_CCxChannelCmd>
      break;
 80047c6:	e016      	b.n	80047f6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2201      	movs	r2, #1
 80047ce:	2104      	movs	r1, #4
 80047d0:	4618      	mov	r0, r3
 80047d2:	f000 fb4f 	bl	8004e74 <TIM_CCxChannelCmd>
      break;
 80047d6:	e00e      	b.n	80047f6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2201      	movs	r2, #1
 80047de:	2100      	movs	r1, #0
 80047e0:	4618      	mov	r0, r3
 80047e2:	f000 fb47 	bl	8004e74 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2201      	movs	r2, #1
 80047ec:	2104      	movs	r1, #4
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 fb40 	bl	8004e74 <TIM_CCxChannelCmd>
      break;
 80047f4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f042 0201 	orr.w	r2, r2, #1
 8004804:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	f003 0302 	and.w	r3, r3, #2
 8004822:	2b02      	cmp	r3, #2
 8004824:	d122      	bne.n	800486c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b02      	cmp	r3, #2
 8004832:	d11b      	bne.n	800486c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f06f 0202 	mvn.w	r2, #2
 800483c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	f003 0303 	and.w	r3, r3, #3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d003      	beq.n	800485a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f9b5 	bl	8004bc2 <HAL_TIM_IC_CaptureCallback>
 8004858:	e005      	b.n	8004866 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f9a7 	bl	8004bae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 f9b8 	bl	8004bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	f003 0304 	and.w	r3, r3, #4
 8004876:	2b04      	cmp	r3, #4
 8004878:	d122      	bne.n	80048c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b04      	cmp	r3, #4
 8004886:	d11b      	bne.n	80048c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f06f 0204 	mvn.w	r2, #4
 8004890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2202      	movs	r2, #2
 8004896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f98b 	bl	8004bc2 <HAL_TIM_IC_CaptureCallback>
 80048ac:	e005      	b.n	80048ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f97d 	bl	8004bae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 f98e 	bl	8004bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	f003 0308 	and.w	r3, r3, #8
 80048ca:	2b08      	cmp	r3, #8
 80048cc:	d122      	bne.n	8004914 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	f003 0308 	and.w	r3, r3, #8
 80048d8:	2b08      	cmp	r3, #8
 80048da:	d11b      	bne.n	8004914 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f06f 0208 	mvn.w	r2, #8
 80048e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2204      	movs	r2, #4
 80048ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	69db      	ldr	r3, [r3, #28]
 80048f2:	f003 0303 	and.w	r3, r3, #3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 f961 	bl	8004bc2 <HAL_TIM_IC_CaptureCallback>
 8004900:	e005      	b.n	800490e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f953 	bl	8004bae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 f964 	bl	8004bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	f003 0310 	and.w	r3, r3, #16
 800491e:	2b10      	cmp	r3, #16
 8004920:	d122      	bne.n	8004968 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	f003 0310 	and.w	r3, r3, #16
 800492c:	2b10      	cmp	r3, #16
 800492e:	d11b      	bne.n	8004968 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f06f 0210 	mvn.w	r2, #16
 8004938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2208      	movs	r2, #8
 800493e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f937 	bl	8004bc2 <HAL_TIM_IC_CaptureCallback>
 8004954:	e005      	b.n	8004962 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f929 	bl	8004bae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 f93a 	bl	8004bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b01      	cmp	r3, #1
 8004974:	d10e      	bne.n	8004994 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	2b01      	cmp	r3, #1
 8004982:	d107      	bne.n	8004994 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f06f 0201 	mvn.w	r2, #1
 800498c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f7fb fffe 	bl	8000990 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800499e:	2b80      	cmp	r3, #128	; 0x80
 80049a0:	d10e      	bne.n	80049c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ac:	2b80      	cmp	r3, #128	; 0x80
 80049ae:	d107      	bne.n	80049c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 fb06 	bl	8004fcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ca:	2b40      	cmp	r3, #64	; 0x40
 80049cc:	d10e      	bne.n	80049ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d8:	2b40      	cmp	r3, #64	; 0x40
 80049da:	d107      	bne.n	80049ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f8ff 	bl	8004bea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	f003 0320 	and.w	r3, r3, #32
 80049f6:	2b20      	cmp	r3, #32
 80049f8:	d10e      	bne.n	8004a18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	f003 0320 	and.w	r3, r3, #32
 8004a04:	2b20      	cmp	r3, #32
 8004a06:	d107      	bne.n	8004a18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f06f 0220 	mvn.w	r2, #32
 8004a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 fad0 	bl	8004fb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a18:	bf00      	nop
 8004a1a:	3708      	adds	r7, #8
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d101      	bne.n	8004a3c <HAL_TIM_ConfigClockSource+0x1c>
 8004a38:	2302      	movs	r3, #2
 8004a3a:	e0b4      	b.n	8004ba6 <HAL_TIM_ConfigClockSource+0x186>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2202      	movs	r2, #2
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a74:	d03e      	beq.n	8004af4 <HAL_TIM_ConfigClockSource+0xd4>
 8004a76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a7a:	f200 8087 	bhi.w	8004b8c <HAL_TIM_ConfigClockSource+0x16c>
 8004a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a82:	f000 8086 	beq.w	8004b92 <HAL_TIM_ConfigClockSource+0x172>
 8004a86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a8a:	d87f      	bhi.n	8004b8c <HAL_TIM_ConfigClockSource+0x16c>
 8004a8c:	2b70      	cmp	r3, #112	; 0x70
 8004a8e:	d01a      	beq.n	8004ac6 <HAL_TIM_ConfigClockSource+0xa6>
 8004a90:	2b70      	cmp	r3, #112	; 0x70
 8004a92:	d87b      	bhi.n	8004b8c <HAL_TIM_ConfigClockSource+0x16c>
 8004a94:	2b60      	cmp	r3, #96	; 0x60
 8004a96:	d050      	beq.n	8004b3a <HAL_TIM_ConfigClockSource+0x11a>
 8004a98:	2b60      	cmp	r3, #96	; 0x60
 8004a9a:	d877      	bhi.n	8004b8c <HAL_TIM_ConfigClockSource+0x16c>
 8004a9c:	2b50      	cmp	r3, #80	; 0x50
 8004a9e:	d03c      	beq.n	8004b1a <HAL_TIM_ConfigClockSource+0xfa>
 8004aa0:	2b50      	cmp	r3, #80	; 0x50
 8004aa2:	d873      	bhi.n	8004b8c <HAL_TIM_ConfigClockSource+0x16c>
 8004aa4:	2b40      	cmp	r3, #64	; 0x40
 8004aa6:	d058      	beq.n	8004b5a <HAL_TIM_ConfigClockSource+0x13a>
 8004aa8:	2b40      	cmp	r3, #64	; 0x40
 8004aaa:	d86f      	bhi.n	8004b8c <HAL_TIM_ConfigClockSource+0x16c>
 8004aac:	2b30      	cmp	r3, #48	; 0x30
 8004aae:	d064      	beq.n	8004b7a <HAL_TIM_ConfigClockSource+0x15a>
 8004ab0:	2b30      	cmp	r3, #48	; 0x30
 8004ab2:	d86b      	bhi.n	8004b8c <HAL_TIM_ConfigClockSource+0x16c>
 8004ab4:	2b20      	cmp	r3, #32
 8004ab6:	d060      	beq.n	8004b7a <HAL_TIM_ConfigClockSource+0x15a>
 8004ab8:	2b20      	cmp	r3, #32
 8004aba:	d867      	bhi.n	8004b8c <HAL_TIM_ConfigClockSource+0x16c>
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d05c      	beq.n	8004b7a <HAL_TIM_ConfigClockSource+0x15a>
 8004ac0:	2b10      	cmp	r3, #16
 8004ac2:	d05a      	beq.n	8004b7a <HAL_TIM_ConfigClockSource+0x15a>
 8004ac4:	e062      	b.n	8004b8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6818      	ldr	r0, [r3, #0]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	6899      	ldr	r1, [r3, #8]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	f000 f9ad 	bl	8004e34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ae8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	609a      	str	r2, [r3, #8]
      break;
 8004af2:	e04f      	b.n	8004b94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6818      	ldr	r0, [r3, #0]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	6899      	ldr	r1, [r3, #8]
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	685a      	ldr	r2, [r3, #4]
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	f000 f996 	bl	8004e34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689a      	ldr	r2, [r3, #8]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b16:	609a      	str	r2, [r3, #8]
      break;
 8004b18:	e03c      	b.n	8004b94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6818      	ldr	r0, [r3, #0]
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	6859      	ldr	r1, [r3, #4]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	461a      	mov	r2, r3
 8004b28:	f000 f90a 	bl	8004d40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2150      	movs	r1, #80	; 0x50
 8004b32:	4618      	mov	r0, r3
 8004b34:	f000 f963 	bl	8004dfe <TIM_ITRx_SetConfig>
      break;
 8004b38:	e02c      	b.n	8004b94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6818      	ldr	r0, [r3, #0]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	6859      	ldr	r1, [r3, #4]
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	461a      	mov	r2, r3
 8004b48:	f000 f929 	bl	8004d9e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2160      	movs	r1, #96	; 0x60
 8004b52:	4618      	mov	r0, r3
 8004b54:	f000 f953 	bl	8004dfe <TIM_ITRx_SetConfig>
      break;
 8004b58:	e01c      	b.n	8004b94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6818      	ldr	r0, [r3, #0]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	6859      	ldr	r1, [r3, #4]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	461a      	mov	r2, r3
 8004b68:	f000 f8ea 	bl	8004d40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2140      	movs	r1, #64	; 0x40
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 f943 	bl	8004dfe <TIM_ITRx_SetConfig>
      break;
 8004b78:	e00c      	b.n	8004b94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4619      	mov	r1, r3
 8004b84:	4610      	mov	r0, r2
 8004b86:	f000 f93a 	bl	8004dfe <TIM_ITRx_SetConfig>
      break;
 8004b8a:	e003      	b.n	8004b94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b90:	e000      	b.n	8004b94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b083      	sub	sp, #12
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b083      	sub	sp, #12
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bca:	bf00      	nop
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b083      	sub	sp, #12
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bde:	bf00      	nop
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bea:	b480      	push	{r7}
 8004bec:	b083      	sub	sp, #12
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bf2:	bf00      	nop
 8004bf4:	370c      	adds	r7, #12
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
	...

08004c00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a40      	ldr	r2, [pc, #256]	; (8004d14 <TIM_Base_SetConfig+0x114>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d013      	beq.n	8004c40 <TIM_Base_SetConfig+0x40>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c1e:	d00f      	beq.n	8004c40 <TIM_Base_SetConfig+0x40>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a3d      	ldr	r2, [pc, #244]	; (8004d18 <TIM_Base_SetConfig+0x118>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d00b      	beq.n	8004c40 <TIM_Base_SetConfig+0x40>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a3c      	ldr	r2, [pc, #240]	; (8004d1c <TIM_Base_SetConfig+0x11c>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d007      	beq.n	8004c40 <TIM_Base_SetConfig+0x40>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a3b      	ldr	r2, [pc, #236]	; (8004d20 <TIM_Base_SetConfig+0x120>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d003      	beq.n	8004c40 <TIM_Base_SetConfig+0x40>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a3a      	ldr	r2, [pc, #232]	; (8004d24 <TIM_Base_SetConfig+0x124>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d108      	bne.n	8004c52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a2f      	ldr	r2, [pc, #188]	; (8004d14 <TIM_Base_SetConfig+0x114>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d02b      	beq.n	8004cb2 <TIM_Base_SetConfig+0xb2>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c60:	d027      	beq.n	8004cb2 <TIM_Base_SetConfig+0xb2>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a2c      	ldr	r2, [pc, #176]	; (8004d18 <TIM_Base_SetConfig+0x118>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d023      	beq.n	8004cb2 <TIM_Base_SetConfig+0xb2>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a2b      	ldr	r2, [pc, #172]	; (8004d1c <TIM_Base_SetConfig+0x11c>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d01f      	beq.n	8004cb2 <TIM_Base_SetConfig+0xb2>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a2a      	ldr	r2, [pc, #168]	; (8004d20 <TIM_Base_SetConfig+0x120>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d01b      	beq.n	8004cb2 <TIM_Base_SetConfig+0xb2>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a29      	ldr	r2, [pc, #164]	; (8004d24 <TIM_Base_SetConfig+0x124>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d017      	beq.n	8004cb2 <TIM_Base_SetConfig+0xb2>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a28      	ldr	r2, [pc, #160]	; (8004d28 <TIM_Base_SetConfig+0x128>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d013      	beq.n	8004cb2 <TIM_Base_SetConfig+0xb2>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a27      	ldr	r2, [pc, #156]	; (8004d2c <TIM_Base_SetConfig+0x12c>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d00f      	beq.n	8004cb2 <TIM_Base_SetConfig+0xb2>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a26      	ldr	r2, [pc, #152]	; (8004d30 <TIM_Base_SetConfig+0x130>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d00b      	beq.n	8004cb2 <TIM_Base_SetConfig+0xb2>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a25      	ldr	r2, [pc, #148]	; (8004d34 <TIM_Base_SetConfig+0x134>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d007      	beq.n	8004cb2 <TIM_Base_SetConfig+0xb2>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a24      	ldr	r2, [pc, #144]	; (8004d38 <TIM_Base_SetConfig+0x138>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d003      	beq.n	8004cb2 <TIM_Base_SetConfig+0xb2>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a23      	ldr	r2, [pc, #140]	; (8004d3c <TIM_Base_SetConfig+0x13c>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d108      	bne.n	8004cc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a0a      	ldr	r2, [pc, #40]	; (8004d14 <TIM_Base_SetConfig+0x114>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d003      	beq.n	8004cf8 <TIM_Base_SetConfig+0xf8>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a0c      	ldr	r2, [pc, #48]	; (8004d24 <TIM_Base_SetConfig+0x124>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d103      	bne.n	8004d00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	691a      	ldr	r2, [r3, #16]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	615a      	str	r2, [r3, #20]
}
 8004d06:	bf00      	nop
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	40010000 	.word	0x40010000
 8004d18:	40000400 	.word	0x40000400
 8004d1c:	40000800 	.word	0x40000800
 8004d20:	40000c00 	.word	0x40000c00
 8004d24:	40010400 	.word	0x40010400
 8004d28:	40014000 	.word	0x40014000
 8004d2c:	40014400 	.word	0x40014400
 8004d30:	40014800 	.word	0x40014800
 8004d34:	40001800 	.word	0x40001800
 8004d38:	40001c00 	.word	0x40001c00
 8004d3c:	40002000 	.word	0x40002000

08004d40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b087      	sub	sp, #28
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6a1b      	ldr	r3, [r3, #32]
 8004d50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	f023 0201 	bic.w	r2, r3, #1
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	011b      	lsls	r3, r3, #4
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f023 030a 	bic.w	r3, r3, #10
 8004d7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	621a      	str	r2, [r3, #32]
}
 8004d92:	bf00      	nop
 8004d94:	371c      	adds	r7, #28
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr

08004d9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b087      	sub	sp, #28
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	60f8      	str	r0, [r7, #12]
 8004da6:	60b9      	str	r1, [r7, #8]
 8004da8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	f023 0210 	bic.w	r2, r3, #16
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004dc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	031b      	lsls	r3, r3, #12
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004dda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	011b      	lsls	r3, r3, #4
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	621a      	str	r2, [r3, #32]
}
 8004df2:	bf00      	nop
 8004df4:	371c      	adds	r7, #28
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b085      	sub	sp, #20
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
 8004e06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e16:	683a      	ldr	r2, [r7, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	f043 0307 	orr.w	r3, r3, #7
 8004e20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	609a      	str	r2, [r3, #8]
}
 8004e28:	bf00      	nop
 8004e2a:	3714      	adds	r7, #20
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b087      	sub	sp, #28
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
 8004e40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	021a      	lsls	r2, r3, #8
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	431a      	orrs	r2, r3
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	697a      	ldr	r2, [r7, #20]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	609a      	str	r2, [r3, #8]
}
 8004e68:	bf00      	nop
 8004e6a:	371c      	adds	r7, #28
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b087      	sub	sp, #28
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	f003 031f 	and.w	r3, r3, #31
 8004e86:	2201      	movs	r2, #1
 8004e88:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6a1a      	ldr	r2, [r3, #32]
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	43db      	mvns	r3, r3
 8004e96:	401a      	ands	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6a1a      	ldr	r2, [r3, #32]
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	f003 031f 	and.w	r3, r3, #31
 8004ea6:	6879      	ldr	r1, [r7, #4]
 8004ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8004eac:	431a      	orrs	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	621a      	str	r2, [r3, #32]
}
 8004eb2:	bf00      	nop
 8004eb4:	371c      	adds	r7, #28
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
	...

08004ec0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d101      	bne.n	8004ed8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	e05a      	b.n	8004f8e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004efe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a21      	ldr	r2, [pc, #132]	; (8004f9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d022      	beq.n	8004f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f24:	d01d      	beq.n	8004f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a1d      	ldr	r2, [pc, #116]	; (8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d018      	beq.n	8004f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a1b      	ldr	r2, [pc, #108]	; (8004fa4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d013      	beq.n	8004f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a1a      	ldr	r2, [pc, #104]	; (8004fa8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d00e      	beq.n	8004f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a18      	ldr	r2, [pc, #96]	; (8004fac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d009      	beq.n	8004f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a17      	ldr	r2, [pc, #92]	; (8004fb0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d004      	beq.n	8004f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a15      	ldr	r2, [pc, #84]	; (8004fb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d10c      	bne.n	8004f7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68ba      	ldr	r2, [r7, #8]
 8004f7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3714      	adds	r7, #20
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	40010000 	.word	0x40010000
 8004fa0:	40000400 	.word	0x40000400
 8004fa4:	40000800 	.word	0x40000800
 8004fa8:	40000c00 	.word	0x40000c00
 8004fac:	40010400 	.word	0x40010400
 8004fb0:	40014000 	.word	0x40014000
 8004fb4:	40001800 	.word	0x40001800

08004fb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fe0:	b084      	sub	sp, #16
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b084      	sub	sp, #16
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
 8004fea:	f107 001c 	add.w	r0, r7, #28
 8004fee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d122      	bne.n	800503e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800500c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005022:	2b01      	cmp	r3, #1
 8005024:	d105      	bne.n	8005032 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f001 fbee 	bl	8006814 <USB_CoreReset>
 8005038:	4603      	mov	r3, r0
 800503a:	73fb      	strb	r3, [r7, #15]
 800503c:	e01a      	b.n	8005074 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f001 fbe2 	bl	8006814 <USB_CoreReset>
 8005050:	4603      	mov	r3, r0
 8005052:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005056:	2b00      	cmp	r3, #0
 8005058:	d106      	bne.n	8005068 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	639a      	str	r2, [r3, #56]	; 0x38
 8005066:	e005      	b.n	8005074 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005076:	2b01      	cmp	r3, #1
 8005078:	d10b      	bne.n	8005092 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f043 0206 	orr.w	r2, r3, #6
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f043 0220 	orr.w	r2, r3, #32
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005092:	7bfb      	ldrb	r3, [r7, #15]
}
 8005094:	4618      	mov	r0, r3
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800509e:	b004      	add	sp, #16
 80050a0:	4770      	bx	lr
	...

080050a4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b087      	sub	sp, #28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	4613      	mov	r3, r2
 80050b0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80050b2:	79fb      	ldrb	r3, [r7, #7]
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d165      	bne.n	8005184 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	4a41      	ldr	r2, [pc, #260]	; (80051c0 <USB_SetTurnaroundTime+0x11c>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d906      	bls.n	80050ce <USB_SetTurnaroundTime+0x2a>
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	4a40      	ldr	r2, [pc, #256]	; (80051c4 <USB_SetTurnaroundTime+0x120>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d202      	bcs.n	80050ce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80050c8:	230f      	movs	r3, #15
 80050ca:	617b      	str	r3, [r7, #20]
 80050cc:	e062      	b.n	8005194 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	4a3c      	ldr	r2, [pc, #240]	; (80051c4 <USB_SetTurnaroundTime+0x120>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d306      	bcc.n	80050e4 <USB_SetTurnaroundTime+0x40>
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	4a3b      	ldr	r2, [pc, #236]	; (80051c8 <USB_SetTurnaroundTime+0x124>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d202      	bcs.n	80050e4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80050de:	230e      	movs	r3, #14
 80050e0:	617b      	str	r3, [r7, #20]
 80050e2:	e057      	b.n	8005194 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	4a38      	ldr	r2, [pc, #224]	; (80051c8 <USB_SetTurnaroundTime+0x124>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d306      	bcc.n	80050fa <USB_SetTurnaroundTime+0x56>
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	4a37      	ldr	r2, [pc, #220]	; (80051cc <USB_SetTurnaroundTime+0x128>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d202      	bcs.n	80050fa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80050f4:	230d      	movs	r3, #13
 80050f6:	617b      	str	r3, [r7, #20]
 80050f8:	e04c      	b.n	8005194 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	4a33      	ldr	r2, [pc, #204]	; (80051cc <USB_SetTurnaroundTime+0x128>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d306      	bcc.n	8005110 <USB_SetTurnaroundTime+0x6c>
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	4a32      	ldr	r2, [pc, #200]	; (80051d0 <USB_SetTurnaroundTime+0x12c>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d802      	bhi.n	8005110 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800510a:	230c      	movs	r3, #12
 800510c:	617b      	str	r3, [r7, #20]
 800510e:	e041      	b.n	8005194 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	4a2f      	ldr	r2, [pc, #188]	; (80051d0 <USB_SetTurnaroundTime+0x12c>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d906      	bls.n	8005126 <USB_SetTurnaroundTime+0x82>
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	4a2e      	ldr	r2, [pc, #184]	; (80051d4 <USB_SetTurnaroundTime+0x130>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d802      	bhi.n	8005126 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005120:	230b      	movs	r3, #11
 8005122:	617b      	str	r3, [r7, #20]
 8005124:	e036      	b.n	8005194 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	4a2a      	ldr	r2, [pc, #168]	; (80051d4 <USB_SetTurnaroundTime+0x130>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d906      	bls.n	800513c <USB_SetTurnaroundTime+0x98>
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	4a29      	ldr	r2, [pc, #164]	; (80051d8 <USB_SetTurnaroundTime+0x134>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d802      	bhi.n	800513c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005136:	230a      	movs	r3, #10
 8005138:	617b      	str	r3, [r7, #20]
 800513a:	e02b      	b.n	8005194 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	4a26      	ldr	r2, [pc, #152]	; (80051d8 <USB_SetTurnaroundTime+0x134>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d906      	bls.n	8005152 <USB_SetTurnaroundTime+0xae>
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	4a25      	ldr	r2, [pc, #148]	; (80051dc <USB_SetTurnaroundTime+0x138>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d202      	bcs.n	8005152 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800514c:	2309      	movs	r3, #9
 800514e:	617b      	str	r3, [r7, #20]
 8005150:	e020      	b.n	8005194 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	4a21      	ldr	r2, [pc, #132]	; (80051dc <USB_SetTurnaroundTime+0x138>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d306      	bcc.n	8005168 <USB_SetTurnaroundTime+0xc4>
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	4a20      	ldr	r2, [pc, #128]	; (80051e0 <USB_SetTurnaroundTime+0x13c>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d802      	bhi.n	8005168 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005162:	2308      	movs	r3, #8
 8005164:	617b      	str	r3, [r7, #20]
 8005166:	e015      	b.n	8005194 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	4a1d      	ldr	r2, [pc, #116]	; (80051e0 <USB_SetTurnaroundTime+0x13c>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d906      	bls.n	800517e <USB_SetTurnaroundTime+0xda>
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	4a1c      	ldr	r2, [pc, #112]	; (80051e4 <USB_SetTurnaroundTime+0x140>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d202      	bcs.n	800517e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005178:	2307      	movs	r3, #7
 800517a:	617b      	str	r3, [r7, #20]
 800517c:	e00a      	b.n	8005194 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800517e:	2306      	movs	r3, #6
 8005180:	617b      	str	r3, [r7, #20]
 8005182:	e007      	b.n	8005194 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005184:	79fb      	ldrb	r3, [r7, #7]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d102      	bne.n	8005190 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800518a:	2309      	movs	r3, #9
 800518c:	617b      	str	r3, [r7, #20]
 800518e:	e001      	b.n	8005194 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005190:	2309      	movs	r3, #9
 8005192:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	68da      	ldr	r2, [r3, #12]
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	029b      	lsls	r3, r3, #10
 80051a8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80051ac:	431a      	orrs	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	371c      	adds	r7, #28
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	00d8acbf 	.word	0x00d8acbf
 80051c4:	00e4e1c0 	.word	0x00e4e1c0
 80051c8:	00f42400 	.word	0x00f42400
 80051cc:	01067380 	.word	0x01067380
 80051d0:	011a499f 	.word	0x011a499f
 80051d4:	01312cff 	.word	0x01312cff
 80051d8:	014ca43f 	.word	0x014ca43f
 80051dc:	016e3600 	.word	0x016e3600
 80051e0:	01a6ab1f 	.word	0x01a6ab1f
 80051e4:	01e84800 	.word	0x01e84800

080051e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f043 0201 	orr.w	r2, r3, #1
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	370c      	adds	r7, #12
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr

0800520a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800520a:	b480      	push	{r7}
 800520c:	b083      	sub	sp, #12
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f023 0201 	bic.w	r2, r3, #1
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	460b      	mov	r3, r1
 8005236:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005238:	2300      	movs	r3, #0
 800523a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005248:	78fb      	ldrb	r3, [r7, #3]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d115      	bne.n	800527a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800525a:	2001      	movs	r0, #1
 800525c:	f7fc fa14 	bl	8001688 <HAL_Delay>
      ms++;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	3301      	adds	r3, #1
 8005264:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f001 fa45 	bl	80066f6 <USB_GetMode>
 800526c:	4603      	mov	r3, r0
 800526e:	2b01      	cmp	r3, #1
 8005270:	d01e      	beq.n	80052b0 <USB_SetCurrentMode+0x84>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2b31      	cmp	r3, #49	; 0x31
 8005276:	d9f0      	bls.n	800525a <USB_SetCurrentMode+0x2e>
 8005278:	e01a      	b.n	80052b0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800527a:	78fb      	ldrb	r3, [r7, #3]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d115      	bne.n	80052ac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800528c:	2001      	movs	r0, #1
 800528e:	f7fc f9fb 	bl	8001688 <HAL_Delay>
      ms++;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	3301      	adds	r3, #1
 8005296:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f001 fa2c 	bl	80066f6 <USB_GetMode>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d005      	beq.n	80052b0 <USB_SetCurrentMode+0x84>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2b31      	cmp	r3, #49	; 0x31
 80052a8:	d9f0      	bls.n	800528c <USB_SetCurrentMode+0x60>
 80052aa:	e001      	b.n	80052b0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e005      	b.n	80052bc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2b32      	cmp	r3, #50	; 0x32
 80052b4:	d101      	bne.n	80052ba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e000      	b.n	80052bc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052c4:	b084      	sub	sp, #16
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b086      	sub	sp, #24
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
 80052ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80052d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80052d6:	2300      	movs	r3, #0
 80052d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80052de:	2300      	movs	r3, #0
 80052e0:	613b      	str	r3, [r7, #16]
 80052e2:	e009      	b.n	80052f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	3340      	adds	r3, #64	; 0x40
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	2200      	movs	r2, #0
 80052f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	3301      	adds	r3, #1
 80052f6:	613b      	str	r3, [r7, #16]
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	2b0e      	cmp	r3, #14
 80052fc:	d9f2      	bls.n	80052e4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80052fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005300:	2b00      	cmp	r3, #0
 8005302:	d11c      	bne.n	800533e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005312:	f043 0302 	orr.w	r3, r3, #2
 8005316:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005328:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005334:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	639a      	str	r2, [r3, #56]	; 0x38
 800533c:	e00b      	b.n	8005356 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005342:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800535c:	461a      	mov	r2, r3
 800535e:	2300      	movs	r3, #0
 8005360:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005368:	4619      	mov	r1, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005370:	461a      	mov	r2, r3
 8005372:	680b      	ldr	r3, [r1, #0]
 8005374:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005378:	2b01      	cmp	r3, #1
 800537a:	d10c      	bne.n	8005396 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800537c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537e:	2b00      	cmp	r3, #0
 8005380:	d104      	bne.n	800538c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005382:	2100      	movs	r1, #0
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 f965 	bl	8005654 <USB_SetDevSpeed>
 800538a:	e008      	b.n	800539e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800538c:	2101      	movs	r1, #1
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 f960 	bl	8005654 <USB_SetDevSpeed>
 8005394:	e003      	b.n	800539e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005396:	2103      	movs	r1, #3
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 f95b 	bl	8005654 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800539e:	2110      	movs	r1, #16
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 f8f3 	bl	800558c <USB_FlushTxFifo>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d001      	beq.n	80053b0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 f91f 	bl	80055f4 <USB_FlushRxFifo>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d001      	beq.n	80053c0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c6:	461a      	mov	r2, r3
 80053c8:	2300      	movs	r3, #0
 80053ca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d2:	461a      	mov	r2, r3
 80053d4:	2300      	movs	r3, #0
 80053d6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053de:	461a      	mov	r2, r3
 80053e0:	2300      	movs	r3, #0
 80053e2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053e4:	2300      	movs	r3, #0
 80053e6:	613b      	str	r3, [r7, #16]
 80053e8:	e043      	b.n	8005472 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	015a      	lsls	r2, r3, #5
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	4413      	add	r3, r2
 80053f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005400:	d118      	bne.n	8005434 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10a      	bne.n	800541e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	015a      	lsls	r2, r3, #5
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	4413      	add	r3, r2
 8005410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005414:	461a      	mov	r2, r3
 8005416:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800541a:	6013      	str	r3, [r2, #0]
 800541c:	e013      	b.n	8005446 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	015a      	lsls	r2, r3, #5
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	4413      	add	r3, r2
 8005426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800542a:	461a      	mov	r2, r3
 800542c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005430:	6013      	str	r3, [r2, #0]
 8005432:	e008      	b.n	8005446 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	4413      	add	r3, r2
 800543c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005440:	461a      	mov	r2, r3
 8005442:	2300      	movs	r3, #0
 8005444:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	015a      	lsls	r2, r3, #5
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	4413      	add	r3, r2
 800544e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005452:	461a      	mov	r2, r3
 8005454:	2300      	movs	r3, #0
 8005456:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	4413      	add	r3, r2
 8005460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005464:	461a      	mov	r2, r3
 8005466:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800546a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	3301      	adds	r3, #1
 8005470:	613b      	str	r3, [r7, #16]
 8005472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	429a      	cmp	r2, r3
 8005478:	d3b7      	bcc.n	80053ea <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800547a:	2300      	movs	r3, #0
 800547c:	613b      	str	r3, [r7, #16]
 800547e:	e043      	b.n	8005508 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	4413      	add	r3, r2
 8005488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005492:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005496:	d118      	bne.n	80054ca <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10a      	bne.n	80054b4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	015a      	lsls	r2, r3, #5
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	4413      	add	r3, r2
 80054a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054aa:	461a      	mov	r2, r3
 80054ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054b0:	6013      	str	r3, [r2, #0]
 80054b2:	e013      	b.n	80054dc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	015a      	lsls	r2, r3, #5
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	4413      	add	r3, r2
 80054bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c0:	461a      	mov	r2, r3
 80054c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80054c6:	6013      	str	r3, [r2, #0]
 80054c8:	e008      	b.n	80054dc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	015a      	lsls	r2, r3, #5
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	4413      	add	r3, r2
 80054d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d6:	461a      	mov	r2, r3
 80054d8:	2300      	movs	r3, #0
 80054da:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e8:	461a      	mov	r2, r3
 80054ea:	2300      	movs	r3, #0
 80054ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	015a      	lsls	r2, r3, #5
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	4413      	add	r3, r2
 80054f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054fa:	461a      	mov	r2, r3
 80054fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005500:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	3301      	adds	r3, #1
 8005506:	613b      	str	r3, [r7, #16]
 8005508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	429a      	cmp	r2, r3
 800550e:	d3b7      	bcc.n	8005480 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800551e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005522:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005530:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005534:	2b00      	cmp	r3, #0
 8005536:	d105      	bne.n	8005544 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	f043 0210 	orr.w	r2, r3, #16
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	699a      	ldr	r2, [r3, #24]
 8005548:	4b0f      	ldr	r3, [pc, #60]	; (8005588 <USB_DevInit+0x2c4>)
 800554a:	4313      	orrs	r3, r2
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005552:	2b00      	cmp	r3, #0
 8005554:	d005      	beq.n	8005562 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	f043 0208 	orr.w	r2, r3, #8
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005564:	2b01      	cmp	r3, #1
 8005566:	d107      	bne.n	8005578 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005570:	f043 0304 	orr.w	r3, r3, #4
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005578:	7dfb      	ldrb	r3, [r7, #23]
}
 800557a:	4618      	mov	r0, r3
 800557c:	3718      	adds	r7, #24
 800557e:	46bd      	mov	sp, r7
 8005580:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005584:	b004      	add	sp, #16
 8005586:	4770      	bx	lr
 8005588:	803c3800 	.word	0x803c3800

0800558c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005596:	2300      	movs	r3, #0
 8005598:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	3301      	adds	r3, #1
 800559e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	4a13      	ldr	r2, [pc, #76]	; (80055f0 <USB_FlushTxFifo+0x64>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d901      	bls.n	80055ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e01b      	b.n	80055e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	daf2      	bge.n	800559a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80055b4:	2300      	movs	r3, #0
 80055b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	019b      	lsls	r3, r3, #6
 80055bc:	f043 0220 	orr.w	r2, r3, #32
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	3301      	adds	r3, #1
 80055c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	4a08      	ldr	r2, [pc, #32]	; (80055f0 <USB_FlushTxFifo+0x64>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d901      	bls.n	80055d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e006      	b.n	80055e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	f003 0320 	and.w	r3, r3, #32
 80055de:	2b20      	cmp	r3, #32
 80055e0:	d0f0      	beq.n	80055c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3714      	adds	r7, #20
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr
 80055f0:	00030d40 	.word	0x00030d40

080055f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055fc:	2300      	movs	r3, #0
 80055fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	3301      	adds	r3, #1
 8005604:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	4a11      	ldr	r2, [pc, #68]	; (8005650 <USB_FlushRxFifo+0x5c>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d901      	bls.n	8005612 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e018      	b.n	8005644 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	2b00      	cmp	r3, #0
 8005618:	daf2      	bge.n	8005600 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800561a:	2300      	movs	r3, #0
 800561c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2210      	movs	r2, #16
 8005622:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	3301      	adds	r3, #1
 8005628:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	4a08      	ldr	r2, [pc, #32]	; (8005650 <USB_FlushRxFifo+0x5c>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d901      	bls.n	8005636 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e006      	b.n	8005644 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	f003 0310 	and.w	r3, r3, #16
 800563e:	2b10      	cmp	r3, #16
 8005640:	d0f0      	beq.n	8005624 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr
 8005650:	00030d40 	.word	0x00030d40

08005654 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	460b      	mov	r3, r1
 800565e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	78fb      	ldrb	r3, [r7, #3]
 800566e:	68f9      	ldr	r1, [r7, #12]
 8005670:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005674:	4313      	orrs	r3, r2
 8005676:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr

08005686 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005686:	b480      	push	{r7}
 8005688:	b087      	sub	sp, #28
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f003 0306 	and.w	r3, r3, #6
 800569e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d102      	bne.n	80056ac <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80056a6:	2300      	movs	r3, #0
 80056a8:	75fb      	strb	r3, [r7, #23]
 80056aa:	e00a      	b.n	80056c2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d002      	beq.n	80056b8 <USB_GetDevSpeed+0x32>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2b06      	cmp	r3, #6
 80056b6:	d102      	bne.n	80056be <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80056b8:	2302      	movs	r3, #2
 80056ba:	75fb      	strb	r3, [r7, #23]
 80056bc:	e001      	b.n	80056c2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80056be:	230f      	movs	r3, #15
 80056c0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80056c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	371c      	adds	r7, #28
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	785b      	ldrb	r3, [r3, #1]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d13a      	bne.n	8005762 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056f2:	69da      	ldr	r2, [r3, #28]
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	f003 030f 	and.w	r3, r3, #15
 80056fc:	2101      	movs	r1, #1
 80056fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005702:	b29b      	uxth	r3, r3
 8005704:	68f9      	ldr	r1, [r7, #12]
 8005706:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800570a:	4313      	orrs	r3, r2
 800570c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	4413      	add	r3, r2
 8005716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d155      	bne.n	80057d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	015a      	lsls	r2, r3, #5
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	4413      	add	r3, r2
 800572c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	791b      	ldrb	r3, [r3, #4]
 800573e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005740:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	059b      	lsls	r3, r3, #22
 8005746:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005748:	4313      	orrs	r3, r2
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	0151      	lsls	r1, r2, #5
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	440a      	add	r2, r1
 8005752:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800575a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800575e:	6013      	str	r3, [r2, #0]
 8005760:	e036      	b.n	80057d0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005768:	69da      	ldr	r2, [r3, #28]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	f003 030f 	and.w	r3, r3, #15
 8005772:	2101      	movs	r1, #1
 8005774:	fa01 f303 	lsl.w	r3, r1, r3
 8005778:	041b      	lsls	r3, r3, #16
 800577a:	68f9      	ldr	r1, [r7, #12]
 800577c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005780:	4313      	orrs	r3, r2
 8005782:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	015a      	lsls	r2, r3, #5
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	4413      	add	r3, r2
 800578c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d11a      	bne.n	80057d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	015a      	lsls	r2, r3, #5
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	791b      	ldrb	r3, [r3, #4]
 80057b4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80057b6:	430b      	orrs	r3, r1
 80057b8:	4313      	orrs	r3, r2
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	0151      	lsls	r1, r2, #5
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	440a      	add	r2, r1
 80057c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057ce:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
	...

080057e0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	785b      	ldrb	r3, [r3, #1]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d161      	bne.n	80058c0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	015a      	lsls	r2, r3, #5
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	4413      	add	r3, r2
 8005804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800580e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005812:	d11f      	bne.n	8005854 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	4413      	add	r3, r2
 800581c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68ba      	ldr	r2, [r7, #8]
 8005824:	0151      	lsls	r1, r2, #5
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	440a      	add	r2, r1
 800582a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800582e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005832:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	015a      	lsls	r2, r3, #5
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	4413      	add	r3, r2
 800583c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	0151      	lsls	r1, r2, #5
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	440a      	add	r2, r1
 800584a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800584e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005852:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800585a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	f003 030f 	and.w	r3, r3, #15
 8005864:	2101      	movs	r1, #1
 8005866:	fa01 f303 	lsl.w	r3, r1, r3
 800586a:	b29b      	uxth	r3, r3
 800586c:	43db      	mvns	r3, r3
 800586e:	68f9      	ldr	r1, [r7, #12]
 8005870:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005874:	4013      	ands	r3, r2
 8005876:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800587e:	69da      	ldr	r2, [r3, #28]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	f003 030f 	and.w	r3, r3, #15
 8005888:	2101      	movs	r1, #1
 800588a:	fa01 f303 	lsl.w	r3, r1, r3
 800588e:	b29b      	uxth	r3, r3
 8005890:	43db      	mvns	r3, r3
 8005892:	68f9      	ldr	r1, [r7, #12]
 8005894:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005898:	4013      	ands	r3, r2
 800589a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	015a      	lsls	r2, r3, #5
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	4413      	add	r3, r2
 80058a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	0159      	lsls	r1, r3, #5
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	440b      	add	r3, r1
 80058b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b6:	4619      	mov	r1, r3
 80058b8:	4b35      	ldr	r3, [pc, #212]	; (8005990 <USB_DeactivateEndpoint+0x1b0>)
 80058ba:	4013      	ands	r3, r2
 80058bc:	600b      	str	r3, [r1, #0]
 80058be:	e060      	b.n	8005982 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	015a      	lsls	r2, r3, #5
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	4413      	add	r3, r2
 80058c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058d6:	d11f      	bne.n	8005918 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	0151      	lsls	r1, r2, #5
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	440a      	add	r2, r1
 80058ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80058f6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	015a      	lsls	r2, r3, #5
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	4413      	add	r3, r2
 8005900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	0151      	lsls	r1, r2, #5
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	440a      	add	r2, r1
 800590e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005912:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005916:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800591e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	f003 030f 	and.w	r3, r3, #15
 8005928:	2101      	movs	r1, #1
 800592a:	fa01 f303 	lsl.w	r3, r1, r3
 800592e:	041b      	lsls	r3, r3, #16
 8005930:	43db      	mvns	r3, r3
 8005932:	68f9      	ldr	r1, [r7, #12]
 8005934:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005938:	4013      	ands	r3, r2
 800593a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005942:	69da      	ldr	r2, [r3, #28]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	f003 030f 	and.w	r3, r3, #15
 800594c:	2101      	movs	r1, #1
 800594e:	fa01 f303 	lsl.w	r3, r1, r3
 8005952:	041b      	lsls	r3, r3, #16
 8005954:	43db      	mvns	r3, r3
 8005956:	68f9      	ldr	r1, [r7, #12]
 8005958:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800595c:	4013      	ands	r3, r2
 800595e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	4413      	add	r3, r2
 8005968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	0159      	lsls	r1, r3, #5
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	440b      	add	r3, r1
 8005976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800597a:	4619      	mov	r1, r3
 800597c:	4b05      	ldr	r3, [pc, #20]	; (8005994 <USB_DeactivateEndpoint+0x1b4>)
 800597e:	4013      	ands	r3, r2
 8005980:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3714      	adds	r7, #20
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr
 8005990:	ec337800 	.word	0xec337800
 8005994:	eff37800 	.word	0xeff37800

08005998 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b08a      	sub	sp, #40	; 0x28
 800599c:	af02      	add	r7, sp, #8
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	4613      	mov	r3, r2
 80059a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	785b      	ldrb	r3, [r3, #1]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	f040 815c 	bne.w	8005c72 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d132      	bne.n	8005a28 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	015a      	lsls	r2, r3, #5
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	4413      	add	r3, r2
 80059ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	69ba      	ldr	r2, [r7, #24]
 80059d2:	0151      	lsls	r1, r2, #5
 80059d4:	69fa      	ldr	r2, [r7, #28]
 80059d6:	440a      	add	r2, r1
 80059d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	015a      	lsls	r2, r3, #5
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	4413      	add	r3, r2
 80059ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	69ba      	ldr	r2, [r7, #24]
 80059f6:	0151      	lsls	r1, r2, #5
 80059f8:	69fa      	ldr	r2, [r7, #28]
 80059fa:	440a      	add	r2, r1
 80059fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	015a      	lsls	r2, r3, #5
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	0151      	lsls	r1, r2, #5
 8005a18:	69fa      	ldr	r2, [r7, #28]
 8005a1a:	440a      	add	r2, r1
 8005a1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a20:	0cdb      	lsrs	r3, r3, #19
 8005a22:	04db      	lsls	r3, r3, #19
 8005a24:	6113      	str	r3, [r2, #16]
 8005a26:	e074      	b.n	8005b12 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	015a      	lsls	r2, r3, #5
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	69ba      	ldr	r2, [r7, #24]
 8005a38:	0151      	lsls	r1, r2, #5
 8005a3a:	69fa      	ldr	r2, [r7, #28]
 8005a3c:	440a      	add	r2, r1
 8005a3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a42:	0cdb      	lsrs	r3, r3, #19
 8005a44:	04db      	lsls	r3, r3, #19
 8005a46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	015a      	lsls	r2, r3, #5
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	4413      	add	r3, r2
 8005a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	69ba      	ldr	r2, [r7, #24]
 8005a58:	0151      	lsls	r1, r2, #5
 8005a5a:	69fa      	ldr	r2, [r7, #28]
 8005a5c:	440a      	add	r2, r1
 8005a5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a62:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a66:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	015a      	lsls	r2, r3, #5
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	4413      	add	r3, r2
 8005a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a78:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	6999      	ldr	r1, [r3, #24]
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	440b      	add	r3, r1
 8005a84:	1e59      	subs	r1, r3, #1
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a8e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005a90:	4b9d      	ldr	r3, [pc, #628]	; (8005d08 <USB_EPStartXfer+0x370>)
 8005a92:	400b      	ands	r3, r1
 8005a94:	69b9      	ldr	r1, [r7, #24]
 8005a96:	0148      	lsls	r0, r1, #5
 8005a98:	69f9      	ldr	r1, [r7, #28]
 8005a9a:	4401      	add	r1, r0
 8005a9c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab0:	691a      	ldr	r2, [r3, #16]
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005aba:	69b9      	ldr	r1, [r7, #24]
 8005abc:	0148      	lsls	r0, r1, #5
 8005abe:	69f9      	ldr	r1, [r7, #28]
 8005ac0:	4401      	add	r1, r0
 8005ac2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	791b      	ldrb	r3, [r3, #4]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d11f      	bne.n	8005b12 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	015a      	lsls	r2, r3, #5
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	4413      	add	r3, r2
 8005ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	0151      	lsls	r1, r2, #5
 8005ae4:	69fa      	ldr	r2, [r7, #28]
 8005ae6:	440a      	add	r2, r1
 8005ae8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aec:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005af0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	015a      	lsls	r2, r3, #5
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	4413      	add	r3, r2
 8005afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	69ba      	ldr	r2, [r7, #24]
 8005b02:	0151      	lsls	r1, r2, #5
 8005b04:	69fa      	ldr	r2, [r7, #28]
 8005b06:	440a      	add	r2, r1
 8005b08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b10:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005b12:	79fb      	ldrb	r3, [r7, #7]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d14b      	bne.n	8005bb0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	695b      	ldr	r3, [r3, #20]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d009      	beq.n	8005b34 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	015a      	lsls	r2, r3, #5
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	4413      	add	r3, r2
 8005b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	791b      	ldrb	r3, [r3, #4]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d128      	bne.n	8005b8e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d110      	bne.n	8005b6e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	015a      	lsls	r2, r3, #5
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	4413      	add	r3, r2
 8005b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	69ba      	ldr	r2, [r7, #24]
 8005b5c:	0151      	lsls	r1, r2, #5
 8005b5e:	69fa      	ldr	r2, [r7, #28]
 8005b60:	440a      	add	r2, r1
 8005b62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b6a:	6013      	str	r3, [r2, #0]
 8005b6c:	e00f      	b.n	8005b8e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	015a      	lsls	r2, r3, #5
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	69ba      	ldr	r2, [r7, #24]
 8005b7e:	0151      	lsls	r1, r2, #5
 8005b80:	69fa      	ldr	r2, [r7, #28]
 8005b82:	440a      	add	r2, r1
 8005b84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b8c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	015a      	lsls	r2, r3, #5
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	4413      	add	r3, r2
 8005b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	69ba      	ldr	r2, [r7, #24]
 8005b9e:	0151      	lsls	r1, r2, #5
 8005ba0:	69fa      	ldr	r2, [r7, #28]
 8005ba2:	440a      	add	r2, r1
 8005ba4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ba8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bac:	6013      	str	r3, [r2, #0]
 8005bae:	e133      	b.n	8005e18 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	015a      	lsls	r2, r3, #5
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	69ba      	ldr	r2, [r7, #24]
 8005bc0:	0151      	lsls	r1, r2, #5
 8005bc2:	69fa      	ldr	r2, [r7, #28]
 8005bc4:	440a      	add	r2, r1
 8005bc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bce:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	791b      	ldrb	r3, [r3, #4]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d015      	beq.n	8005c04 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f000 811b 	beq.w	8005e18 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	f003 030f 	and.w	r3, r3, #15
 8005bf2:	2101      	movs	r1, #1
 8005bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8005bf8:	69f9      	ldr	r1, [r7, #28]
 8005bfa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	634b      	str	r3, [r1, #52]	; 0x34
 8005c02:	e109      	b.n	8005e18 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d110      	bne.n	8005c36 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	015a      	lsls	r2, r3, #5
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	69ba      	ldr	r2, [r7, #24]
 8005c24:	0151      	lsls	r1, r2, #5
 8005c26:	69fa      	ldr	r2, [r7, #28]
 8005c28:	440a      	add	r2, r1
 8005c2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c32:	6013      	str	r3, [r2, #0]
 8005c34:	e00f      	b.n	8005c56 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	69ba      	ldr	r2, [r7, #24]
 8005c46:	0151      	lsls	r1, r2, #5
 8005c48:	69fa      	ldr	r2, [r7, #28]
 8005c4a:	440a      	add	r2, r1
 8005c4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c54:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	6919      	ldr	r1, [r3, #16]
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	781a      	ldrb	r2, [r3, #0]
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	b298      	uxth	r0, r3
 8005c64:	79fb      	ldrb	r3, [r7, #7]
 8005c66:	9300      	str	r3, [sp, #0]
 8005c68:	4603      	mov	r3, r0
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f000 fade 	bl	800622c <USB_WritePacket>
 8005c70:	e0d2      	b.n	8005e18 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	015a      	lsls	r2, r3, #5
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	4413      	add	r3, r2
 8005c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	69ba      	ldr	r2, [r7, #24]
 8005c82:	0151      	lsls	r1, r2, #5
 8005c84:	69fa      	ldr	r2, [r7, #28]
 8005c86:	440a      	add	r2, r1
 8005c88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c8c:	0cdb      	lsrs	r3, r3, #19
 8005c8e:	04db      	lsls	r3, r3, #19
 8005c90:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	015a      	lsls	r2, r3, #5
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	4413      	add	r3, r2
 8005c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	0151      	lsls	r1, r2, #5
 8005ca4:	69fa      	ldr	r2, [r7, #28]
 8005ca6:	440a      	add	r2, r1
 8005ca8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005cb0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005cb4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d126      	bne.n	8005d0c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	015a      	lsls	r2, r3, #5
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cca:	691a      	ldr	r2, [r3, #16]
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cd4:	69b9      	ldr	r1, [r7, #24]
 8005cd6:	0148      	lsls	r0, r1, #5
 8005cd8:	69f9      	ldr	r1, [r7, #28]
 8005cda:	4401      	add	r1, r0
 8005cdc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	015a      	lsls	r2, r3, #5
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	69ba      	ldr	r2, [r7, #24]
 8005cf4:	0151      	lsls	r1, r2, #5
 8005cf6:	69fa      	ldr	r2, [r7, #28]
 8005cf8:	440a      	add	r2, r1
 8005cfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cfe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d02:	6113      	str	r3, [r2, #16]
 8005d04:	e03a      	b.n	8005d7c <USB_EPStartXfer+0x3e4>
 8005d06:	bf00      	nop
 8005d08:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	699a      	ldr	r2, [r3, #24]
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	4413      	add	r3, r2
 8005d16:	1e5a      	subs	r2, r3, #1
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d20:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	8afa      	ldrh	r2, [r7, #22]
 8005d28:	fb03 f202 	mul.w	r2, r3, r2
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	015a      	lsls	r2, r3, #5
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	4413      	add	r3, r2
 8005d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d3c:	691a      	ldr	r2, [r3, #16]
 8005d3e:	8afb      	ldrh	r3, [r7, #22]
 8005d40:	04d9      	lsls	r1, r3, #19
 8005d42:	4b38      	ldr	r3, [pc, #224]	; (8005e24 <USB_EPStartXfer+0x48c>)
 8005d44:	400b      	ands	r3, r1
 8005d46:	69b9      	ldr	r1, [r7, #24]
 8005d48:	0148      	lsls	r0, r1, #5
 8005d4a:	69f9      	ldr	r1, [r7, #28]
 8005d4c:	4401      	add	r1, r0
 8005d4e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d52:	4313      	orrs	r3, r2
 8005d54:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	015a      	lsls	r2, r3, #5
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d62:	691a      	ldr	r2, [r3, #16]
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	69db      	ldr	r3, [r3, #28]
 8005d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d6c:	69b9      	ldr	r1, [r7, #24]
 8005d6e:	0148      	lsls	r0, r1, #5
 8005d70:	69f9      	ldr	r1, [r7, #28]
 8005d72:	4401      	add	r1, r0
 8005d74:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005d7c:	79fb      	ldrb	r3, [r7, #7]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d10d      	bne.n	8005d9e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d009      	beq.n	8005d9e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	6919      	ldr	r1, [r3, #16]
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	015a      	lsls	r2, r3, #5
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	4413      	add	r3, r2
 8005d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d9a:	460a      	mov	r2, r1
 8005d9c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	791b      	ldrb	r3, [r3, #4]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d128      	bne.n	8005df8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d110      	bne.n	8005dd8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	015a      	lsls	r2, r3, #5
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	69ba      	ldr	r2, [r7, #24]
 8005dc6:	0151      	lsls	r1, r2, #5
 8005dc8:	69fa      	ldr	r2, [r7, #28]
 8005dca:	440a      	add	r2, r1
 8005dcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dd0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005dd4:	6013      	str	r3, [r2, #0]
 8005dd6:	e00f      	b.n	8005df8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	015a      	lsls	r2, r3, #5
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	69ba      	ldr	r2, [r7, #24]
 8005de8:	0151      	lsls	r1, r2, #5
 8005dea:	69fa      	ldr	r2, [r7, #28]
 8005dec:	440a      	add	r2, r1
 8005dee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005df2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005df6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	015a      	lsls	r2, r3, #5
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	4413      	add	r3, r2
 8005e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	69ba      	ldr	r2, [r7, #24]
 8005e08:	0151      	lsls	r1, r2, #5
 8005e0a:	69fa      	ldr	r2, [r7, #28]
 8005e0c:	440a      	add	r2, r1
 8005e0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3720      	adds	r7, #32
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	1ff80000 	.word	0x1ff80000

08005e28 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b087      	sub	sp, #28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	4613      	mov	r3, r2
 8005e34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	785b      	ldrb	r3, [r3, #1]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	f040 80ce 	bne.w	8005fe6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d132      	bne.n	8005eb8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	015a      	lsls	r2, r3, #5
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	4413      	add	r3, r2
 8005e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	0151      	lsls	r1, r2, #5
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	440a      	add	r2, r1
 8005e68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e6c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e70:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	015a      	lsls	r2, r3, #5
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	0151      	lsls	r1, r2, #5
 8005e88:	697a      	ldr	r2, [r7, #20]
 8005e8a:	440a      	add	r2, r1
 8005e8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	015a      	lsls	r2, r3, #5
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	0151      	lsls	r1, r2, #5
 8005ea8:	697a      	ldr	r2, [r7, #20]
 8005eaa:	440a      	add	r2, r1
 8005eac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eb0:	0cdb      	lsrs	r3, r3, #19
 8005eb2:	04db      	lsls	r3, r3, #19
 8005eb4:	6113      	str	r3, [r2, #16]
 8005eb6:	e04e      	b.n	8005f56 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	015a      	lsls	r2, r3, #5
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	0151      	lsls	r1, r2, #5
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	440a      	add	r2, r1
 8005ece:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ed2:	0cdb      	lsrs	r3, r3, #19
 8005ed4:	04db      	lsls	r3, r3, #19
 8005ed6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	015a      	lsls	r2, r3, #5
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	4413      	add	r3, r2
 8005ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	0151      	lsls	r1, r2, #5
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	440a      	add	r2, r1
 8005eee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ef2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ef6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005efa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	699a      	ldr	r2, [r3, #24]
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d903      	bls.n	8005f10 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	68da      	ldr	r2, [r3, #12]
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	015a      	lsls	r2, r3, #5
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	4413      	add	r3, r2
 8005f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	0151      	lsls	r1, r2, #5
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	440a      	add	r2, r1
 8005f26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	015a      	lsls	r2, r3, #5
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f3c:	691a      	ldr	r2, [r3, #16]
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f46:	6939      	ldr	r1, [r7, #16]
 8005f48:	0148      	lsls	r0, r1, #5
 8005f4a:	6979      	ldr	r1, [r7, #20]
 8005f4c:	4401      	add	r1, r0
 8005f4e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005f52:	4313      	orrs	r3, r2
 8005f54:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005f56:	79fb      	ldrb	r3, [r7, #7]
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d11e      	bne.n	8005f9a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	695b      	ldr	r3, [r3, #20]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d009      	beq.n	8005f78 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	015a      	lsls	r2, r3, #5
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f70:	461a      	mov	r2, r3
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	695b      	ldr	r3, [r3, #20]
 8005f76:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	015a      	lsls	r2, r3, #5
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	4413      	add	r3, r2
 8005f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	0151      	lsls	r1, r2, #5
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	440a      	add	r2, r1
 8005f8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f96:	6013      	str	r3, [r2, #0]
 8005f98:	e097      	b.n	80060ca <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	015a      	lsls	r2, r3, #5
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	0151      	lsls	r1, r2, #5
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	440a      	add	r2, r1
 8005fb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fb4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fb8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f000 8083 	beq.w	80060ca <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	f003 030f 	and.w	r3, r3, #15
 8005fd4:	2101      	movs	r1, #1
 8005fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8005fda:	6979      	ldr	r1, [r7, #20]
 8005fdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	634b      	str	r3, [r1, #52]	; 0x34
 8005fe4:	e071      	b.n	80060ca <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	015a      	lsls	r2, r3, #5
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	4413      	add	r3, r2
 8005fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	0151      	lsls	r1, r2, #5
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	440a      	add	r2, r1
 8005ffc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006000:	0cdb      	lsrs	r3, r3, #19
 8006002:	04db      	lsls	r3, r3, #19
 8006004:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	015a      	lsls	r2, r3, #5
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	4413      	add	r3, r2
 800600e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	0151      	lsls	r1, r2, #5
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	440a      	add	r2, r1
 800601c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006020:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006024:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006028:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d003      	beq.n	800603a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	68da      	ldr	r2, [r3, #12]
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	68da      	ldr	r2, [r3, #12]
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	015a      	lsls	r2, r3, #5
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	4413      	add	r3, r2
 800604a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	0151      	lsls	r1, r2, #5
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	440a      	add	r2, r1
 8006058:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800605c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006060:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	015a      	lsls	r2, r3, #5
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	4413      	add	r3, r2
 800606a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800606e:	691a      	ldr	r2, [r3, #16]
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	69db      	ldr	r3, [r3, #28]
 8006074:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006078:	6939      	ldr	r1, [r7, #16]
 800607a:	0148      	lsls	r0, r1, #5
 800607c:	6979      	ldr	r1, [r7, #20]
 800607e:	4401      	add	r1, r0
 8006080:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006084:	4313      	orrs	r3, r2
 8006086:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006088:	79fb      	ldrb	r3, [r7, #7]
 800608a:	2b01      	cmp	r3, #1
 800608c:	d10d      	bne.n	80060aa <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d009      	beq.n	80060aa <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	6919      	ldr	r1, [r3, #16]
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	015a      	lsls	r2, r3, #5
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	4413      	add	r3, r2
 80060a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a6:	460a      	mov	r2, r1
 80060a8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	015a      	lsls	r2, r3, #5
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	4413      	add	r3, r2
 80060b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	0151      	lsls	r1, r2, #5
 80060bc:	697a      	ldr	r2, [r7, #20]
 80060be:	440a      	add	r2, r1
 80060c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	371c      	adds	r7, #28
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80060d8:	b480      	push	{r7}
 80060da:	b087      	sub	sp, #28
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80060e2:	2300      	movs	r3, #0
 80060e4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80060e6:	2300      	movs	r3, #0
 80060e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	785b      	ldrb	r3, [r3, #1]
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d14a      	bne.n	800618c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	015a      	lsls	r2, r3, #5
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	4413      	add	r3, r2
 8006100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800610a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800610e:	f040 8086 	bne.w	800621e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	015a      	lsls	r2, r3, #5
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	4413      	add	r3, r2
 800611c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	683a      	ldr	r2, [r7, #0]
 8006124:	7812      	ldrb	r2, [r2, #0]
 8006126:	0151      	lsls	r1, r2, #5
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	440a      	add	r2, r1
 800612c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006130:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006134:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	015a      	lsls	r2, r3, #5
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	4413      	add	r3, r2
 8006140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	683a      	ldr	r2, [r7, #0]
 8006148:	7812      	ldrb	r2, [r2, #0]
 800614a:	0151      	lsls	r1, r2, #5
 800614c:	693a      	ldr	r2, [r7, #16]
 800614e:	440a      	add	r2, r1
 8006150:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006154:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006158:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	3301      	adds	r3, #1
 800615e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f242 7210 	movw	r2, #10000	; 0x2710
 8006166:	4293      	cmp	r3, r2
 8006168:	d902      	bls.n	8006170 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	75fb      	strb	r3, [r7, #23]
          break;
 800616e:	e056      	b.n	800621e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	015a      	lsls	r2, r3, #5
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	4413      	add	r3, r2
 800617a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006184:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006188:	d0e7      	beq.n	800615a <USB_EPStopXfer+0x82>
 800618a:	e048      	b.n	800621e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	015a      	lsls	r2, r3, #5
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	4413      	add	r3, r2
 8006196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061a4:	d13b      	bne.n	800621e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	015a      	lsls	r2, r3, #5
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	4413      	add	r3, r2
 80061b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	683a      	ldr	r2, [r7, #0]
 80061b8:	7812      	ldrb	r2, [r2, #0]
 80061ba:	0151      	lsls	r1, r2, #5
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	440a      	add	r2, r1
 80061c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80061c8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	015a      	lsls	r2, r3, #5
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	683a      	ldr	r2, [r7, #0]
 80061dc:	7812      	ldrb	r2, [r2, #0]
 80061de:	0151      	lsls	r1, r2, #5
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	440a      	add	r2, r1
 80061e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	3301      	adds	r3, #1
 80061f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d902      	bls.n	8006204 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	75fb      	strb	r3, [r7, #23]
          break;
 8006202:	e00c      	b.n	800621e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	015a      	lsls	r2, r3, #5
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	4413      	add	r3, r2
 800620e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006218:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800621c:	d0e7      	beq.n	80061ee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800621e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006220:	4618      	mov	r0, r3
 8006222:	371c      	adds	r7, #28
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800622c:	b480      	push	{r7}
 800622e:	b089      	sub	sp, #36	; 0x24
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	4611      	mov	r1, r2
 8006238:	461a      	mov	r2, r3
 800623a:	460b      	mov	r3, r1
 800623c:	71fb      	strb	r3, [r7, #7]
 800623e:	4613      	mov	r3, r2
 8006240:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800624a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800624e:	2b00      	cmp	r3, #0
 8006250:	d123      	bne.n	800629a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006252:	88bb      	ldrh	r3, [r7, #4]
 8006254:	3303      	adds	r3, #3
 8006256:	089b      	lsrs	r3, r3, #2
 8006258:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800625a:	2300      	movs	r3, #0
 800625c:	61bb      	str	r3, [r7, #24]
 800625e:	e018      	b.n	8006292 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006260:	79fb      	ldrb	r3, [r7, #7]
 8006262:	031a      	lsls	r2, r3, #12
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	4413      	add	r3, r2
 8006268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800626c:	461a      	mov	r2, r3
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	3301      	adds	r3, #1
 8006278:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	3301      	adds	r3, #1
 800627e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	3301      	adds	r3, #1
 8006284:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	3301      	adds	r3, #1
 800628a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	3301      	adds	r3, #1
 8006290:	61bb      	str	r3, [r7, #24]
 8006292:	69ba      	ldr	r2, [r7, #24]
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	429a      	cmp	r2, r3
 8006298:	d3e2      	bcc.n	8006260 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3724      	adds	r7, #36	; 0x24
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b08b      	sub	sp, #44	; 0x2c
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	4613      	mov	r3, r2
 80062b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80062be:	88fb      	ldrh	r3, [r7, #6]
 80062c0:	089b      	lsrs	r3, r3, #2
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80062c6:	88fb      	ldrh	r3, [r7, #6]
 80062c8:	f003 0303 	and.w	r3, r3, #3
 80062cc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80062ce:	2300      	movs	r3, #0
 80062d0:	623b      	str	r3, [r7, #32]
 80062d2:	e014      	b.n	80062fe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062de:	601a      	str	r2, [r3, #0]
    pDest++;
 80062e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e2:	3301      	adds	r3, #1
 80062e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80062e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e8:	3301      	adds	r3, #1
 80062ea:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80062ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ee:	3301      	adds	r3, #1
 80062f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80062f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f4:	3301      	adds	r3, #1
 80062f6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80062f8:	6a3b      	ldr	r3, [r7, #32]
 80062fa:	3301      	adds	r3, #1
 80062fc:	623b      	str	r3, [r7, #32]
 80062fe:	6a3a      	ldr	r2, [r7, #32]
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	429a      	cmp	r2, r3
 8006304:	d3e6      	bcc.n	80062d4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006306:	8bfb      	ldrh	r3, [r7, #30]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d01e      	beq.n	800634a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800630c:	2300      	movs	r3, #0
 800630e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006316:	461a      	mov	r2, r3
 8006318:	f107 0310 	add.w	r3, r7, #16
 800631c:	6812      	ldr	r2, [r2, #0]
 800631e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006320:	693a      	ldr	r2, [r7, #16]
 8006322:	6a3b      	ldr	r3, [r7, #32]
 8006324:	b2db      	uxtb	r3, r3
 8006326:	00db      	lsls	r3, r3, #3
 8006328:	fa22 f303 	lsr.w	r3, r2, r3
 800632c:	b2da      	uxtb	r2, r3
 800632e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006330:	701a      	strb	r2, [r3, #0]
      i++;
 8006332:	6a3b      	ldr	r3, [r7, #32]
 8006334:	3301      	adds	r3, #1
 8006336:	623b      	str	r3, [r7, #32]
      pDest++;
 8006338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633a:	3301      	adds	r3, #1
 800633c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800633e:	8bfb      	ldrh	r3, [r7, #30]
 8006340:	3b01      	subs	r3, #1
 8006342:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006344:	8bfb      	ldrh	r3, [r7, #30]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d1ea      	bne.n	8006320 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800634a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800634c:	4618      	mov	r0, r3
 800634e:	372c      	adds	r7, #44	; 0x2c
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	785b      	ldrb	r3, [r3, #1]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d12c      	bne.n	80063ce <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	015a      	lsls	r2, r3, #5
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	4413      	add	r3, r2
 800637c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2b00      	cmp	r3, #0
 8006384:	db12      	blt.n	80063ac <USB_EPSetStall+0x54>
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00f      	beq.n	80063ac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	015a      	lsls	r2, r3, #5
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	4413      	add	r3, r2
 8006394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68ba      	ldr	r2, [r7, #8]
 800639c:	0151      	lsls	r1, r2, #5
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	440a      	add	r2, r1
 80063a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063aa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	015a      	lsls	r2, r3, #5
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	4413      	add	r3, r2
 80063b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68ba      	ldr	r2, [r7, #8]
 80063bc:	0151      	lsls	r1, r2, #5
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	440a      	add	r2, r1
 80063c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80063ca:	6013      	str	r3, [r2, #0]
 80063cc:	e02b      	b.n	8006426 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	015a      	lsls	r2, r3, #5
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	4413      	add	r3, r2
 80063d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	db12      	blt.n	8006406 <USB_EPSetStall+0xae>
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00f      	beq.n	8006406 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	015a      	lsls	r2, r3, #5
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	4413      	add	r3, r2
 80063ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	0151      	lsls	r1, r2, #5
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	440a      	add	r2, r1
 80063fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006400:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006404:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	015a      	lsls	r2, r3, #5
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	4413      	add	r3, r2
 800640e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68ba      	ldr	r2, [r7, #8]
 8006416:	0151      	lsls	r1, r2, #5
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	440a      	add	r2, r1
 800641c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006420:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006424:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3714      	adds	r7, #20
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	785b      	ldrb	r3, [r3, #1]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d128      	bne.n	80064a2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	015a      	lsls	r2, r3, #5
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	4413      	add	r3, r2
 8006458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68ba      	ldr	r2, [r7, #8]
 8006460:	0151      	lsls	r1, r2, #5
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	440a      	add	r2, r1
 8006466:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800646a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800646e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	791b      	ldrb	r3, [r3, #4]
 8006474:	2b03      	cmp	r3, #3
 8006476:	d003      	beq.n	8006480 <USB_EPClearStall+0x4c>
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	791b      	ldrb	r3, [r3, #4]
 800647c:	2b02      	cmp	r3, #2
 800647e:	d138      	bne.n	80064f2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	015a      	lsls	r2, r3, #5
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	4413      	add	r3, r2
 8006488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	0151      	lsls	r1, r2, #5
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	440a      	add	r2, r1
 8006496:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800649a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800649e:	6013      	str	r3, [r2, #0]
 80064a0:	e027      	b.n	80064f2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	015a      	lsls	r2, r3, #5
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	4413      	add	r3, r2
 80064aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68ba      	ldr	r2, [r7, #8]
 80064b2:	0151      	lsls	r1, r2, #5
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	440a      	add	r2, r1
 80064b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80064c0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	791b      	ldrb	r3, [r3, #4]
 80064c6:	2b03      	cmp	r3, #3
 80064c8:	d003      	beq.n	80064d2 <USB_EPClearStall+0x9e>
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	791b      	ldrb	r3, [r3, #4]
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d10f      	bne.n	80064f2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	015a      	lsls	r2, r3, #5
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	4413      	add	r3, r2
 80064da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68ba      	ldr	r2, [r7, #8]
 80064e2:	0151      	lsls	r1, r2, #5
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	440a      	add	r2, r1
 80064e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064f0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3714      	adds	r7, #20
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	460b      	mov	r3, r1
 800650a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800651e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006522:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	78fb      	ldrb	r3, [r7, #3]
 800652e:	011b      	lsls	r3, r3, #4
 8006530:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006534:	68f9      	ldr	r1, [r7, #12]
 8006536:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800653a:	4313      	orrs	r3, r2
 800653c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800653e:	2300      	movs	r3, #0
}
 8006540:	4618      	mov	r0, r3
 8006542:	3714      	adds	r7, #20
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006566:	f023 0303 	bic.w	r3, r3, #3
 800656a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800657a:	f023 0302 	bic.w	r3, r3, #2
 800657e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3714      	adds	r7, #20
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr

0800658e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800658e:	b480      	push	{r7}
 8006590:	b085      	sub	sp, #20
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80065a8:	f023 0303 	bic.w	r3, r3, #3
 80065ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065bc:	f043 0302 	orr.w	r3, r3, #2
 80065c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3714      	adds	r7, #20
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b085      	sub	sp, #20
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	695b      	ldr	r3, [r3, #20]
 80065dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	4013      	ands	r3, r2
 80065e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80065e8:	68fb      	ldr	r3, [r7, #12]
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3714      	adds	r7, #20
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b085      	sub	sp, #20
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006612:	69db      	ldr	r3, [r3, #28]
 8006614:	68ba      	ldr	r2, [r7, #8]
 8006616:	4013      	ands	r3, r2
 8006618:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	0c1b      	lsrs	r3, r3, #16
}
 800661e:	4618      	mov	r0, r3
 8006620:	3714      	adds	r7, #20
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr

0800662a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800662a:	b480      	push	{r7}
 800662c:	b085      	sub	sp, #20
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800663c:	699b      	ldr	r3, [r3, #24]
 800663e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006646:	69db      	ldr	r3, [r3, #28]
 8006648:	68ba      	ldr	r2, [r7, #8]
 800664a:	4013      	ands	r3, r2
 800664c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	b29b      	uxth	r3, r3
}
 8006652:	4618      	mov	r0, r3
 8006654:	3714      	adds	r7, #20
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800665e:	b480      	push	{r7}
 8006660:	b085      	sub	sp, #20
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
 8006666:	460b      	mov	r3, r1
 8006668:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800666e:	78fb      	ldrb	r3, [r7, #3]
 8006670:	015a      	lsls	r2, r3, #5
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	4413      	add	r3, r2
 8006676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	68ba      	ldr	r2, [r7, #8]
 8006688:	4013      	ands	r3, r2
 800668a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800668c:	68bb      	ldr	r3, [r7, #8]
}
 800668e:	4618      	mov	r0, r3
 8006690:	3714      	adds	r7, #20
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr

0800669a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800669a:	b480      	push	{r7}
 800669c:	b087      	sub	sp, #28
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
 80066a2:	460b      	mov	r3, r1
 80066a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066bc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80066be:	78fb      	ldrb	r3, [r7, #3]
 80066c0:	f003 030f 	and.w	r3, r3, #15
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	fa22 f303 	lsr.w	r3, r2, r3
 80066ca:	01db      	lsls	r3, r3, #7
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80066d4:	78fb      	ldrb	r3, [r7, #3]
 80066d6:	015a      	lsls	r2, r3, #5
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	4413      	add	r3, r2
 80066dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	4013      	ands	r3, r2
 80066e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80066e8:	68bb      	ldr	r3, [r7, #8]
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	371c      	adds	r7, #28
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr

080066f6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80066f6:	b480      	push	{r7}
 80066f8:	b083      	sub	sp, #12
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	f003 0301 	and.w	r3, r3, #1
}
 8006706:	4618      	mov	r0, r3
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr

08006712 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006712:	b480      	push	{r7}
 8006714:	b085      	sub	sp, #20
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800672c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006730:	f023 0307 	bic.w	r3, r3, #7
 8006734:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006748:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	3714      	adds	r7, #20
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006758:	b480      	push	{r7}
 800675a:	b087      	sub	sp, #28
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	460b      	mov	r3, r1
 8006762:	607a      	str	r2, [r7, #4]
 8006764:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	333c      	adds	r3, #60	; 0x3c
 800676e:	3304      	adds	r3, #4
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	4a26      	ldr	r2, [pc, #152]	; (8006810 <USB_EP0_OutStart+0xb8>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d90a      	bls.n	8006792 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006788:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800678c:	d101      	bne.n	8006792 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800678e:	2300      	movs	r3, #0
 8006790:	e037      	b.n	8006802 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006798:	461a      	mov	r2, r3
 800679a:	2300      	movs	r3, #0
 800679c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	697a      	ldr	r2, [r7, #20]
 80067a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	697a      	ldr	r2, [r7, #20]
 80067bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067c0:	f043 0318 	orr.w	r3, r3, #24
 80067c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	697a      	ldr	r2, [r7, #20]
 80067d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067d4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80067d8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80067da:	7afb      	ldrb	r3, [r7, #11]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d10f      	bne.n	8006800 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e6:	461a      	mov	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	697a      	ldr	r2, [r7, #20]
 80067f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067fa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80067fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006800:	2300      	movs	r3, #0
}
 8006802:	4618      	mov	r0, r3
 8006804:	371c      	adds	r7, #28
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	4f54300a 	.word	0x4f54300a

08006814 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800681c:	2300      	movs	r3, #0
 800681e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	3301      	adds	r3, #1
 8006824:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	4a13      	ldr	r2, [pc, #76]	; (8006878 <USB_CoreReset+0x64>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d901      	bls.n	8006832 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800682e:	2303      	movs	r3, #3
 8006830:	e01b      	b.n	800686a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	2b00      	cmp	r3, #0
 8006838:	daf2      	bge.n	8006820 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800683a:	2300      	movs	r3, #0
 800683c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	f043 0201 	orr.w	r2, r3, #1
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	3301      	adds	r3, #1
 800684e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	4a09      	ldr	r2, [pc, #36]	; (8006878 <USB_CoreReset+0x64>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d901      	bls.n	800685c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	e006      	b.n	800686a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	f003 0301 	and.w	r3, r3, #1
 8006864:	2b01      	cmp	r3, #1
 8006866:	d0f0      	beq.n	800684a <USB_CoreReset+0x36>

  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3714      	adds	r7, #20
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	00030d40 	.word	0x00030d40

0800687c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	460b      	mov	r3, r1
 8006886:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006888:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800688c:	f002 fc6a 	bl	8009164 <USBD_static_malloc>
 8006890:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d109      	bne.n	80068ac <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	32b0      	adds	r2, #176	; 0xb0
 80068a2:	2100      	movs	r1, #0
 80068a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80068a8:	2302      	movs	r3, #2
 80068aa:	e0d4      	b.n	8006a56 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80068ac:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80068b0:	2100      	movs	r1, #0
 80068b2:	68f8      	ldr	r0, [r7, #12]
 80068b4:	f002 fc9a 	bl	80091ec <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	32b0      	adds	r2, #176	; 0xb0
 80068c2:	68f9      	ldr	r1, [r7, #12]
 80068c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	32b0      	adds	r2, #176	; 0xb0
 80068d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	7c1b      	ldrb	r3, [r3, #16]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d138      	bne.n	8006956 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80068e4:	4b5e      	ldr	r3, [pc, #376]	; (8006a60 <USBD_CDC_Init+0x1e4>)
 80068e6:	7819      	ldrb	r1, [r3, #0]
 80068e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068ec:	2202      	movs	r2, #2
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f002 fb15 	bl	8008f1e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80068f4:	4b5a      	ldr	r3, [pc, #360]	; (8006a60 <USBD_CDC_Init+0x1e4>)
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	f003 020f 	and.w	r2, r3, #15
 80068fc:	6879      	ldr	r1, [r7, #4]
 80068fe:	4613      	mov	r3, r2
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	4413      	add	r3, r2
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	440b      	add	r3, r1
 8006908:	3324      	adds	r3, #36	; 0x24
 800690a:	2201      	movs	r2, #1
 800690c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800690e:	4b55      	ldr	r3, [pc, #340]	; (8006a64 <USBD_CDC_Init+0x1e8>)
 8006910:	7819      	ldrb	r1, [r3, #0]
 8006912:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006916:	2202      	movs	r2, #2
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f002 fb00 	bl	8008f1e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800691e:	4b51      	ldr	r3, [pc, #324]	; (8006a64 <USBD_CDC_Init+0x1e8>)
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	f003 020f 	and.w	r2, r3, #15
 8006926:	6879      	ldr	r1, [r7, #4]
 8006928:	4613      	mov	r3, r2
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	4413      	add	r3, r2
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	440b      	add	r3, r1
 8006932:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006936:	2201      	movs	r2, #1
 8006938:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800693a:	4b4b      	ldr	r3, [pc, #300]	; (8006a68 <USBD_CDC_Init+0x1ec>)
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	f003 020f 	and.w	r2, r3, #15
 8006942:	6879      	ldr	r1, [r7, #4]
 8006944:	4613      	mov	r3, r2
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	4413      	add	r3, r2
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	440b      	add	r3, r1
 800694e:	3326      	adds	r3, #38	; 0x26
 8006950:	2210      	movs	r2, #16
 8006952:	801a      	strh	r2, [r3, #0]
 8006954:	e035      	b.n	80069c2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006956:	4b42      	ldr	r3, [pc, #264]	; (8006a60 <USBD_CDC_Init+0x1e4>)
 8006958:	7819      	ldrb	r1, [r3, #0]
 800695a:	2340      	movs	r3, #64	; 0x40
 800695c:	2202      	movs	r2, #2
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f002 fadd 	bl	8008f1e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006964:	4b3e      	ldr	r3, [pc, #248]	; (8006a60 <USBD_CDC_Init+0x1e4>)
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	f003 020f 	and.w	r2, r3, #15
 800696c:	6879      	ldr	r1, [r7, #4]
 800696e:	4613      	mov	r3, r2
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	4413      	add	r3, r2
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	440b      	add	r3, r1
 8006978:	3324      	adds	r3, #36	; 0x24
 800697a:	2201      	movs	r2, #1
 800697c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800697e:	4b39      	ldr	r3, [pc, #228]	; (8006a64 <USBD_CDC_Init+0x1e8>)
 8006980:	7819      	ldrb	r1, [r3, #0]
 8006982:	2340      	movs	r3, #64	; 0x40
 8006984:	2202      	movs	r2, #2
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f002 fac9 	bl	8008f1e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800698c:	4b35      	ldr	r3, [pc, #212]	; (8006a64 <USBD_CDC_Init+0x1e8>)
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	f003 020f 	and.w	r2, r3, #15
 8006994:	6879      	ldr	r1, [r7, #4]
 8006996:	4613      	mov	r3, r2
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	4413      	add	r3, r2
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	440b      	add	r3, r1
 80069a0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80069a4:	2201      	movs	r2, #1
 80069a6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80069a8:	4b2f      	ldr	r3, [pc, #188]	; (8006a68 <USBD_CDC_Init+0x1ec>)
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	f003 020f 	and.w	r2, r3, #15
 80069b0:	6879      	ldr	r1, [r7, #4]
 80069b2:	4613      	mov	r3, r2
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	4413      	add	r3, r2
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	440b      	add	r3, r1
 80069bc:	3326      	adds	r3, #38	; 0x26
 80069be:	2210      	movs	r2, #16
 80069c0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80069c2:	4b29      	ldr	r3, [pc, #164]	; (8006a68 <USBD_CDC_Init+0x1ec>)
 80069c4:	7819      	ldrb	r1, [r3, #0]
 80069c6:	2308      	movs	r3, #8
 80069c8:	2203      	movs	r2, #3
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f002 faa7 	bl	8008f1e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80069d0:	4b25      	ldr	r3, [pc, #148]	; (8006a68 <USBD_CDC_Init+0x1ec>)
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	f003 020f 	and.w	r2, r3, #15
 80069d8:	6879      	ldr	r1, [r7, #4]
 80069da:	4613      	mov	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	4413      	add	r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	440b      	add	r3, r1
 80069e4:	3324      	adds	r3, #36	; 0x24
 80069e6:	2201      	movs	r2, #1
 80069e8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	33b0      	adds	r3, #176	; 0xb0
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	4413      	add	r3, r2
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d101      	bne.n	8006a24 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006a20:	2302      	movs	r3, #2
 8006a22:	e018      	b.n	8006a56 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	7c1b      	ldrb	r3, [r3, #16]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d10a      	bne.n	8006a42 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006a2c:	4b0d      	ldr	r3, [pc, #52]	; (8006a64 <USBD_CDC_Init+0x1e8>)
 8006a2e:	7819      	ldrb	r1, [r3, #0]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f002 fb5e 	bl	80090fc <USBD_LL_PrepareReceive>
 8006a40:	e008      	b.n	8006a54 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006a42:	4b08      	ldr	r3, [pc, #32]	; (8006a64 <USBD_CDC_Init+0x1e8>)
 8006a44:	7819      	ldrb	r1, [r3, #0]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a4c:	2340      	movs	r3, #64	; 0x40
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f002 fb54 	bl	80090fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	200000b3 	.word	0x200000b3
 8006a64:	200000b4 	.word	0x200000b4
 8006a68:	200000b5 	.word	0x200000b5

08006a6c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	460b      	mov	r3, r1
 8006a76:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006a78:	4b3a      	ldr	r3, [pc, #232]	; (8006b64 <USBD_CDC_DeInit+0xf8>)
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f002 fa73 	bl	8008f6a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006a84:	4b37      	ldr	r3, [pc, #220]	; (8006b64 <USBD_CDC_DeInit+0xf8>)
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	f003 020f 	and.w	r2, r3, #15
 8006a8c:	6879      	ldr	r1, [r7, #4]
 8006a8e:	4613      	mov	r3, r2
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	4413      	add	r3, r2
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	440b      	add	r3, r1
 8006a98:	3324      	adds	r3, #36	; 0x24
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006a9e:	4b32      	ldr	r3, [pc, #200]	; (8006b68 <USBD_CDC_DeInit+0xfc>)
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f002 fa60 	bl	8008f6a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006aaa:	4b2f      	ldr	r3, [pc, #188]	; (8006b68 <USBD_CDC_DeInit+0xfc>)
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	f003 020f 	and.w	r2, r3, #15
 8006ab2:	6879      	ldr	r1, [r7, #4]
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	4413      	add	r3, r2
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	440b      	add	r3, r1
 8006abe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006ac6:	4b29      	ldr	r3, [pc, #164]	; (8006b6c <USBD_CDC_DeInit+0x100>)
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	4619      	mov	r1, r3
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f002 fa4c 	bl	8008f6a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006ad2:	4b26      	ldr	r3, [pc, #152]	; (8006b6c <USBD_CDC_DeInit+0x100>)
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	f003 020f 	and.w	r2, r3, #15
 8006ada:	6879      	ldr	r1, [r7, #4]
 8006adc:	4613      	mov	r3, r2
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	4413      	add	r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	440b      	add	r3, r1
 8006ae6:	3324      	adds	r3, #36	; 0x24
 8006ae8:	2200      	movs	r2, #0
 8006aea:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006aec:	4b1f      	ldr	r3, [pc, #124]	; (8006b6c <USBD_CDC_DeInit+0x100>)
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	f003 020f 	and.w	r2, r3, #15
 8006af4:	6879      	ldr	r1, [r7, #4]
 8006af6:	4613      	mov	r3, r2
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	4413      	add	r3, r2
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	440b      	add	r3, r1
 8006b00:	3326      	adds	r3, #38	; 0x26
 8006b02:	2200      	movs	r2, #0
 8006b04:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	32b0      	adds	r2, #176	; 0xb0
 8006b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d01f      	beq.n	8006b58 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	33b0      	adds	r3, #176	; 0xb0
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	4413      	add	r3, r2
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	32b0      	adds	r2, #176	; 0xb0
 8006b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f002 fb20 	bl	8009180 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	32b0      	adds	r2, #176	; 0xb0
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3708      	adds	r7, #8
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	200000b3 	.word	0x200000b3
 8006b68:	200000b4 	.word	0x200000b4
 8006b6c:	200000b5 	.word	0x200000b5

08006b70 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b086      	sub	sp, #24
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	32b0      	adds	r2, #176	; 0xb0
 8006b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b88:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b92:	2300      	movs	r3, #0
 8006b94:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d101      	bne.n	8006ba0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	e0bf      	b.n	8006d20 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d050      	beq.n	8006c4e <USBD_CDC_Setup+0xde>
 8006bac:	2b20      	cmp	r3, #32
 8006bae:	f040 80af 	bne.w	8006d10 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	88db      	ldrh	r3, [r3, #6]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d03a      	beq.n	8006c30 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	b25b      	sxtb	r3, r3
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	da1b      	bge.n	8006bfc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	33b0      	adds	r3, #176	; 0xb0
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	4413      	add	r3, r2
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	683a      	ldr	r2, [r7, #0]
 8006bd8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006bda:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006bdc:	683a      	ldr	r2, [r7, #0]
 8006bde:	88d2      	ldrh	r2, [r2, #6]
 8006be0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	88db      	ldrh	r3, [r3, #6]
 8006be6:	2b07      	cmp	r3, #7
 8006be8:	bf28      	it	cs
 8006bea:	2307      	movcs	r3, #7
 8006bec:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	89fa      	ldrh	r2, [r7, #14]
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f001 fd43 	bl	8008680 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006bfa:	e090      	b.n	8006d1e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	785a      	ldrb	r2, [r3, #1]
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	88db      	ldrh	r3, [r3, #6]
 8006c0a:	2b3f      	cmp	r3, #63	; 0x3f
 8006c0c:	d803      	bhi.n	8006c16 <USBD_CDC_Setup+0xa6>
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	88db      	ldrh	r3, [r3, #6]
 8006c12:	b2da      	uxtb	r2, r3
 8006c14:	e000      	b.n	8006c18 <USBD_CDC_Setup+0xa8>
 8006c16:	2240      	movs	r2, #64	; 0x40
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006c1e:	6939      	ldr	r1, [r7, #16]
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006c26:	461a      	mov	r2, r3
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f001 fd55 	bl	80086d8 <USBD_CtlPrepareRx>
      break;
 8006c2e:	e076      	b.n	8006d1e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	33b0      	adds	r3, #176	; 0xb0
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4413      	add	r3, r2
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	683a      	ldr	r2, [r7, #0]
 8006c44:	7850      	ldrb	r0, [r2, #1]
 8006c46:	2200      	movs	r2, #0
 8006c48:	6839      	ldr	r1, [r7, #0]
 8006c4a:	4798      	blx	r3
      break;
 8006c4c:	e067      	b.n	8006d1e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	785b      	ldrb	r3, [r3, #1]
 8006c52:	2b0b      	cmp	r3, #11
 8006c54:	d851      	bhi.n	8006cfa <USBD_CDC_Setup+0x18a>
 8006c56:	a201      	add	r2, pc, #4	; (adr r2, 8006c5c <USBD_CDC_Setup+0xec>)
 8006c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c5c:	08006c8d 	.word	0x08006c8d
 8006c60:	08006d09 	.word	0x08006d09
 8006c64:	08006cfb 	.word	0x08006cfb
 8006c68:	08006cfb 	.word	0x08006cfb
 8006c6c:	08006cfb 	.word	0x08006cfb
 8006c70:	08006cfb 	.word	0x08006cfb
 8006c74:	08006cfb 	.word	0x08006cfb
 8006c78:	08006cfb 	.word	0x08006cfb
 8006c7c:	08006cfb 	.word	0x08006cfb
 8006c80:	08006cfb 	.word	0x08006cfb
 8006c84:	08006cb7 	.word	0x08006cb7
 8006c88:	08006ce1 	.word	0x08006ce1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	2b03      	cmp	r3, #3
 8006c96:	d107      	bne.n	8006ca8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006c98:	f107 030a 	add.w	r3, r7, #10
 8006c9c:	2202      	movs	r2, #2
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f001 fced 	bl	8008680 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ca6:	e032      	b.n	8006d0e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006ca8:	6839      	ldr	r1, [r7, #0]
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f001 fc77 	bl	800859e <USBD_CtlError>
            ret = USBD_FAIL;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	75fb      	strb	r3, [r7, #23]
          break;
 8006cb4:	e02b      	b.n	8006d0e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	2b03      	cmp	r3, #3
 8006cc0:	d107      	bne.n	8006cd2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006cc2:	f107 030d 	add.w	r3, r7, #13
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	4619      	mov	r1, r3
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f001 fcd8 	bl	8008680 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006cd0:	e01d      	b.n	8006d0e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006cd2:	6839      	ldr	r1, [r7, #0]
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f001 fc62 	bl	800859e <USBD_CtlError>
            ret = USBD_FAIL;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	75fb      	strb	r3, [r7, #23]
          break;
 8006cde:	e016      	b.n	8006d0e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	2b03      	cmp	r3, #3
 8006cea:	d00f      	beq.n	8006d0c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006cec:	6839      	ldr	r1, [r7, #0]
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f001 fc55 	bl	800859e <USBD_CtlError>
            ret = USBD_FAIL;
 8006cf4:	2303      	movs	r3, #3
 8006cf6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006cf8:	e008      	b.n	8006d0c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006cfa:	6839      	ldr	r1, [r7, #0]
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f001 fc4e 	bl	800859e <USBD_CtlError>
          ret = USBD_FAIL;
 8006d02:	2303      	movs	r3, #3
 8006d04:	75fb      	strb	r3, [r7, #23]
          break;
 8006d06:	e002      	b.n	8006d0e <USBD_CDC_Setup+0x19e>
          break;
 8006d08:	bf00      	nop
 8006d0a:	e008      	b.n	8006d1e <USBD_CDC_Setup+0x1ae>
          break;
 8006d0c:	bf00      	nop
      }
      break;
 8006d0e:	e006      	b.n	8006d1e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006d10:	6839      	ldr	r1, [r7, #0]
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f001 fc43 	bl	800859e <USBD_CtlError>
      ret = USBD_FAIL;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	75fb      	strb	r3, [r7, #23]
      break;
 8006d1c:	bf00      	nop
  }

  return (uint8_t)ret;
 8006d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3718      	adds	r7, #24
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	460b      	mov	r3, r1
 8006d32:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006d3a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	32b0      	adds	r2, #176	; 0xb0
 8006d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d101      	bne.n	8006d52 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006d4e:	2303      	movs	r3, #3
 8006d50:	e065      	b.n	8006e1e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	32b0      	adds	r2, #176	; 0xb0
 8006d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d60:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006d62:	78fb      	ldrb	r3, [r7, #3]
 8006d64:	f003 020f 	and.w	r2, r3, #15
 8006d68:	6879      	ldr	r1, [r7, #4]
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	4413      	add	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	440b      	add	r3, r1
 8006d74:	3318      	adds	r3, #24
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d02f      	beq.n	8006ddc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006d7c:	78fb      	ldrb	r3, [r7, #3]
 8006d7e:	f003 020f 	and.w	r2, r3, #15
 8006d82:	6879      	ldr	r1, [r7, #4]
 8006d84:	4613      	mov	r3, r2
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	4413      	add	r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	440b      	add	r3, r1
 8006d8e:	3318      	adds	r3, #24
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	78fb      	ldrb	r3, [r7, #3]
 8006d94:	f003 010f 	and.w	r1, r3, #15
 8006d98:	68f8      	ldr	r0, [r7, #12]
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	00db      	lsls	r3, r3, #3
 8006d9e:	440b      	add	r3, r1
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4403      	add	r3, r0
 8006da4:	3348      	adds	r3, #72	; 0x48
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	fbb2 f1f3 	udiv	r1, r2, r3
 8006dac:	fb01 f303 	mul.w	r3, r1, r3
 8006db0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d112      	bne.n	8006ddc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006db6:	78fb      	ldrb	r3, [r7, #3]
 8006db8:	f003 020f 	and.w	r2, r3, #15
 8006dbc:	6879      	ldr	r1, [r7, #4]
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	4413      	add	r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	440b      	add	r3, r1
 8006dc8:	3318      	adds	r3, #24
 8006dca:	2200      	movs	r2, #0
 8006dcc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006dce:	78f9      	ldrb	r1, [r7, #3]
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f002 f970 	bl	80090ba <USBD_LL_Transmit>
 8006dda:	e01f      	b.n	8006e1c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	33b0      	adds	r3, #176	; 0xb0
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4413      	add	r3, r2
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d010      	beq.n	8006e1c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	33b0      	adds	r3, #176	; 0xb0
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	4413      	add	r3, r2
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	68ba      	ldr	r2, [r7, #8]
 8006e0e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006e12:	68ba      	ldr	r2, [r7, #8]
 8006e14:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006e18:	78fa      	ldrb	r2, [r7, #3]
 8006e1a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b084      	sub	sp, #16
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
 8006e2e:	460b      	mov	r3, r1
 8006e30:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	32b0      	adds	r2, #176	; 0xb0
 8006e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e40:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	32b0      	adds	r2, #176	; 0xb0
 8006e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d101      	bne.n	8006e58 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006e54:	2303      	movs	r3, #3
 8006e56:	e01a      	b.n	8006e8e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006e58:	78fb      	ldrb	r3, [r7, #3]
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f002 f96e 	bl	800913e <USBD_LL_GetRxDataSize>
 8006e62:	4602      	mov	r2, r0
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	33b0      	adds	r3, #176	; 0xb0
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	4413      	add	r3, r2
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	68fa      	ldr	r2, [r7, #12]
 8006e7e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006e82:	68fa      	ldr	r2, [r7, #12]
 8006e84:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006e88:	4611      	mov	r1, r2
 8006e8a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3710      	adds	r7, #16
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}

08006e96 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006e96:	b580      	push	{r7, lr}
 8006e98:	b084      	sub	sp, #16
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	32b0      	adds	r2, #176	; 0xb0
 8006ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d101      	bne.n	8006eb8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	e025      	b.n	8006f04 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	33b0      	adds	r3, #176	; 0xb0
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4413      	add	r3, r2
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d01a      	beq.n	8006f02 <USBD_CDC_EP0_RxReady+0x6c>
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006ed2:	2bff      	cmp	r3, #255	; 0xff
 8006ed4:	d015      	beq.n	8006f02 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	33b0      	adds	r3, #176	; 0xb0
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	4413      	add	r3, r2
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006eee:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006ef0:	68fa      	ldr	r2, [r7, #12]
 8006ef2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006ef6:	b292      	uxth	r2, r2
 8006ef8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	22ff      	movs	r2, #255	; 0xff
 8006efe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3710      	adds	r7, #16
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b086      	sub	sp, #24
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006f14:	2182      	movs	r1, #130	; 0x82
 8006f16:	4818      	ldr	r0, [pc, #96]	; (8006f78 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006f18:	f000 fd09 	bl	800792e <USBD_GetEpDesc>
 8006f1c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006f1e:	2101      	movs	r1, #1
 8006f20:	4815      	ldr	r0, [pc, #84]	; (8006f78 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006f22:	f000 fd04 	bl	800792e <USBD_GetEpDesc>
 8006f26:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006f28:	2181      	movs	r1, #129	; 0x81
 8006f2a:	4813      	ldr	r0, [pc, #76]	; (8006f78 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006f2c:	f000 fcff 	bl	800792e <USBD_GetEpDesc>
 8006f30:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d002      	beq.n	8006f3e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	2210      	movs	r2, #16
 8006f3c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d006      	beq.n	8006f52 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f4c:	711a      	strb	r2, [r3, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d006      	beq.n	8006f66 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f60:	711a      	strb	r2, [r3, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2243      	movs	r2, #67	; 0x43
 8006f6a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006f6c:	4b02      	ldr	r3, [pc, #8]	; (8006f78 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3718      	adds	r7, #24
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	20000070 	.word	0x20000070

08006f7c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b086      	sub	sp, #24
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006f84:	2182      	movs	r1, #130	; 0x82
 8006f86:	4818      	ldr	r0, [pc, #96]	; (8006fe8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006f88:	f000 fcd1 	bl	800792e <USBD_GetEpDesc>
 8006f8c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006f8e:	2101      	movs	r1, #1
 8006f90:	4815      	ldr	r0, [pc, #84]	; (8006fe8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006f92:	f000 fccc 	bl	800792e <USBD_GetEpDesc>
 8006f96:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006f98:	2181      	movs	r1, #129	; 0x81
 8006f9a:	4813      	ldr	r0, [pc, #76]	; (8006fe8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006f9c:	f000 fcc7 	bl	800792e <USBD_GetEpDesc>
 8006fa0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d002      	beq.n	8006fae <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	2210      	movs	r2, #16
 8006fac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d006      	beq.n	8006fc2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	711a      	strb	r2, [r3, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f042 0202 	orr.w	r2, r2, #2
 8006fc0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d006      	beq.n	8006fd6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	711a      	strb	r2, [r3, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f042 0202 	orr.w	r2, r2, #2
 8006fd4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2243      	movs	r2, #67	; 0x43
 8006fda:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006fdc:	4b02      	ldr	r3, [pc, #8]	; (8006fe8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3718      	adds	r7, #24
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	20000070 	.word	0x20000070

08006fec <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b086      	sub	sp, #24
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006ff4:	2182      	movs	r1, #130	; 0x82
 8006ff6:	4818      	ldr	r0, [pc, #96]	; (8007058 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006ff8:	f000 fc99 	bl	800792e <USBD_GetEpDesc>
 8006ffc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006ffe:	2101      	movs	r1, #1
 8007000:	4815      	ldr	r0, [pc, #84]	; (8007058 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007002:	f000 fc94 	bl	800792e <USBD_GetEpDesc>
 8007006:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007008:	2181      	movs	r1, #129	; 0x81
 800700a:	4813      	ldr	r0, [pc, #76]	; (8007058 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800700c:	f000 fc8f 	bl	800792e <USBD_GetEpDesc>
 8007010:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d002      	beq.n	800701e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	2210      	movs	r2, #16
 800701c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d006      	beq.n	8007032 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	2200      	movs	r2, #0
 8007028:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800702c:	711a      	strb	r2, [r3, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d006      	beq.n	8007046 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2200      	movs	r2, #0
 800703c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007040:	711a      	strb	r2, [r3, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2243      	movs	r2, #67	; 0x43
 800704a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800704c:	4b02      	ldr	r3, [pc, #8]	; (8007058 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800704e:	4618      	mov	r0, r3
 8007050:	3718      	adds	r7, #24
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	20000070 	.word	0x20000070

0800705c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	220a      	movs	r2, #10
 8007068:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800706a:	4b03      	ldr	r3, [pc, #12]	; (8007078 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800706c:	4618      	mov	r0, r3
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr
 8007078:	2000002c 	.word	0x2000002c

0800707c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d101      	bne.n	8007090 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800708c:	2303      	movs	r3, #3
 800708e:	e009      	b.n	80070a4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	33b0      	adds	r3, #176	; 0xb0
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	4413      	add	r3, r2
 800709e:	683a      	ldr	r2, [r7, #0]
 80070a0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b087      	sub	sp, #28
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	32b0      	adds	r2, #176	; 0xb0
 80070c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070ca:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d101      	bne.n	80070d6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80070d2:	2303      	movs	r3, #3
 80070d4:	e008      	b.n	80070e8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	68ba      	ldr	r2, [r7, #8]
 80070da:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80070e6:	2300      	movs	r3, #0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	371c      	adds	r7, #28
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	32b0      	adds	r2, #176	; 0xb0
 8007108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800710c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d101      	bne.n	8007118 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007114:	2303      	movs	r3, #3
 8007116:	e004      	b.n	8007122 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	683a      	ldr	r2, [r7, #0]
 800711c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	3714      	adds	r7, #20
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr
	...

08007130 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	32b0      	adds	r2, #176	; 0xb0
 8007142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007146:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	32b0      	adds	r2, #176	; 0xb0
 8007152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d101      	bne.n	800715e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800715a:	2303      	movs	r3, #3
 800715c:	e018      	b.n	8007190 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	7c1b      	ldrb	r3, [r3, #16]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d10a      	bne.n	800717c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007166:	4b0c      	ldr	r3, [pc, #48]	; (8007198 <USBD_CDC_ReceivePacket+0x68>)
 8007168:	7819      	ldrb	r1, [r3, #0]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007170:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f001 ffc1 	bl	80090fc <USBD_LL_PrepareReceive>
 800717a:	e008      	b.n	800718e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800717c:	4b06      	ldr	r3, [pc, #24]	; (8007198 <USBD_CDC_ReceivePacket+0x68>)
 800717e:	7819      	ldrb	r1, [r3, #0]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007186:	2340      	movs	r3, #64	; 0x40
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f001 ffb7 	bl	80090fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3710      	adds	r7, #16
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	200000b4 	.word	0x200000b4

0800719c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	4613      	mov	r3, r2
 80071a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d101      	bne.n	80071b4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80071b0:	2303      	movs	r3, #3
 80071b2:	e01f      	b.n	80071f4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2200      	movs	r2, #0
 80071c0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d003      	beq.n	80071da <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	68ba      	ldr	r2, [r7, #8]
 80071d6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2201      	movs	r2, #1
 80071de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	79fa      	ldrb	r2, [r7, #7]
 80071e6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80071e8:	68f8      	ldr	r0, [r7, #12]
 80071ea:	f001 fe31 	bl	8008e50 <USBD_LL_Init>
 80071ee:	4603      	mov	r3, r0
 80071f0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80071f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3718      	adds	r7, #24
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007206:	2300      	movs	r3, #0
 8007208:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d101      	bne.n	8007214 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007210:	2303      	movs	r3, #3
 8007212:	e025      	b.n	8007260 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	683a      	ldr	r2, [r7, #0]
 8007218:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	32ae      	adds	r2, #174	; 0xae
 8007226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800722a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00f      	beq.n	8007250 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	32ae      	adds	r2, #174	; 0xae
 800723a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800723e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007240:	f107 020e 	add.w	r2, r7, #14
 8007244:	4610      	mov	r0, r2
 8007246:	4798      	blx	r3
 8007248:	4602      	mov	r2, r0
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007256:	1c5a      	adds	r2, r3, #1
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	3710      	adds	r7, #16
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f001 fe39 	bl	8008ee8 <USBD_LL_Start>
 8007276:	4603      	mov	r3, r0
}
 8007278:	4618      	mov	r0, r3
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007288:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800728a:	4618      	mov	r0, r3
 800728c:	370c      	adds	r7, #12
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr

08007296 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b084      	sub	sp, #16
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
 800729e:	460b      	mov	r3, r1
 80072a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80072a2:	2300      	movs	r3, #0
 80072a4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d009      	beq.n	80072c4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	78fa      	ldrb	r2, [r7, #3]
 80072ba:	4611      	mov	r1, r2
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	4798      	blx	r3
 80072c0:	4603      	mov	r3, r0
 80072c2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80072c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3710      	adds	r7, #16
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b084      	sub	sp, #16
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
 80072d6:	460b      	mov	r3, r1
 80072d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80072da:	2300      	movs	r3, #0
 80072dc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	78fa      	ldrb	r2, [r7, #3]
 80072e8:	4611      	mov	r1, r2
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	4798      	blx	r3
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d001      	beq.n	80072f8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80072f4:	2303      	movs	r3, #3
 80072f6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80072f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007302:	b580      	push	{r7, lr}
 8007304:	b084      	sub	sp, #16
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
 800730a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007312:	6839      	ldr	r1, [r7, #0]
 8007314:	4618      	mov	r0, r3
 8007316:	f001 f908 	bl	800852a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2201      	movs	r2, #1
 800731e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007328:	461a      	mov	r2, r3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007336:	f003 031f 	and.w	r3, r3, #31
 800733a:	2b02      	cmp	r3, #2
 800733c:	d01a      	beq.n	8007374 <USBD_LL_SetupStage+0x72>
 800733e:	2b02      	cmp	r3, #2
 8007340:	d822      	bhi.n	8007388 <USBD_LL_SetupStage+0x86>
 8007342:	2b00      	cmp	r3, #0
 8007344:	d002      	beq.n	800734c <USBD_LL_SetupStage+0x4a>
 8007346:	2b01      	cmp	r3, #1
 8007348:	d00a      	beq.n	8007360 <USBD_LL_SetupStage+0x5e>
 800734a:	e01d      	b.n	8007388 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007352:	4619      	mov	r1, r3
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 fb5f 	bl	8007a18 <USBD_StdDevReq>
 800735a:	4603      	mov	r3, r0
 800735c:	73fb      	strb	r3, [r7, #15]
      break;
 800735e:	e020      	b.n	80073a2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007366:	4619      	mov	r1, r3
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 fbc7 	bl	8007afc <USBD_StdItfReq>
 800736e:	4603      	mov	r3, r0
 8007370:	73fb      	strb	r3, [r7, #15]
      break;
 8007372:	e016      	b.n	80073a2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800737a:	4619      	mov	r1, r3
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 fc29 	bl	8007bd4 <USBD_StdEPReq>
 8007382:	4603      	mov	r3, r0
 8007384:	73fb      	strb	r3, [r7, #15]
      break;
 8007386:	e00c      	b.n	80073a2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800738e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007392:	b2db      	uxtb	r3, r3
 8007394:	4619      	mov	r1, r3
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f001 fe06 	bl	8008fa8 <USBD_LL_StallEP>
 800739c:	4603      	mov	r3, r0
 800739e:	73fb      	strb	r3, [r7, #15]
      break;
 80073a0:	bf00      	nop
  }

  return ret;
 80073a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3710      	adds	r7, #16
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b086      	sub	sp, #24
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	460b      	mov	r3, r1
 80073b6:	607a      	str	r2, [r7, #4]
 80073b8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80073ba:	2300      	movs	r3, #0
 80073bc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80073be:	7afb      	ldrb	r3, [r7, #11]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d16e      	bne.n	80074a2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80073ca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073d2:	2b03      	cmp	r3, #3
 80073d4:	f040 8098 	bne.w	8007508 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	689a      	ldr	r2, [r3, #8]
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d913      	bls.n	800740c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	689a      	ldr	r2, [r3, #8]
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	68db      	ldr	r3, [r3, #12]
 80073ec:	1ad2      	subs	r2, r2, r3
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	68da      	ldr	r2, [r3, #12]
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	4293      	cmp	r3, r2
 80073fc:	bf28      	it	cs
 80073fe:	4613      	movcs	r3, r2
 8007400:	461a      	mov	r2, r3
 8007402:	6879      	ldr	r1, [r7, #4]
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f001 f984 	bl	8008712 <USBD_CtlContinueRx>
 800740a:	e07d      	b.n	8007508 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007412:	f003 031f 	and.w	r3, r3, #31
 8007416:	2b02      	cmp	r3, #2
 8007418:	d014      	beq.n	8007444 <USBD_LL_DataOutStage+0x98>
 800741a:	2b02      	cmp	r3, #2
 800741c:	d81d      	bhi.n	800745a <USBD_LL_DataOutStage+0xae>
 800741e:	2b00      	cmp	r3, #0
 8007420:	d002      	beq.n	8007428 <USBD_LL_DataOutStage+0x7c>
 8007422:	2b01      	cmp	r3, #1
 8007424:	d003      	beq.n	800742e <USBD_LL_DataOutStage+0x82>
 8007426:	e018      	b.n	800745a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007428:	2300      	movs	r3, #0
 800742a:	75bb      	strb	r3, [r7, #22]
            break;
 800742c:	e018      	b.n	8007460 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007434:	b2db      	uxtb	r3, r3
 8007436:	4619      	mov	r1, r3
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f000 fa5e 	bl	80078fa <USBD_CoreFindIF>
 800743e:	4603      	mov	r3, r0
 8007440:	75bb      	strb	r3, [r7, #22]
            break;
 8007442:	e00d      	b.n	8007460 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800744a:	b2db      	uxtb	r3, r3
 800744c:	4619      	mov	r1, r3
 800744e:	68f8      	ldr	r0, [r7, #12]
 8007450:	f000 fa60 	bl	8007914 <USBD_CoreFindEP>
 8007454:	4603      	mov	r3, r0
 8007456:	75bb      	strb	r3, [r7, #22]
            break;
 8007458:	e002      	b.n	8007460 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800745a:	2300      	movs	r3, #0
 800745c:	75bb      	strb	r3, [r7, #22]
            break;
 800745e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007460:	7dbb      	ldrb	r3, [r7, #22]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d119      	bne.n	800749a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800746c:	b2db      	uxtb	r3, r3
 800746e:	2b03      	cmp	r3, #3
 8007470:	d113      	bne.n	800749a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007472:	7dba      	ldrb	r2, [r7, #22]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	32ae      	adds	r2, #174	; 0xae
 8007478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00b      	beq.n	800749a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007482:	7dba      	ldrb	r2, [r7, #22]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800748a:	7dba      	ldrb	r2, [r7, #22]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	32ae      	adds	r2, #174	; 0xae
 8007490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f001 f94a 	bl	8008734 <USBD_CtlSendStatus>
 80074a0:	e032      	b.n	8007508 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80074a2:	7afb      	ldrb	r3, [r7, #11]
 80074a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	4619      	mov	r1, r3
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	f000 fa31 	bl	8007914 <USBD_CoreFindEP>
 80074b2:	4603      	mov	r3, r0
 80074b4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80074b6:	7dbb      	ldrb	r3, [r7, #22]
 80074b8:	2bff      	cmp	r3, #255	; 0xff
 80074ba:	d025      	beq.n	8007508 <USBD_LL_DataOutStage+0x15c>
 80074bc:	7dbb      	ldrb	r3, [r7, #22]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d122      	bne.n	8007508 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	2b03      	cmp	r3, #3
 80074cc:	d117      	bne.n	80074fe <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80074ce:	7dba      	ldrb	r2, [r7, #22]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	32ae      	adds	r2, #174	; 0xae
 80074d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00f      	beq.n	80074fe <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80074de:	7dba      	ldrb	r2, [r7, #22]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80074e6:	7dba      	ldrb	r2, [r7, #22]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	32ae      	adds	r2, #174	; 0xae
 80074ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074f0:	699b      	ldr	r3, [r3, #24]
 80074f2:	7afa      	ldrb	r2, [r7, #11]
 80074f4:	4611      	mov	r1, r2
 80074f6:	68f8      	ldr	r0, [r7, #12]
 80074f8:	4798      	blx	r3
 80074fa:	4603      	mov	r3, r0
 80074fc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80074fe:	7dfb      	ldrb	r3, [r7, #23]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d001      	beq.n	8007508 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007504:	7dfb      	ldrb	r3, [r7, #23]
 8007506:	e000      	b.n	800750a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3718      	adds	r7, #24
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}

08007512 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b086      	sub	sp, #24
 8007516:	af00      	add	r7, sp, #0
 8007518:	60f8      	str	r0, [r7, #12]
 800751a:	460b      	mov	r3, r1
 800751c:	607a      	str	r2, [r7, #4]
 800751e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007520:	7afb      	ldrb	r3, [r7, #11]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d16f      	bne.n	8007606 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	3314      	adds	r3, #20
 800752a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007532:	2b02      	cmp	r3, #2
 8007534:	d15a      	bne.n	80075ec <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	689a      	ldr	r2, [r3, #8]
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	429a      	cmp	r2, r3
 8007540:	d914      	bls.n	800756c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	689a      	ldr	r2, [r3, #8]
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	1ad2      	subs	r2, r2, r3
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	461a      	mov	r2, r3
 8007556:	6879      	ldr	r1, [r7, #4]
 8007558:	68f8      	ldr	r0, [r7, #12]
 800755a:	f001 f8ac 	bl	80086b6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800755e:	2300      	movs	r3, #0
 8007560:	2200      	movs	r2, #0
 8007562:	2100      	movs	r1, #0
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	f001 fdc9 	bl	80090fc <USBD_LL_PrepareReceive>
 800756a:	e03f      	b.n	80075ec <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	68da      	ldr	r2, [r3, #12]
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	429a      	cmp	r2, r3
 8007576:	d11c      	bne.n	80075b2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	685a      	ldr	r2, [r3, #4]
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007580:	429a      	cmp	r2, r3
 8007582:	d316      	bcc.n	80075b2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	685a      	ldr	r2, [r3, #4]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800758e:	429a      	cmp	r2, r3
 8007590:	d20f      	bcs.n	80075b2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007592:	2200      	movs	r2, #0
 8007594:	2100      	movs	r1, #0
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	f001 f88d 	bl	80086b6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075a4:	2300      	movs	r3, #0
 80075a6:	2200      	movs	r2, #0
 80075a8:	2100      	movs	r1, #0
 80075aa:	68f8      	ldr	r0, [r7, #12]
 80075ac:	f001 fda6 	bl	80090fc <USBD_LL_PrepareReceive>
 80075b0:	e01c      	b.n	80075ec <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	2b03      	cmp	r3, #3
 80075bc:	d10f      	bne.n	80075de <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d009      	beq.n	80075de <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2200      	movs	r2, #0
 80075ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075d8:	68db      	ldr	r3, [r3, #12]
 80075da:	68f8      	ldr	r0, [r7, #12]
 80075dc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80075de:	2180      	movs	r1, #128	; 0x80
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	f001 fce1 	bl	8008fa8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80075e6:	68f8      	ldr	r0, [r7, #12]
 80075e8:	f001 f8b7 	bl	800875a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d03a      	beq.n	800766c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f7ff fe42 	bl	8007280 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007604:	e032      	b.n	800766c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007606:	7afb      	ldrb	r3, [r7, #11]
 8007608:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800760c:	b2db      	uxtb	r3, r3
 800760e:	4619      	mov	r1, r3
 8007610:	68f8      	ldr	r0, [r7, #12]
 8007612:	f000 f97f 	bl	8007914 <USBD_CoreFindEP>
 8007616:	4603      	mov	r3, r0
 8007618:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800761a:	7dfb      	ldrb	r3, [r7, #23]
 800761c:	2bff      	cmp	r3, #255	; 0xff
 800761e:	d025      	beq.n	800766c <USBD_LL_DataInStage+0x15a>
 8007620:	7dfb      	ldrb	r3, [r7, #23]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d122      	bne.n	800766c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800762c:	b2db      	uxtb	r3, r3
 800762e:	2b03      	cmp	r3, #3
 8007630:	d11c      	bne.n	800766c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007632:	7dfa      	ldrb	r2, [r7, #23]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	32ae      	adds	r2, #174	; 0xae
 8007638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800763c:	695b      	ldr	r3, [r3, #20]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d014      	beq.n	800766c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007642:	7dfa      	ldrb	r2, [r7, #23]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800764a:	7dfa      	ldrb	r2, [r7, #23]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	32ae      	adds	r2, #174	; 0xae
 8007650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007654:	695b      	ldr	r3, [r3, #20]
 8007656:	7afa      	ldrb	r2, [r7, #11]
 8007658:	4611      	mov	r1, r2
 800765a:	68f8      	ldr	r0, [r7, #12]
 800765c:	4798      	blx	r3
 800765e:	4603      	mov	r3, r0
 8007660:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007662:	7dbb      	ldrb	r3, [r7, #22]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d001      	beq.n	800766c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007668:	7dbb      	ldrb	r3, [r7, #22]
 800766a:	e000      	b.n	800766e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800766c:	2300      	movs	r3, #0
}
 800766e:	4618      	mov	r0, r3
 8007670:	3718      	adds	r7, #24
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}

08007676 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007676:	b580      	push	{r7, lr}
 8007678:	b084      	sub	sp, #16
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800767e:	2300      	movs	r3, #0
 8007680:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2201      	movs	r2, #1
 8007686:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d014      	beq.n	80076dc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d00e      	beq.n	80076dc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	6852      	ldr	r2, [r2, #4]
 80076ca:	b2d2      	uxtb	r2, r2
 80076cc:	4611      	mov	r1, r2
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	4798      	blx	r3
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d001      	beq.n	80076dc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80076d8:	2303      	movs	r3, #3
 80076da:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80076dc:	2340      	movs	r3, #64	; 0x40
 80076de:	2200      	movs	r2, #0
 80076e0:	2100      	movs	r1, #0
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f001 fc1b 	bl	8008f1e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2240      	movs	r2, #64	; 0x40
 80076f4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80076f8:	2340      	movs	r3, #64	; 0x40
 80076fa:	2200      	movs	r2, #0
 80076fc:	2180      	movs	r1, #128	; 0x80
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f001 fc0d 	bl	8008f1e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2240      	movs	r2, #64	; 0x40
 800770e:	621a      	str	r2, [r3, #32]

  return ret;
 8007710:	7bfb      	ldrb	r3, [r7, #15]
}
 8007712:	4618      	mov	r0, r3
 8007714:	3710      	adds	r7, #16
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}

0800771a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800771a:	b480      	push	{r7}
 800771c:	b083      	sub	sp, #12
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
 8007722:	460b      	mov	r3, r1
 8007724:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	78fa      	ldrb	r2, [r7, #3]
 800772a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	370c      	adds	r7, #12
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr

0800773a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800773a:	b480      	push	{r7}
 800773c:	b083      	sub	sp, #12
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007748:	b2da      	uxtb	r2, r3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2204      	movs	r2, #4
 8007754:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	370c      	adds	r7, #12
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr

08007766 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007766:	b480      	push	{r7}
 8007768:	b083      	sub	sp, #12
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007774:	b2db      	uxtb	r3, r3
 8007776:	2b04      	cmp	r3, #4
 8007778:	d106      	bne.n	8007788 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007780:	b2da      	uxtb	r2, r3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	370c      	adds	r7, #12
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr

08007796 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007796:	b580      	push	{r7, lr}
 8007798:	b082      	sub	sp, #8
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	2b03      	cmp	r3, #3
 80077a8:	d110      	bne.n	80077cc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d00b      	beq.n	80077cc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077ba:	69db      	ldr	r3, [r3, #28]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d005      	beq.n	80077cc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077c6:	69db      	ldr	r3, [r3, #28]
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3708      	adds	r7, #8
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}

080077d6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80077d6:	b580      	push	{r7, lr}
 80077d8:	b082      	sub	sp, #8
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
 80077de:	460b      	mov	r3, r1
 80077e0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	32ae      	adds	r2, #174	; 0xae
 80077ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d101      	bne.n	80077f8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80077f4:	2303      	movs	r3, #3
 80077f6:	e01c      	b.n	8007832 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	2b03      	cmp	r3, #3
 8007802:	d115      	bne.n	8007830 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	32ae      	adds	r2, #174	; 0xae
 800780e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007812:	6a1b      	ldr	r3, [r3, #32]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00b      	beq.n	8007830 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	32ae      	adds	r2, #174	; 0xae
 8007822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007826:	6a1b      	ldr	r3, [r3, #32]
 8007828:	78fa      	ldrb	r2, [r7, #3]
 800782a:	4611      	mov	r1, r2
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007830:	2300      	movs	r3, #0
}
 8007832:	4618      	mov	r0, r3
 8007834:	3708      	adds	r7, #8
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800783a:	b580      	push	{r7, lr}
 800783c:	b082      	sub	sp, #8
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
 8007842:	460b      	mov	r3, r1
 8007844:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	32ae      	adds	r2, #174	; 0xae
 8007850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d101      	bne.n	800785c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007858:	2303      	movs	r3, #3
 800785a:	e01c      	b.n	8007896 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007862:	b2db      	uxtb	r3, r3
 8007864:	2b03      	cmp	r3, #3
 8007866:	d115      	bne.n	8007894 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	32ae      	adds	r2, #174	; 0xae
 8007872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007878:	2b00      	cmp	r3, #0
 800787a:	d00b      	beq.n	8007894 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	32ae      	adds	r2, #174	; 0xae
 8007886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800788a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788c:	78fa      	ldrb	r2, [r7, #3]
 800788e:	4611      	mov	r1, r2
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3708      	adds	r7, #8
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}

0800789e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800789e:	b480      	push	{r7}
 80078a0:	b083      	sub	sp, #12
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80078bc:	2300      	movs	r3, #0
 80078be:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2201      	movs	r2, #1
 80078c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00e      	beq.n	80078f0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	6852      	ldr	r2, [r2, #4]
 80078de:	b2d2      	uxtb	r2, r2
 80078e0:	4611      	mov	r1, r2
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	4798      	blx	r3
 80078e6:	4603      	mov	r3, r0
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d001      	beq.n	80078f0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80078ec:	2303      	movs	r3, #3
 80078ee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80078f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80078fa:	b480      	push	{r7}
 80078fc:	b083      	sub	sp, #12
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
 8007902:	460b      	mov	r3, r1
 8007904:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007906:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007908:	4618      	mov	r0, r3
 800790a:	370c      	adds	r7, #12
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	460b      	mov	r3, r1
 800791e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007920:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007922:	4618      	mov	r0, r3
 8007924:	370c      	adds	r7, #12
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr

0800792e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800792e:	b580      	push	{r7, lr}
 8007930:	b086      	sub	sp, #24
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
 8007936:	460b      	mov	r3, r1
 8007938:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007942:	2300      	movs	r3, #0
 8007944:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	885b      	ldrh	r3, [r3, #2]
 800794a:	b29a      	uxth	r2, r3
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	b29b      	uxth	r3, r3
 8007952:	429a      	cmp	r2, r3
 8007954:	d920      	bls.n	8007998 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	b29b      	uxth	r3, r3
 800795c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800795e:	e013      	b.n	8007988 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007960:	f107 030a 	add.w	r3, r7, #10
 8007964:	4619      	mov	r1, r3
 8007966:	6978      	ldr	r0, [r7, #20]
 8007968:	f000 f81b 	bl	80079a2 <USBD_GetNextDesc>
 800796c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	785b      	ldrb	r3, [r3, #1]
 8007972:	2b05      	cmp	r3, #5
 8007974:	d108      	bne.n	8007988 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	789b      	ldrb	r3, [r3, #2]
 800797e:	78fa      	ldrb	r2, [r7, #3]
 8007980:	429a      	cmp	r2, r3
 8007982:	d008      	beq.n	8007996 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007984:	2300      	movs	r3, #0
 8007986:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	885b      	ldrh	r3, [r3, #2]
 800798c:	b29a      	uxth	r2, r3
 800798e:	897b      	ldrh	r3, [r7, #10]
 8007990:	429a      	cmp	r2, r3
 8007992:	d8e5      	bhi.n	8007960 <USBD_GetEpDesc+0x32>
 8007994:	e000      	b.n	8007998 <USBD_GetEpDesc+0x6a>
          break;
 8007996:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007998:	693b      	ldr	r3, [r7, #16]
}
 800799a:	4618      	mov	r0, r3
 800799c:	3718      	adds	r7, #24
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}

080079a2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80079a2:	b480      	push	{r7}
 80079a4:	b085      	sub	sp, #20
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
 80079aa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	881a      	ldrh	r2, [r3, #0]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	4413      	add	r3, r2
 80079bc:	b29a      	uxth	r2, r3
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	461a      	mov	r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	4413      	add	r3, r2
 80079cc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80079ce:	68fb      	ldr	r3, [r7, #12]
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3714      	adds	r7, #20
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80079dc:	b480      	push	{r7}
 80079de:	b087      	sub	sp, #28
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	3301      	adds	r3, #1
 80079f2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80079fa:	8a3b      	ldrh	r3, [r7, #16]
 80079fc:	021b      	lsls	r3, r3, #8
 80079fe:	b21a      	sxth	r2, r3
 8007a00:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	b21b      	sxth	r3, r3
 8007a08:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007a0a:	89fb      	ldrh	r3, [r7, #14]
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	371c      	adds	r7, #28
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a22:	2300      	movs	r3, #0
 8007a24:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a2e:	2b40      	cmp	r3, #64	; 0x40
 8007a30:	d005      	beq.n	8007a3e <USBD_StdDevReq+0x26>
 8007a32:	2b40      	cmp	r3, #64	; 0x40
 8007a34:	d857      	bhi.n	8007ae6 <USBD_StdDevReq+0xce>
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d00f      	beq.n	8007a5a <USBD_StdDevReq+0x42>
 8007a3a:	2b20      	cmp	r3, #32
 8007a3c:	d153      	bne.n	8007ae6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	32ae      	adds	r2, #174	; 0xae
 8007a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	6839      	ldr	r1, [r7, #0]
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	4798      	blx	r3
 8007a54:	4603      	mov	r3, r0
 8007a56:	73fb      	strb	r3, [r7, #15]
      break;
 8007a58:	e04a      	b.n	8007af0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	785b      	ldrb	r3, [r3, #1]
 8007a5e:	2b09      	cmp	r3, #9
 8007a60:	d83b      	bhi.n	8007ada <USBD_StdDevReq+0xc2>
 8007a62:	a201      	add	r2, pc, #4	; (adr r2, 8007a68 <USBD_StdDevReq+0x50>)
 8007a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a68:	08007abd 	.word	0x08007abd
 8007a6c:	08007ad1 	.word	0x08007ad1
 8007a70:	08007adb 	.word	0x08007adb
 8007a74:	08007ac7 	.word	0x08007ac7
 8007a78:	08007adb 	.word	0x08007adb
 8007a7c:	08007a9b 	.word	0x08007a9b
 8007a80:	08007a91 	.word	0x08007a91
 8007a84:	08007adb 	.word	0x08007adb
 8007a88:	08007ab3 	.word	0x08007ab3
 8007a8c:	08007aa5 	.word	0x08007aa5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007a90:	6839      	ldr	r1, [r7, #0]
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 fa3c 	bl	8007f10 <USBD_GetDescriptor>
          break;
 8007a98:	e024      	b.n	8007ae4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007a9a:	6839      	ldr	r1, [r7, #0]
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 fba1 	bl	80081e4 <USBD_SetAddress>
          break;
 8007aa2:	e01f      	b.n	8007ae4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007aa4:	6839      	ldr	r1, [r7, #0]
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 fbe0 	bl	800826c <USBD_SetConfig>
 8007aac:	4603      	mov	r3, r0
 8007aae:	73fb      	strb	r3, [r7, #15]
          break;
 8007ab0:	e018      	b.n	8007ae4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007ab2:	6839      	ldr	r1, [r7, #0]
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 fc83 	bl	80083c0 <USBD_GetConfig>
          break;
 8007aba:	e013      	b.n	8007ae4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007abc:	6839      	ldr	r1, [r7, #0]
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 fcb4 	bl	800842c <USBD_GetStatus>
          break;
 8007ac4:	e00e      	b.n	8007ae4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007ac6:	6839      	ldr	r1, [r7, #0]
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 fce3 	bl	8008494 <USBD_SetFeature>
          break;
 8007ace:	e009      	b.n	8007ae4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007ad0:	6839      	ldr	r1, [r7, #0]
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 fd07 	bl	80084e6 <USBD_ClrFeature>
          break;
 8007ad8:	e004      	b.n	8007ae4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007ada:	6839      	ldr	r1, [r7, #0]
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 fd5e 	bl	800859e <USBD_CtlError>
          break;
 8007ae2:	bf00      	nop
      }
      break;
 8007ae4:	e004      	b.n	8007af0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007ae6:	6839      	ldr	r1, [r7, #0]
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 fd58 	bl	800859e <USBD_CtlError>
      break;
 8007aee:	bf00      	nop
  }

  return ret;
 8007af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3710      	adds	r7, #16
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop

08007afc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b06:	2300      	movs	r3, #0
 8007b08:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b12:	2b40      	cmp	r3, #64	; 0x40
 8007b14:	d005      	beq.n	8007b22 <USBD_StdItfReq+0x26>
 8007b16:	2b40      	cmp	r3, #64	; 0x40
 8007b18:	d852      	bhi.n	8007bc0 <USBD_StdItfReq+0xc4>
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d001      	beq.n	8007b22 <USBD_StdItfReq+0x26>
 8007b1e:	2b20      	cmp	r3, #32
 8007b20:	d14e      	bne.n	8007bc0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	2b02      	cmp	r3, #2
 8007b2e:	d840      	bhi.n	8007bb2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	889b      	ldrh	r3, [r3, #4]
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d836      	bhi.n	8007ba8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	889b      	ldrh	r3, [r3, #4]
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	4619      	mov	r1, r3
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f7ff fed9 	bl	80078fa <USBD_CoreFindIF>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b4c:	7bbb      	ldrb	r3, [r7, #14]
 8007b4e:	2bff      	cmp	r3, #255	; 0xff
 8007b50:	d01d      	beq.n	8007b8e <USBD_StdItfReq+0x92>
 8007b52:	7bbb      	ldrb	r3, [r7, #14]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d11a      	bne.n	8007b8e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007b58:	7bba      	ldrb	r2, [r7, #14]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	32ae      	adds	r2, #174	; 0xae
 8007b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00f      	beq.n	8007b88 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007b68:	7bba      	ldrb	r2, [r7, #14]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007b70:	7bba      	ldrb	r2, [r7, #14]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	32ae      	adds	r2, #174	; 0xae
 8007b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	6839      	ldr	r1, [r7, #0]
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	4798      	blx	r3
 8007b82:	4603      	mov	r3, r0
 8007b84:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007b86:	e004      	b.n	8007b92 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007b88:	2303      	movs	r3, #3
 8007b8a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007b8c:	e001      	b.n	8007b92 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007b8e:	2303      	movs	r3, #3
 8007b90:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	88db      	ldrh	r3, [r3, #6]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d110      	bne.n	8007bbc <USBD_StdItfReq+0xc0>
 8007b9a:	7bfb      	ldrb	r3, [r7, #15]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d10d      	bne.n	8007bbc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 fdc7 	bl	8008734 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007ba6:	e009      	b.n	8007bbc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007ba8:	6839      	ldr	r1, [r7, #0]
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 fcf7 	bl	800859e <USBD_CtlError>
          break;
 8007bb0:	e004      	b.n	8007bbc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007bb2:	6839      	ldr	r1, [r7, #0]
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 fcf2 	bl	800859e <USBD_CtlError>
          break;
 8007bba:	e000      	b.n	8007bbe <USBD_StdItfReq+0xc2>
          break;
 8007bbc:	bf00      	nop
      }
      break;
 8007bbe:	e004      	b.n	8007bca <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007bc0:	6839      	ldr	r1, [r7, #0]
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 fceb 	bl	800859e <USBD_CtlError>
      break;
 8007bc8:	bf00      	nop
  }

  return ret;
 8007bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3710      	adds	r7, #16
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007bde:	2300      	movs	r3, #0
 8007be0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	889b      	ldrh	r3, [r3, #4]
 8007be6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007bf0:	2b40      	cmp	r3, #64	; 0x40
 8007bf2:	d007      	beq.n	8007c04 <USBD_StdEPReq+0x30>
 8007bf4:	2b40      	cmp	r3, #64	; 0x40
 8007bf6:	f200 817f 	bhi.w	8007ef8 <USBD_StdEPReq+0x324>
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d02a      	beq.n	8007c54 <USBD_StdEPReq+0x80>
 8007bfe:	2b20      	cmp	r3, #32
 8007c00:	f040 817a 	bne.w	8007ef8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007c04:	7bbb      	ldrb	r3, [r7, #14]
 8007c06:	4619      	mov	r1, r3
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f7ff fe83 	bl	8007914 <USBD_CoreFindEP>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c12:	7b7b      	ldrb	r3, [r7, #13]
 8007c14:	2bff      	cmp	r3, #255	; 0xff
 8007c16:	f000 8174 	beq.w	8007f02 <USBD_StdEPReq+0x32e>
 8007c1a:	7b7b      	ldrb	r3, [r7, #13]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f040 8170 	bne.w	8007f02 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007c22:	7b7a      	ldrb	r2, [r7, #13]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007c2a:	7b7a      	ldrb	r2, [r7, #13]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	32ae      	adds	r2, #174	; 0xae
 8007c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	f000 8163 	beq.w	8007f02 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007c3c:	7b7a      	ldrb	r2, [r7, #13]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	32ae      	adds	r2, #174	; 0xae
 8007c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	6839      	ldr	r1, [r7, #0]
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	4798      	blx	r3
 8007c4e:	4603      	mov	r3, r0
 8007c50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007c52:	e156      	b.n	8007f02 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	785b      	ldrb	r3, [r3, #1]
 8007c58:	2b03      	cmp	r3, #3
 8007c5a:	d008      	beq.n	8007c6e <USBD_StdEPReq+0x9a>
 8007c5c:	2b03      	cmp	r3, #3
 8007c5e:	f300 8145 	bgt.w	8007eec <USBD_StdEPReq+0x318>
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	f000 809b 	beq.w	8007d9e <USBD_StdEPReq+0x1ca>
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d03c      	beq.n	8007ce6 <USBD_StdEPReq+0x112>
 8007c6c:	e13e      	b.n	8007eec <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	2b02      	cmp	r3, #2
 8007c78:	d002      	beq.n	8007c80 <USBD_StdEPReq+0xac>
 8007c7a:	2b03      	cmp	r3, #3
 8007c7c:	d016      	beq.n	8007cac <USBD_StdEPReq+0xd8>
 8007c7e:	e02c      	b.n	8007cda <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c80:	7bbb      	ldrb	r3, [r7, #14]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00d      	beq.n	8007ca2 <USBD_StdEPReq+0xce>
 8007c86:	7bbb      	ldrb	r3, [r7, #14]
 8007c88:	2b80      	cmp	r3, #128	; 0x80
 8007c8a:	d00a      	beq.n	8007ca2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007c8c:	7bbb      	ldrb	r3, [r7, #14]
 8007c8e:	4619      	mov	r1, r3
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f001 f989 	bl	8008fa8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c96:	2180      	movs	r1, #128	; 0x80
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f001 f985 	bl	8008fa8 <USBD_LL_StallEP>
 8007c9e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ca0:	e020      	b.n	8007ce4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007ca2:	6839      	ldr	r1, [r7, #0]
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 fc7a 	bl	800859e <USBD_CtlError>
              break;
 8007caa:	e01b      	b.n	8007ce4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	885b      	ldrh	r3, [r3, #2]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d10e      	bne.n	8007cd2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007cb4:	7bbb      	ldrb	r3, [r7, #14]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d00b      	beq.n	8007cd2 <USBD_StdEPReq+0xfe>
 8007cba:	7bbb      	ldrb	r3, [r7, #14]
 8007cbc:	2b80      	cmp	r3, #128	; 0x80
 8007cbe:	d008      	beq.n	8007cd2 <USBD_StdEPReq+0xfe>
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	88db      	ldrh	r3, [r3, #6]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d104      	bne.n	8007cd2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007cc8:	7bbb      	ldrb	r3, [r7, #14]
 8007cca:	4619      	mov	r1, r3
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f001 f96b 	bl	8008fa8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 fd2e 	bl	8008734 <USBD_CtlSendStatus>

              break;
 8007cd8:	e004      	b.n	8007ce4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007cda:	6839      	ldr	r1, [r7, #0]
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 fc5e 	bl	800859e <USBD_CtlError>
              break;
 8007ce2:	bf00      	nop
          }
          break;
 8007ce4:	e107      	b.n	8007ef6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	2b02      	cmp	r3, #2
 8007cf0:	d002      	beq.n	8007cf8 <USBD_StdEPReq+0x124>
 8007cf2:	2b03      	cmp	r3, #3
 8007cf4:	d016      	beq.n	8007d24 <USBD_StdEPReq+0x150>
 8007cf6:	e04b      	b.n	8007d90 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007cf8:	7bbb      	ldrb	r3, [r7, #14]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00d      	beq.n	8007d1a <USBD_StdEPReq+0x146>
 8007cfe:	7bbb      	ldrb	r3, [r7, #14]
 8007d00:	2b80      	cmp	r3, #128	; 0x80
 8007d02:	d00a      	beq.n	8007d1a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d04:	7bbb      	ldrb	r3, [r7, #14]
 8007d06:	4619      	mov	r1, r3
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f001 f94d 	bl	8008fa8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d0e:	2180      	movs	r1, #128	; 0x80
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f001 f949 	bl	8008fa8 <USBD_LL_StallEP>
 8007d16:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d18:	e040      	b.n	8007d9c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007d1a:	6839      	ldr	r1, [r7, #0]
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 fc3e 	bl	800859e <USBD_CtlError>
              break;
 8007d22:	e03b      	b.n	8007d9c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	885b      	ldrh	r3, [r3, #2]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d136      	bne.n	8007d9a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007d2c:	7bbb      	ldrb	r3, [r7, #14]
 8007d2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d004      	beq.n	8007d40 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007d36:	7bbb      	ldrb	r3, [r7, #14]
 8007d38:	4619      	mov	r1, r3
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f001 f953 	bl	8008fe6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 fcf7 	bl	8008734 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007d46:	7bbb      	ldrb	r3, [r7, #14]
 8007d48:	4619      	mov	r1, r3
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f7ff fde2 	bl	8007914 <USBD_CoreFindEP>
 8007d50:	4603      	mov	r3, r0
 8007d52:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d54:	7b7b      	ldrb	r3, [r7, #13]
 8007d56:	2bff      	cmp	r3, #255	; 0xff
 8007d58:	d01f      	beq.n	8007d9a <USBD_StdEPReq+0x1c6>
 8007d5a:	7b7b      	ldrb	r3, [r7, #13]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d11c      	bne.n	8007d9a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007d60:	7b7a      	ldrb	r2, [r7, #13]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007d68:	7b7a      	ldrb	r2, [r7, #13]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	32ae      	adds	r2, #174	; 0xae
 8007d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d010      	beq.n	8007d9a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007d78:	7b7a      	ldrb	r2, [r7, #13]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	32ae      	adds	r2, #174	; 0xae
 8007d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	6839      	ldr	r1, [r7, #0]
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	4798      	blx	r3
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007d8e:	e004      	b.n	8007d9a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007d90:	6839      	ldr	r1, [r7, #0]
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 fc03 	bl	800859e <USBD_CtlError>
              break;
 8007d98:	e000      	b.n	8007d9c <USBD_StdEPReq+0x1c8>
              break;
 8007d9a:	bf00      	nop
          }
          break;
 8007d9c:	e0ab      	b.n	8007ef6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	2b02      	cmp	r3, #2
 8007da8:	d002      	beq.n	8007db0 <USBD_StdEPReq+0x1dc>
 8007daa:	2b03      	cmp	r3, #3
 8007dac:	d032      	beq.n	8007e14 <USBD_StdEPReq+0x240>
 8007dae:	e097      	b.n	8007ee0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007db0:	7bbb      	ldrb	r3, [r7, #14]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d007      	beq.n	8007dc6 <USBD_StdEPReq+0x1f2>
 8007db6:	7bbb      	ldrb	r3, [r7, #14]
 8007db8:	2b80      	cmp	r3, #128	; 0x80
 8007dba:	d004      	beq.n	8007dc6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007dbc:	6839      	ldr	r1, [r7, #0]
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 fbed 	bl	800859e <USBD_CtlError>
                break;
 8007dc4:	e091      	b.n	8007eea <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007dc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	da0b      	bge.n	8007de6 <USBD_StdEPReq+0x212>
 8007dce:	7bbb      	ldrb	r3, [r7, #14]
 8007dd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	4413      	add	r3, r2
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	3310      	adds	r3, #16
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	4413      	add	r3, r2
 8007de2:	3304      	adds	r3, #4
 8007de4:	e00b      	b.n	8007dfe <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007de6:	7bbb      	ldrb	r3, [r7, #14]
 8007de8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007dec:	4613      	mov	r3, r2
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	4413      	add	r3, r2
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	4413      	add	r3, r2
 8007dfc:	3304      	adds	r3, #4
 8007dfe:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	2200      	movs	r2, #0
 8007e04:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	2202      	movs	r2, #2
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 fc37 	bl	8008680 <USBD_CtlSendData>
              break;
 8007e12:	e06a      	b.n	8007eea <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007e14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	da11      	bge.n	8007e40 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007e1c:	7bbb      	ldrb	r3, [r7, #14]
 8007e1e:	f003 020f 	and.w	r2, r3, #15
 8007e22:	6879      	ldr	r1, [r7, #4]
 8007e24:	4613      	mov	r3, r2
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	4413      	add	r3, r2
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	440b      	add	r3, r1
 8007e2e:	3324      	adds	r3, #36	; 0x24
 8007e30:	881b      	ldrh	r3, [r3, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d117      	bne.n	8007e66 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007e36:	6839      	ldr	r1, [r7, #0]
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 fbb0 	bl	800859e <USBD_CtlError>
                  break;
 8007e3e:	e054      	b.n	8007eea <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007e40:	7bbb      	ldrb	r3, [r7, #14]
 8007e42:	f003 020f 	and.w	r2, r3, #15
 8007e46:	6879      	ldr	r1, [r7, #4]
 8007e48:	4613      	mov	r3, r2
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	4413      	add	r3, r2
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	440b      	add	r3, r1
 8007e52:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007e56:	881b      	ldrh	r3, [r3, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d104      	bne.n	8007e66 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007e5c:	6839      	ldr	r1, [r7, #0]
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 fb9d 	bl	800859e <USBD_CtlError>
                  break;
 8007e64:	e041      	b.n	8007eea <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	da0b      	bge.n	8007e86 <USBD_StdEPReq+0x2b2>
 8007e6e:	7bbb      	ldrb	r3, [r7, #14]
 8007e70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e74:	4613      	mov	r3, r2
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	4413      	add	r3, r2
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	3310      	adds	r3, #16
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	4413      	add	r3, r2
 8007e82:	3304      	adds	r3, #4
 8007e84:	e00b      	b.n	8007e9e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e86:	7bbb      	ldrb	r3, [r7, #14]
 8007e88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e8c:	4613      	mov	r3, r2
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	4413      	add	r3, r2
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	4413      	add	r3, r2
 8007e9c:	3304      	adds	r3, #4
 8007e9e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007ea0:	7bbb      	ldrb	r3, [r7, #14]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d002      	beq.n	8007eac <USBD_StdEPReq+0x2d8>
 8007ea6:	7bbb      	ldrb	r3, [r7, #14]
 8007ea8:	2b80      	cmp	r3, #128	; 0x80
 8007eaa:	d103      	bne.n	8007eb4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	601a      	str	r2, [r3, #0]
 8007eb2:	e00e      	b.n	8007ed2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007eb4:	7bbb      	ldrb	r3, [r7, #14]
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f001 f8b3 	bl	8009024 <USBD_LL_IsStallEP>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d003      	beq.n	8007ecc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	601a      	str	r2, [r3, #0]
 8007eca:	e002      	b.n	8007ed2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	2202      	movs	r2, #2
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 fbd1 	bl	8008680 <USBD_CtlSendData>
              break;
 8007ede:	e004      	b.n	8007eea <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007ee0:	6839      	ldr	r1, [r7, #0]
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 fb5b 	bl	800859e <USBD_CtlError>
              break;
 8007ee8:	bf00      	nop
          }
          break;
 8007eea:	e004      	b.n	8007ef6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007eec:	6839      	ldr	r1, [r7, #0]
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 fb55 	bl	800859e <USBD_CtlError>
          break;
 8007ef4:	bf00      	nop
      }
      break;
 8007ef6:	e005      	b.n	8007f04 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007ef8:	6839      	ldr	r1, [r7, #0]
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 fb4f 	bl	800859e <USBD_CtlError>
      break;
 8007f00:	e000      	b.n	8007f04 <USBD_StdEPReq+0x330>
      break;
 8007f02:	bf00      	nop
  }

  return ret;
 8007f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3710      	adds	r7, #16
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
	...

08007f10 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007f22:	2300      	movs	r3, #0
 8007f24:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	885b      	ldrh	r3, [r3, #2]
 8007f2a:	0a1b      	lsrs	r3, r3, #8
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	2b06      	cmp	r3, #6
 8007f32:	f200 8128 	bhi.w	8008186 <USBD_GetDescriptor+0x276>
 8007f36:	a201      	add	r2, pc, #4	; (adr r2, 8007f3c <USBD_GetDescriptor+0x2c>)
 8007f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f3c:	08007f59 	.word	0x08007f59
 8007f40:	08007f71 	.word	0x08007f71
 8007f44:	08007fb1 	.word	0x08007fb1
 8007f48:	08008187 	.word	0x08008187
 8007f4c:	08008187 	.word	0x08008187
 8007f50:	08008127 	.word	0x08008127
 8007f54:	08008153 	.word	0x08008153
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	7c12      	ldrb	r2, [r2, #16]
 8007f64:	f107 0108 	add.w	r1, r7, #8
 8007f68:	4610      	mov	r0, r2
 8007f6a:	4798      	blx	r3
 8007f6c:	60f8      	str	r0, [r7, #12]
      break;
 8007f6e:	e112      	b.n	8008196 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	7c1b      	ldrb	r3, [r3, #16]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d10d      	bne.n	8007f94 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f80:	f107 0208 	add.w	r2, r7, #8
 8007f84:	4610      	mov	r0, r2
 8007f86:	4798      	blx	r3
 8007f88:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	2202      	movs	r2, #2
 8007f90:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007f92:	e100      	b.n	8008196 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f9c:	f107 0208 	add.w	r2, r7, #8
 8007fa0:	4610      	mov	r0, r2
 8007fa2:	4798      	blx	r3
 8007fa4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	3301      	adds	r3, #1
 8007faa:	2202      	movs	r2, #2
 8007fac:	701a      	strb	r2, [r3, #0]
      break;
 8007fae:	e0f2      	b.n	8008196 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	885b      	ldrh	r3, [r3, #2]
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	2b05      	cmp	r3, #5
 8007fb8:	f200 80ac 	bhi.w	8008114 <USBD_GetDescriptor+0x204>
 8007fbc:	a201      	add	r2, pc, #4	; (adr r2, 8007fc4 <USBD_GetDescriptor+0xb4>)
 8007fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc2:	bf00      	nop
 8007fc4:	08007fdd 	.word	0x08007fdd
 8007fc8:	08008011 	.word	0x08008011
 8007fcc:	08008045 	.word	0x08008045
 8007fd0:	08008079 	.word	0x08008079
 8007fd4:	080080ad 	.word	0x080080ad
 8007fd8:	080080e1 	.word	0x080080e1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d00b      	beq.n	8008000 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	7c12      	ldrb	r2, [r2, #16]
 8007ff4:	f107 0108 	add.w	r1, r7, #8
 8007ff8:	4610      	mov	r0, r2
 8007ffa:	4798      	blx	r3
 8007ffc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ffe:	e091      	b.n	8008124 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008000:	6839      	ldr	r1, [r7, #0]
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 facb 	bl	800859e <USBD_CtlError>
            err++;
 8008008:	7afb      	ldrb	r3, [r7, #11]
 800800a:	3301      	adds	r3, #1
 800800c:	72fb      	strb	r3, [r7, #11]
          break;
 800800e:	e089      	b.n	8008124 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d00b      	beq.n	8008034 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	7c12      	ldrb	r2, [r2, #16]
 8008028:	f107 0108 	add.w	r1, r7, #8
 800802c:	4610      	mov	r0, r2
 800802e:	4798      	blx	r3
 8008030:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008032:	e077      	b.n	8008124 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008034:	6839      	ldr	r1, [r7, #0]
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 fab1 	bl	800859e <USBD_CtlError>
            err++;
 800803c:	7afb      	ldrb	r3, [r7, #11]
 800803e:	3301      	adds	r3, #1
 8008040:	72fb      	strb	r3, [r7, #11]
          break;
 8008042:	e06f      	b.n	8008124 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800804a:	68db      	ldr	r3, [r3, #12]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00b      	beq.n	8008068 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	7c12      	ldrb	r2, [r2, #16]
 800805c:	f107 0108 	add.w	r1, r7, #8
 8008060:	4610      	mov	r0, r2
 8008062:	4798      	blx	r3
 8008064:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008066:	e05d      	b.n	8008124 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008068:	6839      	ldr	r1, [r7, #0]
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 fa97 	bl	800859e <USBD_CtlError>
            err++;
 8008070:	7afb      	ldrb	r3, [r7, #11]
 8008072:	3301      	adds	r3, #1
 8008074:	72fb      	strb	r3, [r7, #11]
          break;
 8008076:	e055      	b.n	8008124 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800807e:	691b      	ldr	r3, [r3, #16]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d00b      	beq.n	800809c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800808a:	691b      	ldr	r3, [r3, #16]
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	7c12      	ldrb	r2, [r2, #16]
 8008090:	f107 0108 	add.w	r1, r7, #8
 8008094:	4610      	mov	r0, r2
 8008096:	4798      	blx	r3
 8008098:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800809a:	e043      	b.n	8008124 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800809c:	6839      	ldr	r1, [r7, #0]
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 fa7d 	bl	800859e <USBD_CtlError>
            err++;
 80080a4:	7afb      	ldrb	r3, [r7, #11]
 80080a6:	3301      	adds	r3, #1
 80080a8:	72fb      	strb	r3, [r7, #11]
          break;
 80080aa:	e03b      	b.n	8008124 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080b2:	695b      	ldr	r3, [r3, #20]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00b      	beq.n	80080d0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080be:	695b      	ldr	r3, [r3, #20]
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	7c12      	ldrb	r2, [r2, #16]
 80080c4:	f107 0108 	add.w	r1, r7, #8
 80080c8:	4610      	mov	r0, r2
 80080ca:	4798      	blx	r3
 80080cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080ce:	e029      	b.n	8008124 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080d0:	6839      	ldr	r1, [r7, #0]
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 fa63 	bl	800859e <USBD_CtlError>
            err++;
 80080d8:	7afb      	ldrb	r3, [r7, #11]
 80080da:	3301      	adds	r3, #1
 80080dc:	72fb      	strb	r3, [r7, #11]
          break;
 80080de:	e021      	b.n	8008124 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080e6:	699b      	ldr	r3, [r3, #24]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d00b      	beq.n	8008104 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080f2:	699b      	ldr	r3, [r3, #24]
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	7c12      	ldrb	r2, [r2, #16]
 80080f8:	f107 0108 	add.w	r1, r7, #8
 80080fc:	4610      	mov	r0, r2
 80080fe:	4798      	blx	r3
 8008100:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008102:	e00f      	b.n	8008124 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008104:	6839      	ldr	r1, [r7, #0]
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fa49 	bl	800859e <USBD_CtlError>
            err++;
 800810c:	7afb      	ldrb	r3, [r7, #11]
 800810e:	3301      	adds	r3, #1
 8008110:	72fb      	strb	r3, [r7, #11]
          break;
 8008112:	e007      	b.n	8008124 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008114:	6839      	ldr	r1, [r7, #0]
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 fa41 	bl	800859e <USBD_CtlError>
          err++;
 800811c:	7afb      	ldrb	r3, [r7, #11]
 800811e:	3301      	adds	r3, #1
 8008120:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008122:	bf00      	nop
      }
      break;
 8008124:	e037      	b.n	8008196 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	7c1b      	ldrb	r3, [r3, #16]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d109      	bne.n	8008142 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008136:	f107 0208 	add.w	r2, r7, #8
 800813a:	4610      	mov	r0, r2
 800813c:	4798      	blx	r3
 800813e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008140:	e029      	b.n	8008196 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008142:	6839      	ldr	r1, [r7, #0]
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 fa2a 	bl	800859e <USBD_CtlError>
        err++;
 800814a:	7afb      	ldrb	r3, [r7, #11]
 800814c:	3301      	adds	r3, #1
 800814e:	72fb      	strb	r3, [r7, #11]
      break;
 8008150:	e021      	b.n	8008196 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	7c1b      	ldrb	r3, [r3, #16]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d10d      	bne.n	8008176 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008162:	f107 0208 	add.w	r2, r7, #8
 8008166:	4610      	mov	r0, r2
 8008168:	4798      	blx	r3
 800816a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	3301      	adds	r3, #1
 8008170:	2207      	movs	r2, #7
 8008172:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008174:	e00f      	b.n	8008196 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008176:	6839      	ldr	r1, [r7, #0]
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 fa10 	bl	800859e <USBD_CtlError>
        err++;
 800817e:	7afb      	ldrb	r3, [r7, #11]
 8008180:	3301      	adds	r3, #1
 8008182:	72fb      	strb	r3, [r7, #11]
      break;
 8008184:	e007      	b.n	8008196 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008186:	6839      	ldr	r1, [r7, #0]
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 fa08 	bl	800859e <USBD_CtlError>
      err++;
 800818e:	7afb      	ldrb	r3, [r7, #11]
 8008190:	3301      	adds	r3, #1
 8008192:	72fb      	strb	r3, [r7, #11]
      break;
 8008194:	bf00      	nop
  }

  if (err != 0U)
 8008196:	7afb      	ldrb	r3, [r7, #11]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d11e      	bne.n	80081da <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	88db      	ldrh	r3, [r3, #6]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d016      	beq.n	80081d2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80081a4:	893b      	ldrh	r3, [r7, #8]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d00e      	beq.n	80081c8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	88da      	ldrh	r2, [r3, #6]
 80081ae:	893b      	ldrh	r3, [r7, #8]
 80081b0:	4293      	cmp	r3, r2
 80081b2:	bf28      	it	cs
 80081b4:	4613      	movcs	r3, r2
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80081ba:	893b      	ldrh	r3, [r7, #8]
 80081bc:	461a      	mov	r2, r3
 80081be:	68f9      	ldr	r1, [r7, #12]
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 fa5d 	bl	8008680 <USBD_CtlSendData>
 80081c6:	e009      	b.n	80081dc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80081c8:	6839      	ldr	r1, [r7, #0]
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 f9e7 	bl	800859e <USBD_CtlError>
 80081d0:	e004      	b.n	80081dc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 faae 	bl	8008734 <USBD_CtlSendStatus>
 80081d8:	e000      	b.n	80081dc <USBD_GetDescriptor+0x2cc>
    return;
 80081da:	bf00      	nop
  }
}
 80081dc:	3710      	adds	r7, #16
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	bf00      	nop

080081e4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	889b      	ldrh	r3, [r3, #4]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d131      	bne.n	800825a <USBD_SetAddress+0x76>
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	88db      	ldrh	r3, [r3, #6]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d12d      	bne.n	800825a <USBD_SetAddress+0x76>
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	885b      	ldrh	r3, [r3, #2]
 8008202:	2b7f      	cmp	r3, #127	; 0x7f
 8008204:	d829      	bhi.n	800825a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	885b      	ldrh	r3, [r3, #2]
 800820a:	b2db      	uxtb	r3, r3
 800820c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008210:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008218:	b2db      	uxtb	r3, r3
 800821a:	2b03      	cmp	r3, #3
 800821c:	d104      	bne.n	8008228 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800821e:	6839      	ldr	r1, [r7, #0]
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 f9bc 	bl	800859e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008226:	e01d      	b.n	8008264 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	7bfa      	ldrb	r2, [r7, #15]
 800822c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008230:	7bfb      	ldrb	r3, [r7, #15]
 8008232:	4619      	mov	r1, r3
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 ff21 	bl	800907c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 fa7a 	bl	8008734 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008240:	7bfb      	ldrb	r3, [r7, #15]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d004      	beq.n	8008250 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2202      	movs	r2, #2
 800824a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800824e:	e009      	b.n	8008264 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2201      	movs	r2, #1
 8008254:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008258:	e004      	b.n	8008264 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800825a:	6839      	ldr	r1, [r7, #0]
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 f99e 	bl	800859e <USBD_CtlError>
  }
}
 8008262:	bf00      	nop
 8008264:	bf00      	nop
 8008266:	3710      	adds	r7, #16
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008276:	2300      	movs	r3, #0
 8008278:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	885b      	ldrh	r3, [r3, #2]
 800827e:	b2da      	uxtb	r2, r3
 8008280:	4b4e      	ldr	r3, [pc, #312]	; (80083bc <USBD_SetConfig+0x150>)
 8008282:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008284:	4b4d      	ldr	r3, [pc, #308]	; (80083bc <USBD_SetConfig+0x150>)
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	2b01      	cmp	r3, #1
 800828a:	d905      	bls.n	8008298 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800828c:	6839      	ldr	r1, [r7, #0]
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 f985 	bl	800859e <USBD_CtlError>
    return USBD_FAIL;
 8008294:	2303      	movs	r3, #3
 8008296:	e08c      	b.n	80083b2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800829e:	b2db      	uxtb	r3, r3
 80082a0:	2b02      	cmp	r3, #2
 80082a2:	d002      	beq.n	80082aa <USBD_SetConfig+0x3e>
 80082a4:	2b03      	cmp	r3, #3
 80082a6:	d029      	beq.n	80082fc <USBD_SetConfig+0x90>
 80082a8:	e075      	b.n	8008396 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80082aa:	4b44      	ldr	r3, [pc, #272]	; (80083bc <USBD_SetConfig+0x150>)
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d020      	beq.n	80082f4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80082b2:	4b42      	ldr	r3, [pc, #264]	; (80083bc <USBD_SetConfig+0x150>)
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	461a      	mov	r2, r3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80082bc:	4b3f      	ldr	r3, [pc, #252]	; (80083bc <USBD_SetConfig+0x150>)
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	4619      	mov	r1, r3
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f7fe ffe7 	bl	8007296 <USBD_SetClassConfig>
 80082c8:	4603      	mov	r3, r0
 80082ca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80082cc:	7bfb      	ldrb	r3, [r7, #15]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d008      	beq.n	80082e4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80082d2:	6839      	ldr	r1, [r7, #0]
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 f962 	bl	800859e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2202      	movs	r2, #2
 80082de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80082e2:	e065      	b.n	80083b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 fa25 	bl	8008734 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2203      	movs	r2, #3
 80082ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80082f2:	e05d      	b.n	80083b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 fa1d 	bl	8008734 <USBD_CtlSendStatus>
      break;
 80082fa:	e059      	b.n	80083b0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80082fc:	4b2f      	ldr	r3, [pc, #188]	; (80083bc <USBD_SetConfig+0x150>)
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d112      	bne.n	800832a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2202      	movs	r2, #2
 8008308:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800830c:	4b2b      	ldr	r3, [pc, #172]	; (80083bc <USBD_SetConfig+0x150>)
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	461a      	mov	r2, r3
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008316:	4b29      	ldr	r3, [pc, #164]	; (80083bc <USBD_SetConfig+0x150>)
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	4619      	mov	r1, r3
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f7fe ffd6 	bl	80072ce <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 fa06 	bl	8008734 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008328:	e042      	b.n	80083b0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800832a:	4b24      	ldr	r3, [pc, #144]	; (80083bc <USBD_SetConfig+0x150>)
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	461a      	mov	r2, r3
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	429a      	cmp	r2, r3
 8008336:	d02a      	beq.n	800838e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	b2db      	uxtb	r3, r3
 800833e:	4619      	mov	r1, r3
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f7fe ffc4 	bl	80072ce <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008346:	4b1d      	ldr	r3, [pc, #116]	; (80083bc <USBD_SetConfig+0x150>)
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	461a      	mov	r2, r3
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008350:	4b1a      	ldr	r3, [pc, #104]	; (80083bc <USBD_SetConfig+0x150>)
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	4619      	mov	r1, r3
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f7fe ff9d 	bl	8007296 <USBD_SetClassConfig>
 800835c:	4603      	mov	r3, r0
 800835e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008360:	7bfb      	ldrb	r3, [r7, #15]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d00f      	beq.n	8008386 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008366:	6839      	ldr	r1, [r7, #0]
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 f918 	bl	800859e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	b2db      	uxtb	r3, r3
 8008374:	4619      	mov	r1, r3
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f7fe ffa9 	bl	80072ce <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2202      	movs	r2, #2
 8008380:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008384:	e014      	b.n	80083b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 f9d4 	bl	8008734 <USBD_CtlSendStatus>
      break;
 800838c:	e010      	b.n	80083b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 f9d0 	bl	8008734 <USBD_CtlSendStatus>
      break;
 8008394:	e00c      	b.n	80083b0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008396:	6839      	ldr	r1, [r7, #0]
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 f900 	bl	800859e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800839e:	4b07      	ldr	r3, [pc, #28]	; (80083bc <USBD_SetConfig+0x150>)
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	4619      	mov	r1, r3
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f7fe ff92 	bl	80072ce <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80083aa:	2303      	movs	r3, #3
 80083ac:	73fb      	strb	r3, [r7, #15]
      break;
 80083ae:	bf00      	nop
  }

  return ret;
 80083b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3710      	adds	r7, #16
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop
 80083bc:	20000360 	.word	0x20000360

080083c0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	88db      	ldrh	r3, [r3, #6]
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d004      	beq.n	80083dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80083d2:	6839      	ldr	r1, [r7, #0]
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 f8e2 	bl	800859e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80083da:	e023      	b.n	8008424 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	2b02      	cmp	r3, #2
 80083e6:	dc02      	bgt.n	80083ee <USBD_GetConfig+0x2e>
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	dc03      	bgt.n	80083f4 <USBD_GetConfig+0x34>
 80083ec:	e015      	b.n	800841a <USBD_GetConfig+0x5a>
 80083ee:	2b03      	cmp	r3, #3
 80083f0:	d00b      	beq.n	800840a <USBD_GetConfig+0x4a>
 80083f2:	e012      	b.n	800841a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	3308      	adds	r3, #8
 80083fe:	2201      	movs	r2, #1
 8008400:	4619      	mov	r1, r3
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 f93c 	bl	8008680 <USBD_CtlSendData>
        break;
 8008408:	e00c      	b.n	8008424 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	3304      	adds	r3, #4
 800840e:	2201      	movs	r2, #1
 8008410:	4619      	mov	r1, r3
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 f934 	bl	8008680 <USBD_CtlSendData>
        break;
 8008418:	e004      	b.n	8008424 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800841a:	6839      	ldr	r1, [r7, #0]
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 f8be 	bl	800859e <USBD_CtlError>
        break;
 8008422:	bf00      	nop
}
 8008424:	bf00      	nop
 8008426:	3708      	adds	r7, #8
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800843c:	b2db      	uxtb	r3, r3
 800843e:	3b01      	subs	r3, #1
 8008440:	2b02      	cmp	r3, #2
 8008442:	d81e      	bhi.n	8008482 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	88db      	ldrh	r3, [r3, #6]
 8008448:	2b02      	cmp	r3, #2
 800844a:	d004      	beq.n	8008456 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800844c:	6839      	ldr	r1, [r7, #0]
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 f8a5 	bl	800859e <USBD_CtlError>
        break;
 8008454:	e01a      	b.n	800848c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2201      	movs	r2, #1
 800845a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008462:	2b00      	cmp	r3, #0
 8008464:	d005      	beq.n	8008472 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	68db      	ldr	r3, [r3, #12]
 800846a:	f043 0202 	orr.w	r2, r3, #2
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	330c      	adds	r3, #12
 8008476:	2202      	movs	r2, #2
 8008478:	4619      	mov	r1, r3
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 f900 	bl	8008680 <USBD_CtlSendData>
      break;
 8008480:	e004      	b.n	800848c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008482:	6839      	ldr	r1, [r7, #0]
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 f88a 	bl	800859e <USBD_CtlError>
      break;
 800848a:	bf00      	nop
  }
}
 800848c:	bf00      	nop
 800848e:	3708      	adds	r7, #8
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	885b      	ldrh	r3, [r3, #2]
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d107      	bne.n	80084b6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2201      	movs	r2, #1
 80084aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 f940 	bl	8008734 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80084b4:	e013      	b.n	80084de <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	885b      	ldrh	r3, [r3, #2]
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	d10b      	bne.n	80084d6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	889b      	ldrh	r3, [r3, #4]
 80084c2:	0a1b      	lsrs	r3, r3, #8
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	b2da      	uxtb	r2, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 f930 	bl	8008734 <USBD_CtlSendStatus>
}
 80084d4:	e003      	b.n	80084de <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80084d6:	6839      	ldr	r1, [r7, #0]
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 f860 	bl	800859e <USBD_CtlError>
}
 80084de:	bf00      	nop
 80084e0:	3708      	adds	r7, #8
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b082      	sub	sp, #8
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
 80084ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	3b01      	subs	r3, #1
 80084fa:	2b02      	cmp	r3, #2
 80084fc:	d80b      	bhi.n	8008516 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	885b      	ldrh	r3, [r3, #2]
 8008502:	2b01      	cmp	r3, #1
 8008504:	d10c      	bne.n	8008520 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2200      	movs	r2, #0
 800850a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 f910 	bl	8008734 <USBD_CtlSendStatus>
      }
      break;
 8008514:	e004      	b.n	8008520 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008516:	6839      	ldr	r1, [r7, #0]
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 f840 	bl	800859e <USBD_CtlError>
      break;
 800851e:	e000      	b.n	8008522 <USBD_ClrFeature+0x3c>
      break;
 8008520:	bf00      	nop
  }
}
 8008522:	bf00      	nop
 8008524:	3708      	adds	r7, #8
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800852a:	b580      	push	{r7, lr}
 800852c:	b084      	sub	sp, #16
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
 8008532:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	781a      	ldrb	r2, [r3, #0]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	3301      	adds	r3, #1
 8008544:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	781a      	ldrb	r2, [r3, #0]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	3301      	adds	r3, #1
 8008552:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008554:	68f8      	ldr	r0, [r7, #12]
 8008556:	f7ff fa41 	bl	80079dc <SWAPBYTE>
 800855a:	4603      	mov	r3, r0
 800855c:	461a      	mov	r2, r3
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	3301      	adds	r3, #1
 8008566:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	3301      	adds	r3, #1
 800856c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800856e:	68f8      	ldr	r0, [r7, #12]
 8008570:	f7ff fa34 	bl	80079dc <SWAPBYTE>
 8008574:	4603      	mov	r3, r0
 8008576:	461a      	mov	r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	3301      	adds	r3, #1
 8008580:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	3301      	adds	r3, #1
 8008586:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008588:	68f8      	ldr	r0, [r7, #12]
 800858a:	f7ff fa27 	bl	80079dc <SWAPBYTE>
 800858e:	4603      	mov	r3, r0
 8008590:	461a      	mov	r2, r3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	80da      	strh	r2, [r3, #6]
}
 8008596:	bf00      	nop
 8008598:	3710      	adds	r7, #16
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}

0800859e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800859e:	b580      	push	{r7, lr}
 80085a0:	b082      	sub	sp, #8
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
 80085a6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80085a8:	2180      	movs	r1, #128	; 0x80
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 fcfc 	bl	8008fa8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80085b0:	2100      	movs	r1, #0
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 fcf8 	bl	8008fa8 <USBD_LL_StallEP>
}
 80085b8:	bf00      	nop
 80085ba:	3708      	adds	r7, #8
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b086      	sub	sp, #24
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	60b9      	str	r1, [r7, #8]
 80085ca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80085cc:	2300      	movs	r3, #0
 80085ce:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d036      	beq.n	8008644 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80085da:	6938      	ldr	r0, [r7, #16]
 80085dc:	f000 f836 	bl	800864c <USBD_GetLen>
 80085e0:	4603      	mov	r3, r0
 80085e2:	3301      	adds	r3, #1
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	005b      	lsls	r3, r3, #1
 80085e8:	b29a      	uxth	r2, r3
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80085ee:	7dfb      	ldrb	r3, [r7, #23]
 80085f0:	68ba      	ldr	r2, [r7, #8]
 80085f2:	4413      	add	r3, r2
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	7812      	ldrb	r2, [r2, #0]
 80085f8:	701a      	strb	r2, [r3, #0]
  idx++;
 80085fa:	7dfb      	ldrb	r3, [r7, #23]
 80085fc:	3301      	adds	r3, #1
 80085fe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008600:	7dfb      	ldrb	r3, [r7, #23]
 8008602:	68ba      	ldr	r2, [r7, #8]
 8008604:	4413      	add	r3, r2
 8008606:	2203      	movs	r2, #3
 8008608:	701a      	strb	r2, [r3, #0]
  idx++;
 800860a:	7dfb      	ldrb	r3, [r7, #23]
 800860c:	3301      	adds	r3, #1
 800860e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008610:	e013      	b.n	800863a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008612:	7dfb      	ldrb	r3, [r7, #23]
 8008614:	68ba      	ldr	r2, [r7, #8]
 8008616:	4413      	add	r3, r2
 8008618:	693a      	ldr	r2, [r7, #16]
 800861a:	7812      	ldrb	r2, [r2, #0]
 800861c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	3301      	adds	r3, #1
 8008622:	613b      	str	r3, [r7, #16]
    idx++;
 8008624:	7dfb      	ldrb	r3, [r7, #23]
 8008626:	3301      	adds	r3, #1
 8008628:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800862a:	7dfb      	ldrb	r3, [r7, #23]
 800862c:	68ba      	ldr	r2, [r7, #8]
 800862e:	4413      	add	r3, r2
 8008630:	2200      	movs	r2, #0
 8008632:	701a      	strb	r2, [r3, #0]
    idx++;
 8008634:	7dfb      	ldrb	r3, [r7, #23]
 8008636:	3301      	adds	r3, #1
 8008638:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d1e7      	bne.n	8008612 <USBD_GetString+0x52>
 8008642:	e000      	b.n	8008646 <USBD_GetString+0x86>
    return;
 8008644:	bf00      	nop
  }
}
 8008646:	3718      	adds	r7, #24
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800864c:	b480      	push	{r7}
 800864e:	b085      	sub	sp, #20
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008654:	2300      	movs	r3, #0
 8008656:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800865c:	e005      	b.n	800866a <USBD_GetLen+0x1e>
  {
    len++;
 800865e:	7bfb      	ldrb	r3, [r7, #15]
 8008660:	3301      	adds	r3, #1
 8008662:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	3301      	adds	r3, #1
 8008668:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d1f5      	bne.n	800865e <USBD_GetLen+0x12>
  }

  return len;
 8008672:	7bfb      	ldrb	r3, [r7, #15]
}
 8008674:	4618      	mov	r0, r3
 8008676:	3714      	adds	r7, #20
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2202      	movs	r2, #2
 8008690:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	68ba      	ldr	r2, [r7, #8]
 80086a4:	2100      	movs	r1, #0
 80086a6:	68f8      	ldr	r0, [r7, #12]
 80086a8:	f000 fd07 	bl	80090ba <USBD_LL_Transmit>

  return USBD_OK;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b084      	sub	sp, #16
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	60f8      	str	r0, [r7, #12]
 80086be:	60b9      	str	r1, [r7, #8]
 80086c0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	68ba      	ldr	r2, [r7, #8]
 80086c6:	2100      	movs	r1, #0
 80086c8:	68f8      	ldr	r0, [r7, #12]
 80086ca:	f000 fcf6 	bl	80090ba <USBD_LL_Transmit>

  return USBD_OK;
 80086ce:	2300      	movs	r3, #0
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3710      	adds	r7, #16
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2203      	movs	r2, #3
 80086e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	68ba      	ldr	r2, [r7, #8]
 8008700:	2100      	movs	r1, #0
 8008702:	68f8      	ldr	r0, [r7, #12]
 8008704:	f000 fcfa 	bl	80090fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008708:	2300      	movs	r3, #0
}
 800870a:	4618      	mov	r0, r3
 800870c:	3710      	adds	r7, #16
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}

08008712 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008712:	b580      	push	{r7, lr}
 8008714:	b084      	sub	sp, #16
 8008716:	af00      	add	r7, sp, #0
 8008718:	60f8      	str	r0, [r7, #12]
 800871a:	60b9      	str	r1, [r7, #8]
 800871c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	68ba      	ldr	r2, [r7, #8]
 8008722:	2100      	movs	r1, #0
 8008724:	68f8      	ldr	r0, [r7, #12]
 8008726:	f000 fce9 	bl	80090fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800872a:	2300      	movs	r3, #0
}
 800872c:	4618      	mov	r0, r3
 800872e:	3710      	adds	r7, #16
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2204      	movs	r2, #4
 8008740:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008744:	2300      	movs	r3, #0
 8008746:	2200      	movs	r2, #0
 8008748:	2100      	movs	r1, #0
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 fcb5 	bl	80090ba <USBD_LL_Transmit>

  return USBD_OK;
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	3708      	adds	r7, #8
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}

0800875a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800875a:	b580      	push	{r7, lr}
 800875c:	b082      	sub	sp, #8
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2205      	movs	r2, #5
 8008766:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800876a:	2300      	movs	r3, #0
 800876c:	2200      	movs	r2, #0
 800876e:	2100      	movs	r1, #0
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 fcc3 	bl	80090fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008776:	2300      	movs	r3, #0
}
 8008778:	4618      	mov	r0, r3
 800877a:	3708      	adds	r7, #8
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008784:	2200      	movs	r2, #0
 8008786:	4912      	ldr	r1, [pc, #72]	; (80087d0 <MX_USB_DEVICE_Init+0x50>)
 8008788:	4812      	ldr	r0, [pc, #72]	; (80087d4 <MX_USB_DEVICE_Init+0x54>)
 800878a:	f7fe fd07 	bl	800719c <USBD_Init>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d001      	beq.n	8008798 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008794:	f7f8 f912 	bl	80009bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008798:	490f      	ldr	r1, [pc, #60]	; (80087d8 <MX_USB_DEVICE_Init+0x58>)
 800879a:	480e      	ldr	r0, [pc, #56]	; (80087d4 <MX_USB_DEVICE_Init+0x54>)
 800879c:	f7fe fd2e 	bl	80071fc <USBD_RegisterClass>
 80087a0:	4603      	mov	r3, r0
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d001      	beq.n	80087aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80087a6:	f7f8 f909 	bl	80009bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80087aa:	490c      	ldr	r1, [pc, #48]	; (80087dc <MX_USB_DEVICE_Init+0x5c>)
 80087ac:	4809      	ldr	r0, [pc, #36]	; (80087d4 <MX_USB_DEVICE_Init+0x54>)
 80087ae:	f7fe fc65 	bl	800707c <USBD_CDC_RegisterInterface>
 80087b2:	4603      	mov	r3, r0
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d001      	beq.n	80087bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80087b8:	f7f8 f900 	bl	80009bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80087bc:	4805      	ldr	r0, [pc, #20]	; (80087d4 <MX_USB_DEVICE_Init+0x54>)
 80087be:	f7fe fd53 	bl	8007268 <USBD_Start>
 80087c2:	4603      	mov	r3, r0
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d001      	beq.n	80087cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80087c8:	f7f8 f8f8 	bl	80009bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80087cc:	bf00      	nop
 80087ce:	bd80      	pop	{r7, pc}
 80087d0:	200000d0 	.word	0x200000d0
 80087d4:	20000364 	.word	0x20000364
 80087d8:	20000038 	.word	0x20000038
 80087dc:	200000b8 	.word	0x200000b8

080087e0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80087e4:	2200      	movs	r2, #0
 80087e6:	4905      	ldr	r1, [pc, #20]	; (80087fc <CDC_Init_FS+0x1c>)
 80087e8:	4805      	ldr	r0, [pc, #20]	; (8008800 <CDC_Init_FS+0x20>)
 80087ea:	f7fe fc61 	bl	80070b0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80087ee:	4905      	ldr	r1, [pc, #20]	; (8008804 <CDC_Init_FS+0x24>)
 80087f0:	4803      	ldr	r0, [pc, #12]	; (8008800 <CDC_Init_FS+0x20>)
 80087f2:	f7fe fc7f 	bl	80070f4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80087f6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	bd80      	pop	{r7, pc}
 80087fc:	20000e40 	.word	0x20000e40
 8008800:	20000364 	.word	0x20000364
 8008804:	20000640 	.word	0x20000640

08008808 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008808:	b480      	push	{r7}
 800880a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800880c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800880e:	4618      	mov	r0, r3
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	4603      	mov	r3, r0
 8008820:	6039      	str	r1, [r7, #0]
 8008822:	71fb      	strb	r3, [r7, #7]
 8008824:	4613      	mov	r3, r2
 8008826:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008828:	79fb      	ldrb	r3, [r7, #7]
 800882a:	2b23      	cmp	r3, #35	; 0x23
 800882c:	d84a      	bhi.n	80088c4 <CDC_Control_FS+0xac>
 800882e:	a201      	add	r2, pc, #4	; (adr r2, 8008834 <CDC_Control_FS+0x1c>)
 8008830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008834:	080088c5 	.word	0x080088c5
 8008838:	080088c5 	.word	0x080088c5
 800883c:	080088c5 	.word	0x080088c5
 8008840:	080088c5 	.word	0x080088c5
 8008844:	080088c5 	.word	0x080088c5
 8008848:	080088c5 	.word	0x080088c5
 800884c:	080088c5 	.word	0x080088c5
 8008850:	080088c5 	.word	0x080088c5
 8008854:	080088c5 	.word	0x080088c5
 8008858:	080088c5 	.word	0x080088c5
 800885c:	080088c5 	.word	0x080088c5
 8008860:	080088c5 	.word	0x080088c5
 8008864:	080088c5 	.word	0x080088c5
 8008868:	080088c5 	.word	0x080088c5
 800886c:	080088c5 	.word	0x080088c5
 8008870:	080088c5 	.word	0x080088c5
 8008874:	080088c5 	.word	0x080088c5
 8008878:	080088c5 	.word	0x080088c5
 800887c:	080088c5 	.word	0x080088c5
 8008880:	080088c5 	.word	0x080088c5
 8008884:	080088c5 	.word	0x080088c5
 8008888:	080088c5 	.word	0x080088c5
 800888c:	080088c5 	.word	0x080088c5
 8008890:	080088c5 	.word	0x080088c5
 8008894:	080088c5 	.word	0x080088c5
 8008898:	080088c5 	.word	0x080088c5
 800889c:	080088c5 	.word	0x080088c5
 80088a0:	080088c5 	.word	0x080088c5
 80088a4:	080088c5 	.word	0x080088c5
 80088a8:	080088c5 	.word	0x080088c5
 80088ac:	080088c5 	.word	0x080088c5
 80088b0:	080088c5 	.word	0x080088c5
 80088b4:	080088c5 	.word	0x080088c5
 80088b8:	080088c5 	.word	0x080088c5
 80088bc:	080088c5 	.word	0x080088c5
 80088c0:	080088c5 	.word	0x080088c5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80088c4:	bf00      	nop
  }

  return (USBD_OK);
 80088c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	370c      	adds	r7, #12
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  static char charAccumulator[10];
  static uint8_t lastCharPos = 9;
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80088de:	6879      	ldr	r1, [r7, #4]
 80088e0:	481d      	ldr	r0, [pc, #116]	; (8008958 <CDC_Receive_FS+0x84>)
 80088e2:	f7fe fc07 	bl	80070f4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80088e6:	481c      	ldr	r0, [pc, #112]	; (8008958 <CDC_Receive_FS+0x84>)
 80088e8:	f7fe fc22 	bl	8007130 <USBD_CDC_ReceivePacket>
  //CDC_Transmit_FS(Buf,*Len);

  for (uint8_t c = 0; c < *Len; c++) {
 80088ec:	2300      	movs	r3, #0
 80088ee:	73fb      	strb	r3, [r7, #15]
 80088f0:	e028      	b.n	8008944 <CDC_Receive_FS+0x70>
	  // increment the lastCharPos, wrapping if necessary
	  if(Buf[c] == '\n') {
 80088f2:	7bfb      	ldrb	r3, [r7, #15]
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	4413      	add	r3, r2
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	2b0a      	cmp	r3, #10
 80088fc:	d10a      	bne.n	8008914 <CDC_Receive_FS+0x40>
		  commandReceived(charAccumulator, lastCharPos+1);
 80088fe:	4b17      	ldr	r3, [pc, #92]	; (800895c <CDC_Receive_FS+0x88>)
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	3301      	adds	r3, #1
 8008904:	4619      	mov	r1, r3
 8008906:	4816      	ldr	r0, [pc, #88]	; (8008960 <CDC_Receive_FS+0x8c>)
 8008908:	f7f8 fa0a 	bl	8000d20 <commandReceived>
		  lastCharPos = 9;
 800890c:	4b13      	ldr	r3, [pc, #76]	; (800895c <CDC_Receive_FS+0x88>)
 800890e:	2209      	movs	r2, #9
 8008910:	701a      	strb	r2, [r3, #0]
 8008912:	e014      	b.n	800893e <CDC_Receive_FS+0x6a>
	  }
	  else
	  {
		  if (++lastCharPos == 10)
 8008914:	4b11      	ldr	r3, [pc, #68]	; (800895c <CDC_Receive_FS+0x88>)
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	3301      	adds	r3, #1
 800891a:	b2da      	uxtb	r2, r3
 800891c:	4b0f      	ldr	r3, [pc, #60]	; (800895c <CDC_Receive_FS+0x88>)
 800891e:	701a      	strb	r2, [r3, #0]
 8008920:	4b0e      	ldr	r3, [pc, #56]	; (800895c <CDC_Receive_FS+0x88>)
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	2b0a      	cmp	r3, #10
 8008926:	d102      	bne.n	800892e <CDC_Receive_FS+0x5a>
			  lastCharPos = 0;
 8008928:	4b0c      	ldr	r3, [pc, #48]	; (800895c <CDC_Receive_FS+0x88>)
 800892a:	2200      	movs	r2, #0
 800892c:	701a      	strb	r2, [r3, #0]
		  charAccumulator[lastCharPos] = Buf[c];
 800892e:	7bfb      	ldrb	r3, [r7, #15]
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	4413      	add	r3, r2
 8008934:	4a09      	ldr	r2, [pc, #36]	; (800895c <CDC_Receive_FS+0x88>)
 8008936:	7812      	ldrb	r2, [r2, #0]
 8008938:	7819      	ldrb	r1, [r3, #0]
 800893a:	4b09      	ldr	r3, [pc, #36]	; (8008960 <CDC_Receive_FS+0x8c>)
 800893c:	5499      	strb	r1, [r3, r2]
  for (uint8_t c = 0; c < *Len; c++) {
 800893e:	7bfb      	ldrb	r3, [r7, #15]
 8008940:	3301      	adds	r3, #1
 8008942:	73fb      	strb	r3, [r7, #15]
 8008944:	7bfa      	ldrb	r2, [r7, #15]
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	429a      	cmp	r2, r3
 800894c:	d3d1      	bcc.n	80088f2 <CDC_Receive_FS+0x1e>
	  }
  }
  return (USBD_OK);
 800894e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008950:	4618      	mov	r0, r3
 8008952:	3710      	adds	r7, #16
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}
 8008958:	20000364 	.word	0x20000364
 800895c:	200000cc 	.word	0x200000cc
 8008960:	20001640 	.word	0x20001640

08008964 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008964:	b480      	push	{r7}
 8008966:	b087      	sub	sp, #28
 8008968:	af00      	add	r7, sp, #0
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	60b9      	str	r1, [r7, #8]
 800896e:	4613      	mov	r3, r2
 8008970:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008972:	2300      	movs	r3, #0
 8008974:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008976:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800897a:	4618      	mov	r0, r3
 800897c:	371c      	adds	r7, #28
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr
	...

08008988 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
 800898e:	4603      	mov	r3, r0
 8008990:	6039      	str	r1, [r7, #0]
 8008992:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	2212      	movs	r2, #18
 8008998:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800899a:	4b03      	ldr	r3, [pc, #12]	; (80089a8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800899c:	4618      	mov	r0, r3
 800899e:	370c      	adds	r7, #12
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr
 80089a8:	200000ec 	.word	0x200000ec

080089ac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b083      	sub	sp, #12
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	4603      	mov	r3, r0
 80089b4:	6039      	str	r1, [r7, #0]
 80089b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	2204      	movs	r2, #4
 80089bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80089be:	4b03      	ldr	r3, [pc, #12]	; (80089cc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	370c      	adds	r7, #12
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr
 80089cc:	20000100 	.word	0x20000100

080089d0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	4603      	mov	r3, r0
 80089d8:	6039      	str	r1, [r7, #0]
 80089da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80089dc:	79fb      	ldrb	r3, [r7, #7]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d105      	bne.n	80089ee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80089e2:	683a      	ldr	r2, [r7, #0]
 80089e4:	4907      	ldr	r1, [pc, #28]	; (8008a04 <USBD_FS_ProductStrDescriptor+0x34>)
 80089e6:	4808      	ldr	r0, [pc, #32]	; (8008a08 <USBD_FS_ProductStrDescriptor+0x38>)
 80089e8:	f7ff fdea 	bl	80085c0 <USBD_GetString>
 80089ec:	e004      	b.n	80089f8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80089ee:	683a      	ldr	r2, [r7, #0]
 80089f0:	4904      	ldr	r1, [pc, #16]	; (8008a04 <USBD_FS_ProductStrDescriptor+0x34>)
 80089f2:	4805      	ldr	r0, [pc, #20]	; (8008a08 <USBD_FS_ProductStrDescriptor+0x38>)
 80089f4:	f7ff fde4 	bl	80085c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80089f8:	4b02      	ldr	r3, [pc, #8]	; (8008a04 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3708      	adds	r7, #8
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	2000164c 	.word	0x2000164c
 8008a08:	08009274 	.word	0x08009274

08008a0c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	4603      	mov	r3, r0
 8008a14:	6039      	str	r1, [r7, #0]
 8008a16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008a18:	683a      	ldr	r2, [r7, #0]
 8008a1a:	4904      	ldr	r1, [pc, #16]	; (8008a2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008a1c:	4804      	ldr	r0, [pc, #16]	; (8008a30 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008a1e:	f7ff fdcf 	bl	80085c0 <USBD_GetString>
  return USBD_StrDesc;
 8008a22:	4b02      	ldr	r3, [pc, #8]	; (8008a2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3708      	adds	r7, #8
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}
 8008a2c:	2000164c 	.word	0x2000164c
 8008a30:	0800928c 	.word	0x0800928c

08008a34 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b082      	sub	sp, #8
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	6039      	str	r1, [r7, #0]
 8008a3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	221a      	movs	r2, #26
 8008a44:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008a46:	f000 f843 	bl	8008ad0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008a4a:	4b02      	ldr	r3, [pc, #8]	; (8008a54 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3708      	adds	r7, #8
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}
 8008a54:	20000104 	.word	0x20000104

08008a58 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b082      	sub	sp, #8
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	4603      	mov	r3, r0
 8008a60:	6039      	str	r1, [r7, #0]
 8008a62:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008a64:	79fb      	ldrb	r3, [r7, #7]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d105      	bne.n	8008a76 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a6a:	683a      	ldr	r2, [r7, #0]
 8008a6c:	4907      	ldr	r1, [pc, #28]	; (8008a8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a6e:	4808      	ldr	r0, [pc, #32]	; (8008a90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a70:	f7ff fda6 	bl	80085c0 <USBD_GetString>
 8008a74:	e004      	b.n	8008a80 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a76:	683a      	ldr	r2, [r7, #0]
 8008a78:	4904      	ldr	r1, [pc, #16]	; (8008a8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a7a:	4805      	ldr	r0, [pc, #20]	; (8008a90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a7c:	f7ff fda0 	bl	80085c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a80:	4b02      	ldr	r3, [pc, #8]	; (8008a8c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3708      	adds	r7, #8
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	2000164c 	.word	0x2000164c
 8008a90:	080092a0 	.word	0x080092a0

08008a94 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b082      	sub	sp, #8
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	6039      	str	r1, [r7, #0]
 8008a9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008aa0:	79fb      	ldrb	r3, [r7, #7]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d105      	bne.n	8008ab2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008aa6:	683a      	ldr	r2, [r7, #0]
 8008aa8:	4907      	ldr	r1, [pc, #28]	; (8008ac8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008aaa:	4808      	ldr	r0, [pc, #32]	; (8008acc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008aac:	f7ff fd88 	bl	80085c0 <USBD_GetString>
 8008ab0:	e004      	b.n	8008abc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008ab2:	683a      	ldr	r2, [r7, #0]
 8008ab4:	4904      	ldr	r1, [pc, #16]	; (8008ac8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008ab6:	4805      	ldr	r0, [pc, #20]	; (8008acc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ab8:	f7ff fd82 	bl	80085c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008abc:	4b02      	ldr	r3, [pc, #8]	; (8008ac8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3708      	adds	r7, #8
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop
 8008ac8:	2000164c 	.word	0x2000164c
 8008acc:	080092ac 	.word	0x080092ac

08008ad0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008ad6:	4b0f      	ldr	r3, [pc, #60]	; (8008b14 <Get_SerialNum+0x44>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008adc:	4b0e      	ldr	r3, [pc, #56]	; (8008b18 <Get_SerialNum+0x48>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008ae2:	4b0e      	ldr	r3, [pc, #56]	; (8008b1c <Get_SerialNum+0x4c>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008ae8:	68fa      	ldr	r2, [r7, #12]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	4413      	add	r3, r2
 8008aee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d009      	beq.n	8008b0a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008af6:	2208      	movs	r2, #8
 8008af8:	4909      	ldr	r1, [pc, #36]	; (8008b20 <Get_SerialNum+0x50>)
 8008afa:	68f8      	ldr	r0, [r7, #12]
 8008afc:	f000 f814 	bl	8008b28 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008b00:	2204      	movs	r2, #4
 8008b02:	4908      	ldr	r1, [pc, #32]	; (8008b24 <Get_SerialNum+0x54>)
 8008b04:	68b8      	ldr	r0, [r7, #8]
 8008b06:	f000 f80f 	bl	8008b28 <IntToUnicode>
  }
}
 8008b0a:	bf00      	nop
 8008b0c:	3710      	adds	r7, #16
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
 8008b12:	bf00      	nop
 8008b14:	1fff7a10 	.word	0x1fff7a10
 8008b18:	1fff7a14 	.word	0x1fff7a14
 8008b1c:	1fff7a18 	.word	0x1fff7a18
 8008b20:	20000106 	.word	0x20000106
 8008b24:	20000116 	.word	0x20000116

08008b28 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b087      	sub	sp, #28
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	60f8      	str	r0, [r7, #12]
 8008b30:	60b9      	str	r1, [r7, #8]
 8008b32:	4613      	mov	r3, r2
 8008b34:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008b36:	2300      	movs	r3, #0
 8008b38:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	75fb      	strb	r3, [r7, #23]
 8008b3e:	e027      	b.n	8008b90 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	0f1b      	lsrs	r3, r3, #28
 8008b44:	2b09      	cmp	r3, #9
 8008b46:	d80b      	bhi.n	8008b60 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	0f1b      	lsrs	r3, r3, #28
 8008b4c:	b2da      	uxtb	r2, r3
 8008b4e:	7dfb      	ldrb	r3, [r7, #23]
 8008b50:	005b      	lsls	r3, r3, #1
 8008b52:	4619      	mov	r1, r3
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	440b      	add	r3, r1
 8008b58:	3230      	adds	r2, #48	; 0x30
 8008b5a:	b2d2      	uxtb	r2, r2
 8008b5c:	701a      	strb	r2, [r3, #0]
 8008b5e:	e00a      	b.n	8008b76 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	0f1b      	lsrs	r3, r3, #28
 8008b64:	b2da      	uxtb	r2, r3
 8008b66:	7dfb      	ldrb	r3, [r7, #23]
 8008b68:	005b      	lsls	r3, r3, #1
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	440b      	add	r3, r1
 8008b70:	3237      	adds	r2, #55	; 0x37
 8008b72:	b2d2      	uxtb	r2, r2
 8008b74:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	011b      	lsls	r3, r3, #4
 8008b7a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008b7c:	7dfb      	ldrb	r3, [r7, #23]
 8008b7e:	005b      	lsls	r3, r3, #1
 8008b80:	3301      	adds	r3, #1
 8008b82:	68ba      	ldr	r2, [r7, #8]
 8008b84:	4413      	add	r3, r2
 8008b86:	2200      	movs	r2, #0
 8008b88:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008b8a:	7dfb      	ldrb	r3, [r7, #23]
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	75fb      	strb	r3, [r7, #23]
 8008b90:	7dfa      	ldrb	r2, [r7, #23]
 8008b92:	79fb      	ldrb	r3, [r7, #7]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d3d3      	bcc.n	8008b40 <IntToUnicode+0x18>
  }
}
 8008b98:	bf00      	nop
 8008b9a:	bf00      	nop
 8008b9c:	371c      	adds	r7, #28
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr
	...

08008ba8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b08a      	sub	sp, #40	; 0x28
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008bb0:	f107 0314 	add.w	r3, r7, #20
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	601a      	str	r2, [r3, #0]
 8008bb8:	605a      	str	r2, [r3, #4]
 8008bba:	609a      	str	r2, [r3, #8]
 8008bbc:	60da      	str	r2, [r3, #12]
 8008bbe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008bc8:	d147      	bne.n	8008c5a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008bca:	2300      	movs	r3, #0
 8008bcc:	613b      	str	r3, [r7, #16]
 8008bce:	4b25      	ldr	r3, [pc, #148]	; (8008c64 <HAL_PCD_MspInit+0xbc>)
 8008bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd2:	4a24      	ldr	r2, [pc, #144]	; (8008c64 <HAL_PCD_MspInit+0xbc>)
 8008bd4:	f043 0301 	orr.w	r3, r3, #1
 8008bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8008bda:	4b22      	ldr	r3, [pc, #136]	; (8008c64 <HAL_PCD_MspInit+0xbc>)
 8008bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bde:	f003 0301 	and.w	r3, r3, #1
 8008be2:	613b      	str	r3, [r7, #16]
 8008be4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008be6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008bec:	2300      	movs	r3, #0
 8008bee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008bf4:	f107 0314 	add.w	r3, r7, #20
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	481b      	ldr	r0, [pc, #108]	; (8008c68 <HAL_PCD_MspInit+0xc0>)
 8008bfc:	f7f9 fa8a 	bl	8002114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008c00:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c06:	2302      	movs	r3, #2
 8008c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008c12:	230a      	movs	r3, #10
 8008c14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c16:	f107 0314 	add.w	r3, r7, #20
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	4812      	ldr	r0, [pc, #72]	; (8008c68 <HAL_PCD_MspInit+0xc0>)
 8008c1e:	f7f9 fa79 	bl	8002114 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008c22:	4b10      	ldr	r3, [pc, #64]	; (8008c64 <HAL_PCD_MspInit+0xbc>)
 8008c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c26:	4a0f      	ldr	r2, [pc, #60]	; (8008c64 <HAL_PCD_MspInit+0xbc>)
 8008c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c2c:	6353      	str	r3, [r2, #52]	; 0x34
 8008c2e:	2300      	movs	r3, #0
 8008c30:	60fb      	str	r3, [r7, #12]
 8008c32:	4b0c      	ldr	r3, [pc, #48]	; (8008c64 <HAL_PCD_MspInit+0xbc>)
 8008c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c36:	4a0b      	ldr	r2, [pc, #44]	; (8008c64 <HAL_PCD_MspInit+0xbc>)
 8008c38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8008c3e:	4b09      	ldr	r3, [pc, #36]	; (8008c64 <HAL_PCD_MspInit+0xbc>)
 8008c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c46:	60fb      	str	r3, [r7, #12]
 8008c48:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	2100      	movs	r1, #0
 8008c4e:	2043      	movs	r0, #67	; 0x43
 8008c50:	f7f8 fdf6 	bl	8001840 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008c54:	2043      	movs	r0, #67	; 0x43
 8008c56:	f7f8 fe0f 	bl	8001878 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008c5a:	bf00      	nop
 8008c5c:	3728      	adds	r7, #40	; 0x28
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	40023800 	.word	0x40023800
 8008c68:	40020000 	.word	0x40020000

08008c6c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008c80:	4619      	mov	r1, r3
 8008c82:	4610      	mov	r0, r2
 8008c84:	f7fe fb3d 	bl	8007302 <USBD_LL_SetupStage>
}
 8008c88:	bf00      	nop
 8008c8a:	3708      	adds	r7, #8
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b082      	sub	sp, #8
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	460b      	mov	r3, r1
 8008c9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008ca2:	78fa      	ldrb	r2, [r7, #3]
 8008ca4:	6879      	ldr	r1, [r7, #4]
 8008ca6:	4613      	mov	r3, r2
 8008ca8:	00db      	lsls	r3, r3, #3
 8008caa:	4413      	add	r3, r2
 8008cac:	009b      	lsls	r3, r3, #2
 8008cae:	440b      	add	r3, r1
 8008cb0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	78fb      	ldrb	r3, [r7, #3]
 8008cb8:	4619      	mov	r1, r3
 8008cba:	f7fe fb77 	bl	80073ac <USBD_LL_DataOutStage>
}
 8008cbe:	bf00      	nop
 8008cc0:	3708      	adds	r7, #8
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}

08008cc6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cc6:	b580      	push	{r7, lr}
 8008cc8:	b082      	sub	sp, #8
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
 8008cce:	460b      	mov	r3, r1
 8008cd0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008cd8:	78fa      	ldrb	r2, [r7, #3]
 8008cda:	6879      	ldr	r1, [r7, #4]
 8008cdc:	4613      	mov	r3, r2
 8008cde:	00db      	lsls	r3, r3, #3
 8008ce0:	4413      	add	r3, r2
 8008ce2:	009b      	lsls	r3, r3, #2
 8008ce4:	440b      	add	r3, r1
 8008ce6:	334c      	adds	r3, #76	; 0x4c
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	78fb      	ldrb	r3, [r7, #3]
 8008cec:	4619      	mov	r1, r3
 8008cee:	f7fe fc10 	bl	8007512 <USBD_LL_DataInStage>
}
 8008cf2:	bf00      	nop
 8008cf4:	3708      	adds	r7, #8
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b082      	sub	sp, #8
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f7fe fd44 	bl	8007796 <USBD_LL_SOF>
}
 8008d0e:	bf00      	nop
 8008d10:	3708      	adds	r7, #8
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d16:	b580      	push	{r7, lr}
 8008d18:	b084      	sub	sp, #16
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	68db      	ldr	r3, [r3, #12]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d102      	bne.n	8008d30 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	73fb      	strb	r3, [r7, #15]
 8008d2e:	e008      	b.n	8008d42 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	2b02      	cmp	r3, #2
 8008d36:	d102      	bne.n	8008d3e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	73fb      	strb	r3, [r7, #15]
 8008d3c:	e001      	b.n	8008d42 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008d3e:	f7f7 fe3d 	bl	80009bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d48:	7bfa      	ldrb	r2, [r7, #15]
 8008d4a:	4611      	mov	r1, r2
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f7fe fce4 	bl	800771a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f7fe fc8c 	bl	8007676 <USBD_LL_Reset>
}
 8008d5e:	bf00      	nop
 8008d60:	3710      	adds	r7, #16
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
	...

08008d68 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d76:	4618      	mov	r0, r3
 8008d78:	f7fe fcdf 	bl	800773a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	6812      	ldr	r2, [r2, #0]
 8008d8a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008d8e:	f043 0301 	orr.w	r3, r3, #1
 8008d92:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6a1b      	ldr	r3, [r3, #32]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d005      	beq.n	8008da8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008d9c:	4b04      	ldr	r3, [pc, #16]	; (8008db0 <HAL_PCD_SuspendCallback+0x48>)
 8008d9e:	691b      	ldr	r3, [r3, #16]
 8008da0:	4a03      	ldr	r2, [pc, #12]	; (8008db0 <HAL_PCD_SuspendCallback+0x48>)
 8008da2:	f043 0306 	orr.w	r3, r3, #6
 8008da6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008da8:	bf00      	nop
 8008daa:	3708      	adds	r7, #8
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	e000ed00 	.word	0xe000ed00

08008db4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b082      	sub	sp, #8
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7fe fccf 	bl	8007766 <USBD_LL_Resume>
}
 8008dc8:	bf00      	nop
 8008dca:	3708      	adds	r7, #8
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	460b      	mov	r3, r1
 8008dda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008de2:	78fa      	ldrb	r2, [r7, #3]
 8008de4:	4611      	mov	r1, r2
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7fe fd27 	bl	800783a <USBD_LL_IsoOUTIncomplete>
}
 8008dec:	bf00      	nop
 8008dee:	3708      	adds	r7, #8
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e06:	78fa      	ldrb	r2, [r7, #3]
 8008e08:	4611      	mov	r1, r2
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7fe fce3 	bl	80077d6 <USBD_LL_IsoINIncomplete>
}
 8008e10:	bf00      	nop
 8008e12:	3708      	adds	r7, #8
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e26:	4618      	mov	r0, r3
 8008e28:	f7fe fd39 	bl	800789e <USBD_LL_DevConnected>
}
 8008e2c:	bf00      	nop
 8008e2e:	3708      	adds	r7, #8
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e42:	4618      	mov	r0, r3
 8008e44:	f7fe fd36 	bl	80078b4 <USBD_LL_DevDisconnected>
}
 8008e48:	bf00      	nop
 8008e4a:	3708      	adds	r7, #8
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d13c      	bne.n	8008eda <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008e60:	4a20      	ldr	r2, [pc, #128]	; (8008ee4 <USBD_LL_Init+0x94>)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	4a1e      	ldr	r2, [pc, #120]	; (8008ee4 <USBD_LL_Init+0x94>)
 8008e6c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008e70:	4b1c      	ldr	r3, [pc, #112]	; (8008ee4 <USBD_LL_Init+0x94>)
 8008e72:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008e76:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008e78:	4b1a      	ldr	r3, [pc, #104]	; (8008ee4 <USBD_LL_Init+0x94>)
 8008e7a:	2204      	movs	r2, #4
 8008e7c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008e7e:	4b19      	ldr	r3, [pc, #100]	; (8008ee4 <USBD_LL_Init+0x94>)
 8008e80:	2202      	movs	r2, #2
 8008e82:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008e84:	4b17      	ldr	r3, [pc, #92]	; (8008ee4 <USBD_LL_Init+0x94>)
 8008e86:	2200      	movs	r2, #0
 8008e88:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008e8a:	4b16      	ldr	r3, [pc, #88]	; (8008ee4 <USBD_LL_Init+0x94>)
 8008e8c:	2202      	movs	r2, #2
 8008e8e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008e90:	4b14      	ldr	r3, [pc, #80]	; (8008ee4 <USBD_LL_Init+0x94>)
 8008e92:	2200      	movs	r2, #0
 8008e94:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008e96:	4b13      	ldr	r3, [pc, #76]	; (8008ee4 <USBD_LL_Init+0x94>)
 8008e98:	2200      	movs	r2, #0
 8008e9a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008e9c:	4b11      	ldr	r3, [pc, #68]	; (8008ee4 <USBD_LL_Init+0x94>)
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008ea2:	4b10      	ldr	r3, [pc, #64]	; (8008ee4 <USBD_LL_Init+0x94>)
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008ea8:	4b0e      	ldr	r3, [pc, #56]	; (8008ee4 <USBD_LL_Init+0x94>)
 8008eaa:	2200      	movs	r2, #0
 8008eac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008eae:	480d      	ldr	r0, [pc, #52]	; (8008ee4 <USBD_LL_Init+0x94>)
 8008eb0:	f7f9 fafe 	bl	80024b0 <HAL_PCD_Init>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d001      	beq.n	8008ebe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008eba:	f7f7 fd7f 	bl	80009bc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008ebe:	2180      	movs	r1, #128	; 0x80
 8008ec0:	4808      	ldr	r0, [pc, #32]	; (8008ee4 <USBD_LL_Init+0x94>)
 8008ec2:	f7fa fd56 	bl	8003972 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008ec6:	2240      	movs	r2, #64	; 0x40
 8008ec8:	2100      	movs	r1, #0
 8008eca:	4806      	ldr	r0, [pc, #24]	; (8008ee4 <USBD_LL_Init+0x94>)
 8008ecc:	f7fa fd0a 	bl	80038e4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008ed0:	2280      	movs	r2, #128	; 0x80
 8008ed2:	2101      	movs	r1, #1
 8008ed4:	4803      	ldr	r0, [pc, #12]	; (8008ee4 <USBD_LL_Init+0x94>)
 8008ed6:	f7fa fd05 	bl	80038e4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008eda:	2300      	movs	r3, #0
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3708      	adds	r7, #8
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	2000184c 	.word	0x2000184c

08008ee8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7f9 fbf3 	bl	80026ea <HAL_PCD_Start>
 8008f04:	4603      	mov	r3, r0
 8008f06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f08:	7bfb      	ldrb	r3, [r7, #15]
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f000 f942 	bl	8009194 <USBD_Get_USB_Status>
 8008f10:	4603      	mov	r3, r0
 8008f12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f14:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3710      	adds	r7, #16
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b084      	sub	sp, #16
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
 8008f26:	4608      	mov	r0, r1
 8008f28:	4611      	mov	r1, r2
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	70fb      	strb	r3, [r7, #3]
 8008f30:	460b      	mov	r3, r1
 8008f32:	70bb      	strb	r3, [r7, #2]
 8008f34:	4613      	mov	r3, r2
 8008f36:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008f46:	78bb      	ldrb	r3, [r7, #2]
 8008f48:	883a      	ldrh	r2, [r7, #0]
 8008f4a:	78f9      	ldrb	r1, [r7, #3]
 8008f4c:	f7fa f8c4 	bl	80030d8 <HAL_PCD_EP_Open>
 8008f50:	4603      	mov	r3, r0
 8008f52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f54:	7bfb      	ldrb	r3, [r7, #15]
 8008f56:	4618      	mov	r0, r3
 8008f58:	f000 f91c 	bl	8009194 <USBD_Get_USB_Status>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f60:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3710      	adds	r7, #16
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}

08008f6a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	b084      	sub	sp, #16
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
 8008f72:	460b      	mov	r3, r1
 8008f74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f76:	2300      	movs	r3, #0
 8008f78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f84:	78fa      	ldrb	r2, [r7, #3]
 8008f86:	4611      	mov	r1, r2
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f7fa f90d 	bl	80031a8 <HAL_PCD_EP_Close>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f92:	7bfb      	ldrb	r3, [r7, #15]
 8008f94:	4618      	mov	r0, r3
 8008f96:	f000 f8fd 	bl	8009194 <USBD_Get_USB_Status>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3710      	adds	r7, #16
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008fc2:	78fa      	ldrb	r2, [r7, #3]
 8008fc4:	4611      	mov	r1, r2
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f7fa f9e5 	bl	8003396 <HAL_PCD_EP_SetStall>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fd0:	7bfb      	ldrb	r3, [r7, #15]
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f000 f8de 	bl	8009194 <USBD_Get_USB_Status>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fdc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3710      	adds	r7, #16
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}

08008fe6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fe6:	b580      	push	{r7, lr}
 8008fe8:	b084      	sub	sp, #16
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	6078      	str	r0, [r7, #4]
 8008fee:	460b      	mov	r3, r1
 8008ff0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009000:	78fa      	ldrb	r2, [r7, #3]
 8009002:	4611      	mov	r1, r2
 8009004:	4618      	mov	r0, r3
 8009006:	f7fa fa2a 	bl	800345e <HAL_PCD_EP_ClrStall>
 800900a:	4603      	mov	r3, r0
 800900c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800900e:	7bfb      	ldrb	r3, [r7, #15]
 8009010:	4618      	mov	r0, r3
 8009012:	f000 f8bf 	bl	8009194 <USBD_Get_USB_Status>
 8009016:	4603      	mov	r3, r0
 8009018:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800901a:	7bbb      	ldrb	r3, [r7, #14]
}
 800901c:	4618      	mov	r0, r3
 800901e:	3710      	adds	r7, #16
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009024:	b480      	push	{r7}
 8009026:	b085      	sub	sp, #20
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	460b      	mov	r3, r1
 800902e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009036:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009038:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800903c:	2b00      	cmp	r3, #0
 800903e:	da0b      	bge.n	8009058 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009040:	78fb      	ldrb	r3, [r7, #3]
 8009042:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009046:	68f9      	ldr	r1, [r7, #12]
 8009048:	4613      	mov	r3, r2
 800904a:	00db      	lsls	r3, r3, #3
 800904c:	4413      	add	r3, r2
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	440b      	add	r3, r1
 8009052:	333e      	adds	r3, #62	; 0x3e
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	e00b      	b.n	8009070 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009058:	78fb      	ldrb	r3, [r7, #3]
 800905a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800905e:	68f9      	ldr	r1, [r7, #12]
 8009060:	4613      	mov	r3, r2
 8009062:	00db      	lsls	r3, r3, #3
 8009064:	4413      	add	r3, r2
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	440b      	add	r3, r1
 800906a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800906e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009070:	4618      	mov	r0, r3
 8009072:	3714      	adds	r7, #20
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr

0800907c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	460b      	mov	r3, r1
 8009086:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009088:	2300      	movs	r3, #0
 800908a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800908c:	2300      	movs	r3, #0
 800908e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009096:	78fa      	ldrb	r2, [r7, #3]
 8009098:	4611      	mov	r1, r2
 800909a:	4618      	mov	r0, r3
 800909c:	f7f9 fff7 	bl	800308e <HAL_PCD_SetAddress>
 80090a0:	4603      	mov	r3, r0
 80090a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090a4:	7bfb      	ldrb	r3, [r7, #15]
 80090a6:	4618      	mov	r0, r3
 80090a8:	f000 f874 	bl	8009194 <USBD_Get_USB_Status>
 80090ac:	4603      	mov	r3, r0
 80090ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}

080090ba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80090ba:	b580      	push	{r7, lr}
 80090bc:	b086      	sub	sp, #24
 80090be:	af00      	add	r7, sp, #0
 80090c0:	60f8      	str	r0, [r7, #12]
 80090c2:	607a      	str	r2, [r7, #4]
 80090c4:	603b      	str	r3, [r7, #0]
 80090c6:	460b      	mov	r3, r1
 80090c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090ca:	2300      	movs	r3, #0
 80090cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090ce:	2300      	movs	r3, #0
 80090d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80090d8:	7af9      	ldrb	r1, [r7, #11]
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	f7fa f910 	bl	8003302 <HAL_PCD_EP_Transmit>
 80090e2:	4603      	mov	r3, r0
 80090e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090e6:	7dfb      	ldrb	r3, [r7, #23]
 80090e8:	4618      	mov	r0, r3
 80090ea:	f000 f853 	bl	8009194 <USBD_Get_USB_Status>
 80090ee:	4603      	mov	r3, r0
 80090f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80090f2:	7dbb      	ldrb	r3, [r7, #22]
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3718      	adds	r7, #24
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b086      	sub	sp, #24
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	607a      	str	r2, [r7, #4]
 8009106:	603b      	str	r3, [r7, #0]
 8009108:	460b      	mov	r3, r1
 800910a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800910c:	2300      	movs	r3, #0
 800910e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009110:	2300      	movs	r3, #0
 8009112:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800911a:	7af9      	ldrb	r1, [r7, #11]
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	f7fa f88c 	bl	800323c <HAL_PCD_EP_Receive>
 8009124:	4603      	mov	r3, r0
 8009126:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009128:	7dfb      	ldrb	r3, [r7, #23]
 800912a:	4618      	mov	r0, r3
 800912c:	f000 f832 	bl	8009194 <USBD_Get_USB_Status>
 8009130:	4603      	mov	r3, r0
 8009132:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009134:	7dbb      	ldrb	r3, [r7, #22]
}
 8009136:	4618      	mov	r0, r3
 8009138:	3718      	adds	r7, #24
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}

0800913e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800913e:	b580      	push	{r7, lr}
 8009140:	b082      	sub	sp, #8
 8009142:	af00      	add	r7, sp, #0
 8009144:	6078      	str	r0, [r7, #4]
 8009146:	460b      	mov	r3, r1
 8009148:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009150:	78fa      	ldrb	r2, [r7, #3]
 8009152:	4611      	mov	r1, r2
 8009154:	4618      	mov	r0, r3
 8009156:	f7fa f8bc 	bl	80032d2 <HAL_PCD_EP_GetRxCount>
 800915a:	4603      	mov	r3, r0
}
 800915c:	4618      	mov	r0, r3
 800915e:	3708      	adds	r7, #8
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009164:	b480      	push	{r7}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800916c:	4b03      	ldr	r3, [pc, #12]	; (800917c <USBD_static_malloc+0x18>)
}
 800916e:	4618      	mov	r0, r3
 8009170:	370c      	adds	r7, #12
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr
 800917a:	bf00      	nop
 800917c:	20001d58 	.word	0x20001d58

08009180 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009180:	b480      	push	{r7}
 8009182:	b083      	sub	sp, #12
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]

}
 8009188:	bf00      	nop
 800918a:	370c      	adds	r7, #12
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr

08009194 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009194:	b480      	push	{r7}
 8009196:	b085      	sub	sp, #20
 8009198:	af00      	add	r7, sp, #0
 800919a:	4603      	mov	r3, r0
 800919c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800919e:	2300      	movs	r3, #0
 80091a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80091a2:	79fb      	ldrb	r3, [r7, #7]
 80091a4:	2b03      	cmp	r3, #3
 80091a6:	d817      	bhi.n	80091d8 <USBD_Get_USB_Status+0x44>
 80091a8:	a201      	add	r2, pc, #4	; (adr r2, 80091b0 <USBD_Get_USB_Status+0x1c>)
 80091aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ae:	bf00      	nop
 80091b0:	080091c1 	.word	0x080091c1
 80091b4:	080091c7 	.word	0x080091c7
 80091b8:	080091cd 	.word	0x080091cd
 80091bc:	080091d3 	.word	0x080091d3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80091c0:	2300      	movs	r3, #0
 80091c2:	73fb      	strb	r3, [r7, #15]
    break;
 80091c4:	e00b      	b.n	80091de <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80091c6:	2303      	movs	r3, #3
 80091c8:	73fb      	strb	r3, [r7, #15]
    break;
 80091ca:	e008      	b.n	80091de <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80091cc:	2301      	movs	r3, #1
 80091ce:	73fb      	strb	r3, [r7, #15]
    break;
 80091d0:	e005      	b.n	80091de <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80091d2:	2303      	movs	r3, #3
 80091d4:	73fb      	strb	r3, [r7, #15]
    break;
 80091d6:	e002      	b.n	80091de <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80091d8:	2303      	movs	r3, #3
 80091da:	73fb      	strb	r3, [r7, #15]
    break;
 80091dc:	bf00      	nop
  }
  return usb_status;
 80091de:	7bfb      	ldrb	r3, [r7, #15]
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3714      	adds	r7, #20
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <memset>:
 80091ec:	4402      	add	r2, r0
 80091ee:	4603      	mov	r3, r0
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d100      	bne.n	80091f6 <memset+0xa>
 80091f4:	4770      	bx	lr
 80091f6:	f803 1b01 	strb.w	r1, [r3], #1
 80091fa:	e7f9      	b.n	80091f0 <memset+0x4>

080091fc <__libc_init_array>:
 80091fc:	b570      	push	{r4, r5, r6, lr}
 80091fe:	4d0d      	ldr	r5, [pc, #52]	; (8009234 <__libc_init_array+0x38>)
 8009200:	4c0d      	ldr	r4, [pc, #52]	; (8009238 <__libc_init_array+0x3c>)
 8009202:	1b64      	subs	r4, r4, r5
 8009204:	10a4      	asrs	r4, r4, #2
 8009206:	2600      	movs	r6, #0
 8009208:	42a6      	cmp	r6, r4
 800920a:	d109      	bne.n	8009220 <__libc_init_array+0x24>
 800920c:	4d0b      	ldr	r5, [pc, #44]	; (800923c <__libc_init_array+0x40>)
 800920e:	4c0c      	ldr	r4, [pc, #48]	; (8009240 <__libc_init_array+0x44>)
 8009210:	f000 f818 	bl	8009244 <_init>
 8009214:	1b64      	subs	r4, r4, r5
 8009216:	10a4      	asrs	r4, r4, #2
 8009218:	2600      	movs	r6, #0
 800921a:	42a6      	cmp	r6, r4
 800921c:	d105      	bne.n	800922a <__libc_init_array+0x2e>
 800921e:	bd70      	pop	{r4, r5, r6, pc}
 8009220:	f855 3b04 	ldr.w	r3, [r5], #4
 8009224:	4798      	blx	r3
 8009226:	3601      	adds	r6, #1
 8009228:	e7ee      	b.n	8009208 <__libc_init_array+0xc>
 800922a:	f855 3b04 	ldr.w	r3, [r5], #4
 800922e:	4798      	blx	r3
 8009230:	3601      	adds	r6, #1
 8009232:	e7f2      	b.n	800921a <__libc_init_array+0x1e>
 8009234:	080092e4 	.word	0x080092e4
 8009238:	080092e4 	.word	0x080092e4
 800923c:	080092e4 	.word	0x080092e4
 8009240:	080092e8 	.word	0x080092e8

08009244 <_init>:
 8009244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009246:	bf00      	nop
 8009248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800924a:	bc08      	pop	{r3}
 800924c:	469e      	mov	lr, r3
 800924e:	4770      	bx	lr

08009250 <_fini>:
 8009250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009252:	bf00      	nop
 8009254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009256:	bc08      	pop	{r3}
 8009258:	469e      	mov	lr, r3
 800925a:	4770      	bx	lr
